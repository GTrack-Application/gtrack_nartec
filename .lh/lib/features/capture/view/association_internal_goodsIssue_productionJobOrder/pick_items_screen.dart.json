{
    "sourceFile": "lib/features/capture/view/association_internal_goodsIssue_productionJobOrder/pick_items_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752576374595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752576374595,
            "name": "Commit-0",
            "content": "// ignore_for_file: unused_local_variable\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:gtrack_nartec/features/capture/cubits/association_internal_goodsIssue_productionJobOrder/production_job_order_cubit.dart';\nimport 'package:gtrack_nartec/features/capture/cubits/association_internal_goodsIssue_productionJobOrder/production_job_order_state.dart';\nimport 'package:gtrack_nartec/global/common/colors/app_colors.dart';\nimport 'package:gtrack_nartec/global/common/utils/app_navigator.dart';\nimport 'package:gtrack_nartec/global/common/utils/app_snakbars.dart';\nimport 'package:gtrack_nartec/global/widgets/buttons/primary_button.dart';\nimport 'package:gtrack_nartec/screens/home_screen.dart';\n\nclass PickItemsScreen extends StatefulWidget {\n  const PickItemsScreen({super.key});\n\n  @override\n  State<PickItemsScreen> createState() => _PickItemsScreenState();\n}\n\nclass _PickItemsScreenState extends State<PickItemsScreen> {\n  final cubit = ProductionJobOrderCubit();\n  final locationController = TextEditingController();\n  final palletController = TextEditingController();\n  final serialController = TextEditingController();\n  String selectedType = 'pallet';\n\n  @override\n  void initState() {\n    super.initState();\n    setState(() {\n      cubit.quantityPicked = context\n              .read<ProductionJobOrderCubit>()\n              .jobOrderDetail\n              ?.quantityPicked ??\n          0;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final bom = context.watch<ProductionJobOrderCubit>().jobOrderDetail;\n    cubit.jobOrderDetail = bom;\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Scan By Serial | Pallet'),\n        backgroundColor: AppColors.pink,\n      ),\n      body: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: BlocConsumer<ProductionJobOrderCubit, ProductionJobOrderState>(\n          bloc: cubit,\n          listener: (context, state) {\n            if (state is ProductionJobOrderMappedBarcodesError) {\n              AppSnackbars.danger(context, state.message);\n            } else if (state is ProductionJobOrderMappedBarcodesLoaded) {\n              // AppSnackbars.success(\n              //   context,\n              //   state.mappedBarcodes.message ?? '',\n              // );\n            }\n          },\n          builder: (context, state) {\n            return Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              spacing: 8.0,\n              children: [\n                // Quantity information\n                Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  children: [\n                    _buildInfoRow('Quantity:', '${bom?.quantity ?? 0}'),\n                    _buildInfoRow(\n                        'Picked Quantity:', '${cubit.quantityPicked}'),\n                  ],\n                ),\n                Divider(),\n\n                // Radio Buttons for scanning mode\n                _buildScanTypeSelector(),\n\n                // Conditional form based on selected type\n                if (selectedType == 'pallet')\n                  _buildPalletForm()\n                else\n                  _buildSerialForm(),\n\n                // Scanned items display with scroll\n                Expanded(\n                  child: _buildScannedItems(),\n                ),\n\n                // WIP Location input\n                const Text(\"Scan WIP Location\"),\n                TextFormField(\n                  controller: locationController,\n                  decoration: const InputDecoration(\n                    hintText: 'WIP Location',\n                  ),\n                ),\n                const SizedBox(height: 16),\n\n                // Pick selected items\n                BlocConsumer<ProductionJobOrderCubit, ProductionJobOrderState>(\n                  bloc: cubit,\n                  listener: (context, state) {\n                    if (state is PickItemsLoaded) {\n                      AppSnackbars.success(context, state.message);\n                    } else if (state is PickItemsError) {\n                      AppSnackbars.danger(context, state.message);\n                    }\n                  },\n                  builder: (context, state) {\n                    return PrimaryButtonWidget(\n                      text: \"Pick selected Items\",\n                      backgroundColor: AppColors.green,\n                      height: 36,\n                      isLoading: state is PickItemsLoading,\n                      onPressed: () {\n                        // Pick selected items\n                        final orderDetailId = context\n                                .read<ProductionJobOrderCubit>()\n                                .jobOrderDetail\n                                ?.id ??\n                            '';\n                        cubit.pickSelectedItems(\n                          orderDetailId: orderDetailId,\n                        );\n                      },\n                    );\n                  },\n                ),\n\n                // Save button\n                _buildSaveButton(),\n              ],\n            );\n          },\n        ),\n      ),\n    );\n  }\n\n  /// Builds a simple information row with a label and value\n  Widget _buildInfoRow(String label, String value) {\n    return Row(\n      children: [\n        Text(label),\n        const SizedBox(width: 4),\n        Text(value),\n      ],\n    );\n  }\n\n  /// Builds the scan type selector (Pallet vs Serial)\n  Widget _buildScanTypeSelector() {\n    return Row(\n      children: [\n        Radio<String>(\n          value: 'pallet',\n          groupValue: selectedType,\n          onChanged: (value) {\n            setState(() {\n              selectedType = value!;\n            });\n          },\n          activeColor: AppColors.pink,\n        ),\n        const Text('BY PALLET'),\n        const SizedBox(width: 16),\n        Radio<String>(\n          value: 'serial',\n          groupValue: selectedType,\n          onChanged: (value) {\n            setState(() {\n              selectedType = value!;\n            });\n          },\n          activeColor: AppColors.pink,\n        ),\n        const Text('BY SERIAL'),\n      ],\n    );\n  }\n\n  ///\n\n  /// Builds the save button with validation logic\n  Widget _buildSaveButton() {\n    return BlocConsumer<ProductionJobOrderCubit, ProductionJobOrderState>(\n      bloc: cubit,\n      listener: (context, state) {\n        if (state is ProductionJobOrderUpdateMappedBarcodesLoaded) {\n          AppSnackbars.success(context, state.message);\n          AppNavigator.pushAndRemoveUntil(\n            context: context,\n            screen: const HomeScreen(),\n          );\n        }\n      },\n      builder: (context, state) {\n        final isLoading =\n            state is ProductionJobOrderUpdateMappedBarcodesLoading;\n        return PrimaryButtonWidget(\n          text: \"Save\",\n          backgroundColor: AppColors.pink,\n          height: 36,\n          onPressed: () {\n            if (locationController.text.isEmpty) {\n              AppSnackbars.normal(\n                  context, \"Please Enter WIP Location in order to proceed\");\n              return;\n            } else if (isLoading) {\n              return;\n            }\n\n            // context.read<ProductionJobOrderCubit>().updateMappedBarcodes(\n            //       locationController.text,\n            //       cubit.items,\n            //       oldOrder: context.read<ProductionJobOrderCubit>().order!,\n            //       qty: cubit.quantityPicked,\n            //     );\n\n            cubit.updateMappedBarcodes(\n              locationController.text,\n              oldOrder: context.read<ProductionJobOrderCubit>().order,\n              qty: cubit.quantityPicked,\n            );\n          },\n          isLoading: isLoading,\n        );\n      },\n    );\n  }\n\n  Widget _buildPalletForm() {\n    final productionJobOrderCubit = context.read<ProductionJobOrderCubit>();\n    return BlocBuilder<ProductionJobOrderCubit, ProductionJobOrderState>(\n      bloc: cubit,\n      builder: (context, state) {\n        return Form(\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const Text(\"Scan Pallet Number\",\n                  style: TextStyle(fontWeight: FontWeight.w500)),\n              const SizedBox(height: 8),\n              TextFormField(\n                controller: palletController,\n                decoration: InputDecoration(\n                  hintText: 'Pallet Number',\n                  border: const OutlineInputBorder(),\n                  contentPadding: const EdgeInsets.symmetric(\n                    horizontal: 12,\n                    vertical: 16,\n                  ),\n                  suffixIcon: IconButton(\n                    onPressed: () {\n                      cubit.scanPackagingBySscc(\n                        palletCode: palletController.text,\n                      );\n                    },\n                    icon: Icon(state is ProductionJobOrderMappedBarcodesLoading\n                        ? Icons.hourglass_empty\n                        : Icons.qr_code),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n\n  Widget _buildScannedItems() {\n    final items = cubit.packagingScanResults;\n    final packages = cubit.packagingScanResults.entries;\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Row(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          children: [\n            Row(\n              children: [\n                RichText(\n                  text: TextSpan(\n                    style: const TextStyle(fontSize: 16, color: Colors.black),\n                    children: [\n                      TextSpan(\n                        text: 'Scanned Items (${items.length}) ',\n                        style: const TextStyle(fontWeight: FontWeight.bold),\n                      ),\n                    ],\n                  ),\n                ),\n                if (cubit.selectedpackagingScanResults.isNotEmpty)\n                  Container(\n                    margin: const EdgeInsets.only(left: 8),\n                    padding:\n                        const EdgeInsets.symmetric(horizontal: 8, vertical: 2),\n                    decoration: BoxDecoration(\n                      color: AppColors.pink.withOpacity(0.1),\n                      borderRadius: BorderRadius.circular(12),\n                    ),\n                    child: Text(\n                      '${cubit.selectedpackagingScanResults.length} selected',\n                      style: TextStyle(\n                        color: AppColors.pink,\n                        fontSize: 12,\n                        fontWeight: FontWeight.bold,\n                      ),\n                    ),\n                  ),\n              ],\n            ),\n          ],\n        ),\n        const SizedBox(height: 8),\n        Row(\n          mainAxisAlignment: MainAxisAlignment.end,\n          children: [\n            if (cubit.selectedpackagingScanResults.isNotEmpty)\n              TextButton(\n                onPressed: () {\n                  cubit.clearSelectedItems();\n                },\n                child: const Text(\n                  'Clear Selection',\n                  style: TextStyle(\n                    color: Colors.blue,\n                    fontWeight: FontWeight.w500,\n                    fontSize: 13,\n                  ),\n                ),\n              ),\n            TextButton(\n              onPressed: () {\n                cubit.clearItems();\n              },\n              child: const Text(\n                'Clear All',\n                style: TextStyle(\n                  color: Colors.red,\n                  fontWeight: FontWeight.w500,\n                ),\n              ),\n            ),\n          ],\n        ),\n        const SizedBox(height: 8),\n        Expanded(\n          child: items.isEmpty\n              ? Center(\n                  child: Text(\n                    'No items scanned yet',\n                    style: TextStyle(\n                      color: Colors.grey.shade600,\n                      fontSize: 16,\n                    ),\n                  ),\n                )\n              : SingleChildScrollView(\n                  child: Column(\n                    children: [\n                      ...packages.map(\n                        (package) => Card(\n                          color: AppColors.white,\n                          margin: const EdgeInsets.only(bottom: 16),\n                          shape: RoundedRectangleBorder(\n                            borderRadius: BorderRadius.circular(8),\n                            side: BorderSide(color: Colors.grey.shade300),\n                          ),\n                          elevation: 1,\n                          child: Padding(\n                            padding: const EdgeInsets.all(16),\n                            child: Column(\n                              crossAxisAlignment: CrossAxisAlignment.start,\n                              children: [\n                                // Package SSCC header\n                                Row(\n                                  mainAxisAlignment:\n                                      MainAxisAlignment.spaceBetween,\n                                  children: [\n                                    Text(\n                                      'SSCC: ${package.key}',\n                                      style: const TextStyle(\n                                        fontSize: 16,\n                                        fontWeight: FontWeight.bold,\n                                      ),\n                                    ),\n                                    IconButton(\n                                      onPressed: () {\n                                        // Remove this SSCC entry\n                                        cubit.packagingScanResults\n                                            .remove(package.key);\n                                        setState(() {});\n                                      },\n                                      icon: const Icon(Icons.close),\n                                      padding: EdgeInsets.zero,\n                                      constraints: const BoxConstraints(),\n                                    ),\n                                  ],\n                                ),\n\n                                Text(\n                                  'Total items: ${package.value.length}',\n                                  style: TextStyle(\n                                    color: Colors.grey.shade600,\n                                    fontSize: 14,\n                                  ),\n                                ),\n                                const SizedBox(height: 16),\n\n                                // Individual package details\n                                ...package.value\n                                    .map((item) => _buildSelectionItem(item)),\n                              ],\n                            ),\n                          ),\n                        ),\n                      )\n                    ],\n                  ),\n                ),\n        ),\n      ],\n    );\n  }\n\n  Widget _buildSelectionItem(Map item) {\n    final isSelected = cubit.isItemSelected(item);\n\n    return GestureDetector(\n      onTap: () {\n        cubit.toggleItemSelection(item);\n        setState(() {});\n      },\n      child: Container(\n        margin: const EdgeInsets.only(bottom: 12),\n        padding: const EdgeInsets.all(12),\n        decoration: BoxDecoration(\n          color: isSelected\n              ? AppColors.pink.withOpacity(0.05)\n              : Colors.grey.shade50,\n          borderRadius: BorderRadius.circular(8),\n          border: Border.all(\n            color: isSelected ? AppColors.pink : Colors.grey.shade200,\n            width: isSelected ? 1.5 : 1,\n          ),\n        ),\n        child: Row(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // Checkbox for selection\n            Padding(\n              padding: const EdgeInsets.only(right: 12, top: 4),\n              child: SizedBox(\n                width: 20,\n                height: 20,\n                child: Checkbox(\n                  value: isSelected,\n                  activeColor: AppColors.pink,\n                  shape: RoundedRectangleBorder(\n                    borderRadius: BorderRadius.circular(4),\n                  ),\n                  onChanged: (value) {\n                    cubit.toggleItemSelection(item);\n                    setState(() {});\n                  },\n                ),\n              ),\n            ),\n\n            // Item details\n            Expanded(\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  if (item['description'] != null)\n                    Padding(\n                      padding: const EdgeInsets.only(bottom: 8),\n                      child: Text(\n                        item['description'] ?? '',\n                        style: TextStyle(\n                          fontWeight: FontWeight.w600,\n                          fontSize: 15,\n                          color: isSelected ? AppColors.pink : Colors.black,\n                        ),\n                      ),\n                    ),\n\n                  // First row\n                  Row(\n                    children: [\n                      Expanded(\n                        child: _buildInfoField(\n                            'GTIN', item['serialGTIN'] ?? 'N/A'),\n                      ),\n                      Expanded(\n                        child: _buildInfoField(\n                            'Serial', item['serialNo'] ?? 'N/A'),\n                      ),\n                    ],\n                  ),\n                  const SizedBox(height: 8),\n\n                  // Second row\n                  Row(\n                    children: [\n                      Expanded(\n                        child: _buildInfoField(\n                            'Member ID', item['memberId'] ?? 'N/A'),\n                      ),\n                      Expanded(\n                        child: _buildInfoField(\n                            'Location', item['binLocationId'] ?? 'N/A'),\n                      ),\n                    ],\n                  ),\n                ],\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildSerialForm() {\n    return BlocBuilder<ProductionJobOrderCubit, ProductionJobOrderState>(\n      bloc: cubit,\n      builder: (context, state) {\n        return Form(\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const Text(\"Scan Serial Number\",\n                  style: TextStyle(fontWeight: FontWeight.w500)),\n              const SizedBox(height: 8),\n              TextFormField(\n                controller: serialController,\n                decoration: InputDecoration(\n                  hintText: 'Serial Number',\n                  border: const OutlineInputBorder(),\n                  contentPadding: const EdgeInsets.symmetric(\n                    horizontal: 12,\n                    vertical: 16,\n                  ),\n                  suffixIcon: IconButton(\n                    onPressed: () {\n                      //   cubit.getMappedBarcodes(\n                      //     context\n                      //             .read<ProductionJobOrderCubit>()\n                      //             .bomStartData\n                      //             ?.productId ??\n                      //         '',\n                      //     serialNo: serialController.text,\n                      //   );\n                      cubit.scanPackagingBySscc(\n                        serialNo: serialController.text,\n                      );\n                    },\n                    icon: Icon(state is ProductionJobOrderMappedBarcodesLoading\n                        ? Icons.hourglass_empty\n                        : Icons.qr_code),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n\n  Widget _buildInfoField(String label, String value) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Text(\n          label,\n          style: TextStyle(\n            color: Colors.grey.shade600,\n            fontSize: 12,\n          ),\n        ),\n        Text(\n          value,\n          style: const TextStyle(\n            fontSize: 14,\n            fontWeight: FontWeight.w500,\n          ),\n        ),\n      ],\n    );\n  }\n}\n"
        }
    ]
}