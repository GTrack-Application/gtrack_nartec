{
    "sourceFile": "lib/features/capture/view/association_internal_goodsIssue_productionJobOrder/goods_issue_job_order_details_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752575745693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752575745693,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:gtrack_nartec/features/capture/cubits/association_internal_goodsIssue_productionJobOrder/production_job_order_cubit.dart';\nimport 'package:gtrack_nartec/features/capture/cubits/association_internal_goodsIssue_productionJobOrder/production_job_order_state.dart';\nimport 'package:gtrack_nartec/features/capture/view/association_internal_goodsIssue_productionJobOrder/job_order_bom_details_screen.dart';\nimport 'package:gtrack_nartec/features/capture/view/association_internal_goodsIssue_productionJobOrder/widgets/empty_state_widget.dart';\nimport 'package:gtrack_nartec/features/capture/view/association_internal_goodsIssue_productionJobOrder/widgets/error_state_widget.dart';\nimport 'package:gtrack_nartec/features/capture/view/association_internal_goodsIssue_productionJobOrder/widgets/info_row_widget.dart';\nimport 'package:gtrack_nartec/features/capture/view/association_internal_goodsIssue_productionJobOrder/widgets/shimmer_loading_widget.dart';\nimport 'package:gtrack_nartec/global/common/colors/app_colors.dart';\nimport 'package:gtrack_nartec/global/common/utils/app_navigator.dart';\nimport 'package:gtrack_nartec/global/widgets/buttons/primary_button.dart';\n\nclass GoodsIssueJobOrderDetailsScreen extends StatefulWidget {\n  final String jobOrderDetailsId;\n  final String jobOrderNumber;\n\n  const GoodsIssueJobOrderDetailsScreen({\n    super.key,\n    required this.jobOrderDetailsId,\n    required this.jobOrderNumber,\n  });\n\n  @override\n  State<GoodsIssueJobOrderDetailsScreen> createState() =>\n      _GoodsIssueJobOrderDetailsScreenState();\n}\n\nclass _GoodsIssueJobOrderDetailsScreenState\n    extends State<GoodsIssueJobOrderDetailsScreen> {\n  late ProductionJobOrderCubit _productionJobOrderCubit;\n\n  @override\n  void initState() {\n    super.initState();\n    _productionJobOrderCubit = ProductionJobOrderCubit();\n    _productionJobOrderCubit.getProductionJobOrderBom(widget.jobOrderDetailsId);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text(\n          'Picklist Details',\n          style: TextStyle(fontWeight: FontWeight.bold),\n        ),\n        backgroundColor: AppColors.pink,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          color: AppColors.white,\n        ),\n        child: BlocBuilder<ProductionJobOrderCubit, ProductionJobOrderState>(\n          bloc: _productionJobOrderCubit,\n          builder: (context, state) {\n            if (state is ProductionJobOrderBomLoading) {\n              return const ShimmerLoadingWidget();\n            }\n\n            if (state is ProductionJobOrderBomError) {\n              return ErrorStateWidget(message: state.message);\n            }\n\n            if (state is ProductionJobOrderBomLoaded) {\n              if (state.bomItems.isEmpty) {\n                return const EmptyStateWidget(\n                  message: 'No Order Details Found!',\n                );\n              }\n\n              return ListView.builder(\n                padding: const EdgeInsets.all(16),\n                itemCount: state.bomItems.length,\n                itemBuilder: (context, index) {\n                  final bom = state.bomItems[index];\n                  final isPicked = bom.quantity == bom.quantityPicked ||\n                      bom.status == 'picked';\n\n                  return Card(\n                    elevation: 8,\n                    margin: const EdgeInsets.only(bottom: 20),\n                    color: Colors.white,\n                    shadowColor: Colors.black.withOpacity(0.1),\n                    shape: RoundedRectangleBorder(\n                      borderRadius: BorderRadius.circular(20),\n                      side: BorderSide(\n                        color: Colors.grey.withOpacity(0.1),\n                        width: 1,\n                      ),\n                    ),\n                    child: Container(\n                      decoration: BoxDecoration(\n                        color: Colors.white,\n                        borderRadius: BorderRadius.circular(20),\n                        gradient: LinearGradient(\n                          begin: Alignment.topLeft,\n                          end: Alignment.bottomRight,\n                          colors: [\n                            Colors.white,\n                            Colors.grey.shade50,\n                          ],\n                        ),\n                      ),\n                      child: Padding(\n                        padding: const EdgeInsets.all(20),\n                        child: Column(\n                          crossAxisAlignment: CrossAxisAlignment.start,\n                          children: [\n                            Row(\n                              mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                              children: [\n                                Expanded(\n                                  child: Text(\n                                    bom.productName ?? 'N/A',\n                                    style: const TextStyle(\n                                      fontSize: 16,\n                                      fontWeight: FontWeight.bold,\n                                      color: Colors.black87,\n                                    ),\n                                  ),\n                                ),\n                                Container(\n                                  padding: const EdgeInsets.symmetric(\n                                    horizontal: 16,\n                                    vertical: 8,\n                                  ),\n                                  decoration: BoxDecoration(\n                                    color: bom.status == 'pending'\n                                        ? Colors.orange.shade400\n                                        : Colors.green.shade400,\n                                    borderRadius: BorderRadius.circular(25),\n                                    boxShadow: [\n                                      BoxShadow(\n                                        color: (bom.status == 'pending'\n                                                ? Colors.orange\n                                                : Colors.green)\n                                            .withOpacity(0.3),\n                                        blurRadius: 8,\n                                        offset: const Offset(0, 2),\n                                      ),\n                                    ],\n                                  ),\n                                  child: Text(\n                                    bom.status?.toUpperCase() ?? 'N/A',\n                                    style: const TextStyle(\n                                      color: Colors.white,\n                                      fontWeight: FontWeight.bold,\n                                      fontSize: 12,\n                                    ),\n                                  ),\n                                ),\n                              ],\n                            ),\n                            const SizedBox(height: 16),\n                            InfoRowWidget(\n                              icon: Icons.qr_code,\n                              label: 'Product ID',\n                              value: bom.productId ?? 'N/A',\n                            ),\n                            InfoRowWidget(\n                              icon: Icons.description,\n                              label: 'Description',\n                              value: bom.productDescription ?? 'N/A',\n                            ),\n                            InfoRowWidget(\n                              icon: Icons.shopping_basket,\n                              label: 'Quantity',\n                              value: '${bom.quantity} ${bom.unitOfMeasure}',\n                            ),\n                            InfoRowWidget(\n                              icon: Icons.check_circle_outline,\n                              label: 'Picked',\n                              value: '${bom.quantityPicked}',\n                            ),\n                            InfoRowWidget(\n                              icon: Icons.location_on,\n                              label: 'Location',\n                              value: bom.binLocation ?? 'N/A',\n                            ),\n                            const SizedBox(height: 20),\n                            Container(\n                              width: double.infinity,\n                              decoration: BoxDecoration(\n                                borderRadius: BorderRadius.circular(12),\n                                boxShadow: [\n                                  BoxShadow(\n                                    color: AppColors.pink.withOpacity(0.3),\n                                    blurRadius: 8,\n                                    offset: const Offset(0, 4),\n                                  ),\n                                ],\n                              ),\n                              child: PrimaryButtonWidget(\n                                text: \"Start Picking\",\n                                backgroundColor: AppColors.pink,\n                                height: 45,\n                                onPressed: () {\n                                  if (isPicked) return;\n                                  // if Item is not picked\n                                  context\n                                      .read<ProductionJobOrderCubit>()\n                                      .jobOrderDetail = bom;\n                                  AppNavigator.goToPage(\n                                    context: context,\n                                    screen: JobOrderBomDetailsScreen(\n                                      barcode: bom.productId ?? '',\n                                    ),\n                                  );\n                                },\n                              ),\n                            ),\n                          ],\n                        ),\n                      ),\n                    ),\n                  );\n                },\n              );\n            }\n\n            return const Center(child: Text('No BOM items found'));\n          },\n        ),\n      ),\n    );\n  }\n}\n"
        }
    ]
}