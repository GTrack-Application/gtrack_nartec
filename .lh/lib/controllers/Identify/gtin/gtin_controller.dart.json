{
    "sourceFile": "lib/controllers/Identify/gtin/gtin_controller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 66,
            "patches": [
                {
                    "date": 1750754131897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750754149468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,13 +108,9 @@\n           'Failed to load allergens');\r\n     }\r\n   }\r\n \r\n-  static Future<RetailerModel> getRetailerInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n+  static Future<RetailerModel> getRetailerInformation(String gtin) async {\r\n     final response = await upcHubService.request(\r\n       '/api/digitalLinks/retailers?page=$page&pageSize=$limit&barcode=$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n"
                },
                {
                    "date": 1750754195993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,343 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    print(\r\n+        \"Url: ${AppUrls.upcHub}/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit\");\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<RetailerModel> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final retailerResponse = RetailerModel.fromJson(response.data);\r\n+    return retailerResponse;\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<PackagingResponse> getPackagingInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n+    return packagingResponse;\r\n+  }\r\n+\r\n+  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getPromotionalOffersByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final promotionalResponse =\r\n+        PromotionalOfferResponse.fromJson(response.data);\r\n+    return promotionalResponse;\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin, page: page, limit: limit),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin, page: page, limit: limit),\r\n+        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750754208790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,9 +248,9 @@\n   }) async {\r\n     try {\r\n       final responses = await Future.wait([\r\n         getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n         getIngredientInformation(gtin, page: page, limit: limit),\r\n         getPackagingInformation(gtin, page: page, limit: limit),\r\n         getPromotionalOffers(gtin, page: page, limit: limit),\r\n         getRecipeInformation(gtin, page: page, limit: limit),\r\n"
                },
                {
                    "date": 1750754581785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n           'Failed to load allergens');\r\n     }\r\n   }\r\n \r\n-  static Future<RetailerModel> getRetailerInformation(String gtin) async {\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n     final response = await upcHubService.request(\r\n       '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n"
                },
                {
                    "date": 1750754603232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,344 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    print(\r\n+        \"Url: ${AppUrls.upcHub}/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit\");\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final retailerResponse =\r\n+        (response.data as List).map((e) => RetailerModel.fromJson(e)).toList();\r\n+    return retailerResponse;\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<PackagingResponse> getPackagingInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n+    return packagingResponse;\r\n+  }\r\n+\r\n+  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getPromotionalOffersByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final promotionalResponse =\r\n+        PromotionalOfferResponse.fromJson(response.data);\r\n+    return promotionalResponse;\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin, page: page, limit: limit),\r\n+        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750761500000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,342 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    print(\r\n+        \"Url: ${AppUrls.upcHub}/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit\");\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final retailerResponse = RetailerResponse.fromJson(response.data);\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<PackagingResponse> getPackagingInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n+    return packagingResponse;\r\n+  }\r\n+\r\n+  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getPromotionalOffersByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final promotionalResponse =\r\n+        PromotionalOfferResponse.fromJson(response.data);\r\n+    return promotionalResponse;\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin, page: page, limit: limit),\r\n+        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750761523599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,349 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    print(\r\n+        \"Url: ${AppUrls.upcHub}/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit\");\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    if (response.success) {\r\n+      return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load retailers');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<PackagingResponse> getPackagingInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n+    return packagingResponse;\r\n+  }\r\n+\r\n+  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getPromotionalOffersByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final promotionalResponse =\r\n+        PromotionalOfferResponse.fromJson(response.data);\r\n+    return promotionalResponse;\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin, page: page, limit: limit),\r\n+        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750761531614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,1376 +346,4 @@\n       throw Exception('Failed to load nutrition facts');\r\n     }\r\n   }\r\n }\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    print(\r\n-        \"Url: ${AppUrls.upcHub}/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit\");\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final retailerResponse = RetailerResponse.fromJson(response.data);\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<PackagingResponse> getPackagingInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n-    return packagingResponse;\r\n-  }\r\n-\r\n-  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getPromotionalOffersByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final promotionalResponse =\r\n-        PromotionalOfferResponse.fromJson(response.data);\r\n-    return promotionalResponse;\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin, page: page, limit: limit),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    print(\r\n-        \"Url: ${AppUrls.upcHub}/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit\");\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final retailerResponse =\r\n-        (response.data as List).map((e) => RetailerModel.fromJson(e)).toList();\r\n-    return retailerResponse;\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<PackagingResponse> getPackagingInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n-    return packagingResponse;\r\n-  }\r\n-\r\n-  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getPromotionalOffersByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final promotionalResponse =\r\n-        PromotionalOfferResponse.fromJson(response.data);\r\n-    return promotionalResponse;\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin, page: page, limit: limit),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    print(\r\n-        \"Url: ${AppUrls.upcHub}/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit\");\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final retailerResponse = RetailerModel.fromJson(response.data);\r\n-    return retailerResponse;\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<PackagingResponse> getPackagingInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n-    return packagingResponse;\r\n-  }\r\n-\r\n-  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getPromotionalOffersByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final promotionalResponse =\r\n-        PromotionalOfferResponse.fromJson(response.data);\r\n-    return promotionalResponse;\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin, page: page, limit: limit),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    print(\r\n-        \"Url: ${AppUrls.upcHub}/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit\");\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<RetailerModel> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final retailerResponse = RetailerModel.fromJson(response.data);\r\n-    return retailerResponse;\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<PackagingResponse> getPackagingInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n-    return packagingResponse;\r\n-  }\r\n-\r\n-  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getPromotionalOffersByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final promotionalResponse =\r\n-        PromotionalOfferResponse.fromJson(response.data);\r\n-    return promotionalResponse;\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin, page: page, limit: limit),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin, page: page, limit: limit),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1750761542184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,15 +115,9 @@\n       method: HttpMethod.get,\r\n     );\r\n \r\n     final data = response.data['data'] as List;\r\n-    if (response.success) {\r\n-      return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load retailers');\r\n-    }\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList(growable: false);\r\n   }\r\n \r\n   static Future<IngredientResponse> getIngredientInformation(\r\n     String gtin, {\r\n"
                },
                {
                    "date": 1750761548434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n       method: HttpMethod.get,\r\n     );\r\n \r\n     final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList(growable: false);\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n   }\r\n \r\n   static Future<IngredientResponse> getIngredientInformation(\r\n     String gtin, {\r\n"
                },
                {
                    "date": 1750762200069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,340 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<PackagingResponse> getPackagingInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n+    return packagingResponse;\r\n+  }\r\n+\r\n+  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getPromotionalOffersByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final promotionalResponse =\r\n+        PromotionalOfferResponse.fromJson(response.data);\r\n+    return promotionalResponse;\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin, page: page, limit: limit),\r\n+        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750762205948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,340 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<PackagingResponse> getPackagingInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n+    return packagingResponse;\r\n+  }\r\n+\r\n+  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getPromotionalOffersByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final promotionalResponse =\r\n+        PromotionalOfferResponse.fromJson(response.data);\r\n+    return promotionalResponse;\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin, page: page, limit: limit),\r\n+        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750762355691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n     final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n     return ingredientResponse;\r\n   }\r\n \r\n-  static Future<PackagingResponse> getPackagingInformation(\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n     String gtin, {\r\n     required int page,\r\n     required int limit,\r\n   }) async {\r\n"
                },
                {
                    "date": 1750762363641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,12 +130,9 @@\n     return ingredientResponse;\r\n   }\r\n \r\n   static Future<List<PackagingModel>> getPackagingInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n+      String gtin) async {\r\n     final response = await upcHubService.request(\r\n       '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n@@ -337,687 +334,4 @@\n       throw Exception('Failed to load nutrition facts');\r\n     }\r\n   }\r\n }\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<PackagingResponse> getPackagingInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n-    return packagingResponse;\r\n-  }\r\n-\r\n-  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getPromotionalOffersByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final promotionalResponse =\r\n-        PromotionalOfferResponse.fromJson(response.data);\r\n-    return promotionalResponse;\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin, page: page, limit: limit),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    print(\r\n-        \"Url: ${AppUrls.upcHub}/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit\");\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<PackagingResponse> getPackagingInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n-    return packagingResponse;\r\n-  }\r\n-\r\n-  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getPromotionalOffersByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final promotionalResponse =\r\n-        PromotionalOfferResponse.fromJson(response.data);\r\n-    return promotionalResponse;\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin, page: page, limit: limit),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1750762392112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n+    return packagingResponse;\r\n+  }\r\n+\r\n+  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getPromotionalOffersByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final promotionalResponse =\r\n+        PromotionalOfferResponse.fromJson(response.data);\r\n+    return promotionalResponse;\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin, page: page, limit: limit),\r\n+        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750762402045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getPromotionalOffersByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final promotionalResponse =\r\n+        PromotionalOfferResponse.fromJson(response.data);\r\n+    return promotionalResponse;\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin, page: page, limit: limit),\r\n+        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750762413998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getPromotionalOffersByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final promotionalResponse =\r\n+        PromotionalOfferResponse.fromJson(response.data);\r\n+    return promotionalResponse;\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin, page: page, limit: limit),\r\n+        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750762422743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n       final responses = await Future.wait([\r\n         getAllergenInformation(gtin, page: page, limit: limit),\r\n         getRetailerInformation(gtin),\r\n         getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin),\r\n         getPromotionalOffers(gtin, page: page, limit: limit),\r\n         getRecipeInformation(gtin, page: page, limit: limit),\r\n         getLeafletInformation(gtin, page: page, limit: limit),\r\n         getImageInformation(gtin, page: page, limit: limit),\r\n@@ -334,1015 +334,4 @@\n       throw Exception('Failed to load nutrition facts');\r\n     }\r\n   }\r\n }\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['packagings'] as List;\r\n-    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getPromotionalOffersByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final promotionalResponse =\r\n-        PromotionalOfferResponse.fromJson(response.data);\r\n-    return promotionalResponse;\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin, page: page, limit: limit),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n-    return packagingResponse;\r\n-  }\r\n-\r\n-  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getPromotionalOffersByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final promotionalResponse =\r\n-        PromotionalOfferResponse.fromJson(response.data);\r\n-    return promotionalResponse;\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin, page: page, limit: limit),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n-    return packagingResponse;\r\n-  }\r\n-\r\n-  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getPromotionalOffersByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final promotionalResponse =\r\n-        PromotionalOfferResponse.fromJson(response.data);\r\n-    return promotionalResponse;\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin, page: page, limit: limit),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1750762737885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getPromotionalOffersByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final promotionalResponse =\r\n+        PromotionalOfferResponse.fromJson(response.data);\r\n+    return promotionalResponse;\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin),\r\n+        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750831552665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:gtrack_nartec/screens/home/share/product-information/digital_link_screen.dart';\r\n import 'package:http/http.dart' as http;\r\n \r\n class GTINController {\r\n   static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n@@ -140,9 +141,9 @@\n     final data = response.data['packagings'] as List;\r\n     return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n   }\r\n \r\n-  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n+  static Future<List<PromotionalOffers>> getPromotionalOffers(\r\n     String gtin, {\r\n     required int page,\r\n     required int limit,\r\n   }) async {\r\n"
                },
                {
                    "date": 1750831587760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,351 +142,11 @@\n     return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n   }\r\n \r\n   static Future<List<PromotionalOffers>> getPromotionalOffers(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getPromotionalOffersByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final promotionalResponse =\r\n-        PromotionalOfferResponse.fromJson(response.data);\r\n-    return promotionalResponse;\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n       String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['packagings'] as List;\r\n-    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n     final response = await gtrackService.request(\r\n-      '/api/getPromotionalOffersByGtin/$gtin',\r\n+      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n \r\n     final promotionalResponse =\r\n"
                },
                {
                    "date": 1750831597235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,341 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:gtrack_nartec/screens/home/share/product-information/digital_link_screen.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<PromotionalOffers>> getPromotionalOffers(\r\n+      String gtin) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return (response.data['promotionalOffers'] as List)\r\n+          .map((e) => PromotionalOffers.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load promotional offers');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin),\r\n+        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750831617046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,334 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:gtrack_nartec/screens/home/share/product-information/digital_link_screen.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<PromotionalOffers>> getPromotionalOffers(\r\n+      String gtin) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['promotionalOffers'] as List;\r\n+    return data.map((e) => PromotionalOffers.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin),\r\n+        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750831630201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,680 +331,4 @@\n       throw Exception('Failed to load nutrition facts');\r\n     }\r\n   }\r\n }\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:gtrack_nartec/screens/home/share/product-information/digital_link_screen.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['packagings'] as List;\r\n-    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<PromotionalOffers>> getPromotionalOffers(\r\n-      String gtin) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return (response.data['promotionalOffers'] as List)\r\n-          .map((e) => PromotionalOffers.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load promotional offers');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:gtrack_nartec/screens/home/share/product-information/digital_link_screen.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['packagings'] as List;\r\n-    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<PromotionalOffers>> getPromotionalOffers(\r\n-      String gtin) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final promotionalResponse =\r\n-        PromotionalOfferResponse.fromJson(response.data);\r\n-    return promotionalResponse;\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1750831808837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,334 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:gtrack_nartec/screens/home/share/product-information/digital_link_screen.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<PromotionalOffersModel>> getPromotionalOffers(\r\n+      String gtin) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['promotionalOffers'] as List;\r\n+    return data.map((e) => PromotionalOffers.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin),\r\n+        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750831814152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,334 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:gtrack_nartec/screens/home/share/product-information/digital_link_screen.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<PromotionalOffers>> getPromotionalOffers(\r\n+      String gtin) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['promotionalOffers'] as List;\r\n+    return data.map((e) => PromotionalOffers.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin),\r\n+        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750831823858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,17 +141,17 @@\n     final data = response.data['packagings'] as List;\r\n     return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n   }\r\n \r\n-  static Future<List<PromotionalOffers>> getPromotionalOffers(\r\n+  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n       String gtin) async {\r\n     final response = await gtrackService.request(\r\n       '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n \r\n     final data = response.data['promotionalOffers'] as List;\r\n-    return data.map((e) => PromotionalOffers.fromJson(e)).toList();\r\n+    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n   }\r\n \r\n   static Future<RecipeResponse> getRecipeInformation(\r\n     String gtin, {\r\n"
                },
                {
                    "date": 1750831831441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n         getAllergenInformation(gtin, page: page, limit: limit),\r\n         getRetailerInformation(gtin),\r\n         getIngredientInformation(gtin, page: page, limit: limit),\r\n         getPackagingInformation(gtin),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n+        getPromotionalOffers(gtin),\r\n         getRecipeInformation(gtin, page: page, limit: limit),\r\n         getLeafletInformation(gtin, page: page, limit: limit),\r\n         getImageInformation(gtin, page: page, limit: limit),\r\n         getInstructionInformation(gtin, page: page, limit: limit),\r\n"
                },
                {
                    "date": 1750831837143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,8 @@\n import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:gtrack_nartec/screens/home/share/product-information/digital_link_screen.dart';\r\n import 'package:http/http.dart' as http;\r\n \r\n class GTINController {\r\n   static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n@@ -331,672 +330,4 @@\n       throw Exception('Failed to load nutrition facts');\r\n     }\r\n   }\r\n }\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:gtrack_nartec/screens/home/share/product-information/digital_link_screen.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['packagings'] as List;\r\n-    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<PromotionalOffersModel>> getPromotionalOffers(\r\n-      String gtin) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['promotionalOffers'] as List;\r\n-    return data.map((e) => PromotionalOffers.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:gtrack_nartec/screens/home/share/product-information/digital_link_screen.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['packagings'] as List;\r\n-    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<PromotionalOffers>> getPromotionalOffers(\r\n-      String gtin) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['promotionalOffers'] as List;\r\n-    return data.map((e) => PromotionalOffers.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin),\r\n-        getPromotionalOffers(gtin, page: page, limit: limit),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1750832894457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,333 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['promotionalOffers'] as List;\r\n+    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin),\r\n+        getPromotionalOffers(gtin),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750833172275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,333 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['promotionalOffers'] as List;\r\n+    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<RecipeResponse> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin),\r\n+        getPromotionalOffers(gtin),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750833380993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,670 +330,4 @@\n       throw Exception('Failed to load nutrition facts');\r\n     }\r\n   }\r\n }\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['packagings'] as List;\r\n-    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['promotionalOffers'] as List;\r\n-    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin),\r\n-        getPromotionalOffers(gtin),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['packagings'] as List;\r\n-    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n-      String gtin) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['promotionalOffers'] as List;\r\n-    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin),\r\n-        getPromotionalOffers(gtin),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1750833394376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,8 +147,10 @@\n       '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n \r\n+    print(\"Url: ${response.url}\");\r\n+\r\n     final data = response.data['promotionalOffers'] as List;\r\n     return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1750833409732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,8 +142,9 @@\n   }\r\n \r\n   static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n       String gtin) async {\r\n+    print(\"Fetching promotional offers for GTIN: $gtin\");\r\n     final response = await upcHubService.request(\r\n       '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n"
                },
                {
                    "date": 1750833464733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,8 @@\n   }\r\n \r\n   static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n       String gtin) async {\r\n-    print(\"Fetching promotional offers for GTIN: $gtin\");\r\n     final response = await upcHubService.request(\r\n       '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n"
                },
                {
                    "date": 1750833476061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,10 +147,8 @@\n       '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n \r\n-    print(\"Url: ${response.url}\");\r\n-\r\n     final data = response.data['promotionalOffers'] as List;\r\n     return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1750834585084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,333 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['promotionalOffers'] as List;\r\n+    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<RecipeModel>> getRecipeInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n+    return recipeResponse;\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin),\r\n+        getPromotionalOffers(gtin),\r\n+        getRecipeInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750834607557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,10 +157,10 @@\n       '/api/getRecipeDataByGtin/$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n \r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n+    final data = response.data as List;\r\n+    return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n   }\r\n \r\n   static Future<LeafletResponse> getLeafletInformation(\r\n     String gtin, {\r\n"
                },
                {
                    "date": 1750834636751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,13 +151,9 @@\n     final data = response.data['promotionalOffers'] as List;\r\n     return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n   }\r\n \r\n-  static Future<List<RecipeModel>> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n+  static Future<List<RecipeModel>> getRecipeInformation(String gtin) async {\r\n     final response = await gtrackService.request(\r\n       '/api/getRecipeDataByGtin/$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n@@ -330,337 +326,4 @@\n       throw Exception('Failed to load nutrition facts');\r\n     }\r\n   }\r\n }\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['packagings'] as List;\r\n-    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['promotionalOffers'] as List;\r\n-    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<RecipeResponse> getRecipeInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n-    return recipeResponse;\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin),\r\n-        getPromotionalOffers(gtin),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1750834648905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,329 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 100,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['promotionalOffers'] as List;\r\n+    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<RecipeModel>> getRecipeInformation(String gtin) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data as List;\r\n+    return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin, page: page, limit: limit),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin),\r\n+        getPromotionalOffers(gtin),\r\n+        getRecipeInformation(gtin),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750834665994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,13 +85,9 @@\n       throw Exception('Failed to load paginated products');\r\n     }\r\n   }\r\n \r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n+  static Future<List<AllergenModel>> getAllergenInformation(String gtin) async {\r\n     final response = await upcHubService.request(\r\n       '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n       method: HttpMethod.get,\r\n     );\r\n@@ -326,333 +322,4 @@\n       throw Exception('Failed to load nutrition facts');\r\n     }\r\n   }\r\n }\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 100,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['packagings'] as List;\r\n-    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['promotionalOffers'] as List;\r\n-    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<RecipeModel>> getRecipeInformation(String gtin) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data as List;\r\n-    return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin),\r\n-        getPromotionalOffers(gtin),\r\n-        getRecipeInformation(gtin, page: page, limit: limit),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1750834673158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n   }\r\n \r\n   static Future<List<AllergenModel>> getAllergenInformation(String gtin) async {\r\n     final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=1&pageSize=100',\r\n       method: HttpMethod.get,\r\n     );\r\n \r\n     if (response.success) {\r\n"
                },
                {
                    "date": 1750834680425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,325 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['promotionalOffers'] as List;\r\n+    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<RecipeModel>> getRecipeInformation(String gtin) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data as List;\r\n+    return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin),\r\n+        getPromotionalOffers(gtin),\r\n+        getRecipeInformation(gtin),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750834801799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,325 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['promotionalOffers'] as List;\r\n+    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<RecipeModel>> getRecipeInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data as List;\r\n+    return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin),\r\n+        getPromotionalOffers(gtin),\r\n+        getRecipeInformation(gtin),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750835143297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,654 +322,4 @@\n       throw Exception('Failed to load nutrition facts');\r\n     }\r\n   }\r\n }\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['packagings'] as List;\r\n-    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['promotionalOffers'] as List;\r\n-    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<RecipeModel>> getRecipeInformation(String gtin) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data as List;\r\n-    return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin),\r\n-        getPromotionalOffers(gtin),\r\n-        getRecipeInformation(gtin),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['packagings'] as List;\r\n-    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['promotionalOffers'] as List;\r\n-    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<RecipeModel>> getRecipeInformation(String gtin) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data as List;\r\n-    return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin, page: page, limit: limit),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin),\r\n-        getPromotionalOffers(gtin),\r\n-        getRecipeInformation(gtin),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1750836187587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,10 @@\n class GTINController {\r\n   static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n   static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n   static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+  static final HttpService gtrackBackendOnline =\r\n+      HttpService(baseUrl: AppUrls.gtrack);\r\n \r\n   // static Future<List<GTIN_Model>> getProducts() async {\r\n   //   final userId = await AppPreferences.getUserId();\r\n \r\n"
                },
                {
                    "date": 1750836226965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,327 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+  static final HttpService gtrackBackendOnline =\r\n+      HttpService(baseUrl: AppUrls.gtrack);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['promotionalOffers'] as List;\r\n+    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<RecipeModel>> getRecipeInformation(String gtin) async {\r\n+    final response = await gtrackBackendOnline.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data as List;\r\n+    return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<ImageResponse> getImageInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return ImageResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load images');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin),\r\n+        getPromotionalOffers(gtin),\r\n+        getRecipeInformation(gtin),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin, page: page, limit: limit),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750836247866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -324,331 +324,4 @@\n       throw Exception('Failed to load nutrition facts');\r\n     }\r\n   }\r\n }\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-  static final HttpService gtrackBackendOnline =\r\n-      HttpService(baseUrl: AppUrls.gtrack);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['packagings'] as List;\r\n-    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['promotionalOffers'] as List;\r\n-    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<RecipeModel>> getRecipeInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data as List;\r\n-    return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<ImageResponse> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin),\r\n-        getPromotionalOffers(gtin),\r\n-        getRecipeInformation(gtin),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1750921630890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n     final leafletResponse = LeafletResponse.fromJson(response.data);\r\n     return leafletResponse;\r\n   }\r\n \r\n-  static Future<ImageResponse> getImageInformation(\r\n+  static Future<List<ImageResponse>> getImageInformation(\r\n     String gtin, {\r\n     required int page,\r\n     required int limit,\r\n   }) async {\r\n"
                },
                {
                    "date": 1750921652472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,18 +173,18 @@\n     final leafletResponse = LeafletResponse.fromJson(response.data);\r\n     return leafletResponse;\r\n   }\r\n \r\n-  static Future<List<ImageResponse>> getImageInformation(\r\n+  static Future<List<ImageModel>> getImageInformation(\r\n     String gtin, {\r\n     required int page,\r\n     required int limit,\r\n   }) async {\r\n     final response = await upcHubService.request(\r\n         \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n \r\n     if (response.success) {\r\n-      return ImageResponse.fromJson(response.data);\r\n+      return ImageModel.fromJson(response.data);\r\n     } else {\r\n       throw Exception(response.data['error'] ??\r\n           response.data['message'] ??\r\n           'Failed to load images');\r\n"
                },
                {
                    "date": 1750921726151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,15 +181,10 @@\n   }) async {\r\n     final response = await upcHubService.request(\r\n         \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n \r\n-    if (response.success) {\r\n-      return ImageModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load images');\r\n-    }\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => ImageModel.fromJson(e)).toList();\r\n   }\r\n \r\n   static Future<InstructionResponse> getInstructionInformation(\r\n     String gtin, {\r\n"
                },
                {
                    "date": 1750921783633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,10 +178,10 @@\n     String gtin, {\r\n     required int page,\r\n     required int limit,\r\n   }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+    final response = await upcHubService\r\n+        .request(\"/api/digitalLinks/images?barcode=$gtin&page=1&pageSize=10\");\r\n \r\n     final data = response.data['data'] as List;\r\n     return data.map((e) => ImageModel.fromJson(e)).toList();\r\n   }\r\n"
                },
                {
                    "date": 1750921790771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,13 +173,9 @@\n     final leafletResponse = LeafletResponse.fromJson(response.data);\r\n     return leafletResponse;\r\n   }\r\n \r\n-  static Future<List<ImageModel>> getImageInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n+  static Future<List<ImageModel>> getImageInformation(String gtin) async {\r\n     final response = await upcHubService\r\n         .request(\"/api/digitalLinks/images?barcode=$gtin&page=1&pageSize=10\");\r\n \r\n     final data = response.data['data'] as List;\r\n"
                },
                {
                    "date": 1750921799752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,318 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n+import 'package:gtrack_nartec/constants/app_urls.dart';\r\n+import 'package:gtrack_nartec/global/services/http_service.dart';\r\n+import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+class GTINController {\r\n+  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n+  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n+  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n+  static final HttpService gtrackBackendOnline =\r\n+      HttpService(baseUrl: AppUrls.gtrack);\r\n+\r\n+  // static Future<List<GTIN_Model>> getProducts() async {\r\n+  //   final userId = await AppPreferences.getUserId();\r\n+\r\n+  //   String url = \"api/products?user_id=$userId\";\r\n+\r\n+  //   final response = await httpService.request(url);\r\n+\r\n+  //   var data = response.body as List;\r\n+\r\n+  //   if (response.success) {\r\n+  //     List<GTIN_Model> products =\r\n+  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n+\r\n+  //     return products;\r\n+  //   } else {\r\n+  //     return [];\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future<void> deleteProductById(String productId) async {\r\n+    final token = await AppPreferences.getToken();\r\n+    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n+    final response = await http.delete(\r\n+      Uri.parse(url),\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'authorization': \"Bearer $token\",\r\n+      },\r\n+    );\r\n+    if (response.statusCode == 200 || response.statusCode == 201) {\r\n+      return;\r\n+    } else {\r\n+      throw Exception('Failed to delete product');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n+    required int page,\r\n+    required int pageSize,\r\n+    String? searchQuery,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+\r\n+    String url = '/api/products/';\r\n+\r\n+    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n+      url +=\r\n+          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n+    } else {\r\n+      url +=\r\n+          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n+    }\r\n+\r\n+    final response = await gtrackService.request(url);\r\n+\r\n+    if (response.success) {\r\n+      return PaginatedGTINResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to load paginated products');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<AllergenModel>> getAllergenInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = response.data['ingredients'] as List;\r\n+      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load allergens');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<IngredientResponse> getIngredientInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n+    return ingredientResponse;\r\n+  }\r\n+\r\n+  static Future<List<PackagingModel>> getPackagingInformation(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['packagings'] as List;\r\n+    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n+      String gtin) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data['promotionalOffers'] as List;\r\n+    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<List<RecipeModel>> getRecipeInformation(String gtin) async {\r\n+    final response = await gtrackBackendOnline.request(\r\n+      '/api/getRecipeDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final data = response.data as List;\r\n+    return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<LeafletResponse> getLeafletInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await gtrackService.request(\r\n+      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n+    return leafletResponse;\r\n+  }\r\n+\r\n+  static Future<List<ImageModel>> getImageInformation(String gtin) async {\r\n+    final response = await upcHubService\r\n+        .request(\"/api/digitalLinks/images?barcode=$gtin&page=1&pageSize=10\");\r\n+\r\n+    final data = response.data['data'] as List;\r\n+    return data.map((e) => ImageModel.fromJson(e)).toList();\r\n+  }\r\n+\r\n+  static Future<InstructionResponse> getInstructionInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n+\r\n+    if (response.success) {\r\n+      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n+    } else {\r\n+      throw Exception('Failed to load instructions');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<VideoResponse> getVideoInformation(\r\n+    String gtin, {\r\n+    required int page,\r\n+    required int limit,\r\n+  }) async {\r\n+    final response = await upcHubService.request(\r\n+      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return VideoResponse.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception(response.data['error'] ??\r\n+          response.data['message'] ??\r\n+          'Failed to load videos');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n+    String gtin, {\r\n+    int page = 1,\r\n+    int limit = 20,\r\n+  }) async {\r\n+    try {\r\n+      final responses = await Future.wait([\r\n+        getAllergenInformation(gtin),\r\n+        getRetailerInformation(gtin),\r\n+        getIngredientInformation(gtin, page: page, limit: limit),\r\n+        getPackagingInformation(gtin),\r\n+        getPromotionalOffers(gtin),\r\n+        getRecipeInformation(gtin),\r\n+        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getImageInformation(gtin),\r\n+        getInstructionInformation(gtin, page: page, limit: limit),\r\n+        getVideoInformation(gtin, page: page, limit: limit),\r\n+      ]);\r\n+\r\n+      return {\r\n+        'allergens': responses[0],\r\n+        'retailers': responses[1],\r\n+        'ingredients': responses[2],\r\n+        'packagings': responses[3],\r\n+        'promotions': responses[4],\r\n+        'recipes': responses[5],\r\n+        'leaflets': responses[6],\r\n+        'images': responses[7],\r\n+        'instructions': responses[8],\r\n+        'videos': responses[9],\r\n+      };\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch digital link data: $e');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n+    final response =\r\n+        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n+\r\n+    if (response.success) {\r\n+      return (response.data as List)\r\n+          .map((e) => ReviewModel.fromJson(e))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load reviews');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<ReviewModel> postReview({\r\n+    required String barcode,\r\n+    required int rating,\r\n+    required String comment,\r\n+    required String productDescription,\r\n+    required String brandName,\r\n+  }) async {\r\n+    final userId = await AppPreferences.getMemberId();\r\n+    String deviceIp = await getLocalIP();\r\n+\r\n+    final response = await upcHubService.request(\r\n+      '/api/productReview',\r\n+      method: HttpMethod.post,\r\n+      payload: {\r\n+        \"LocationIP\": deviceIp,\r\n+        \"SenderId\": userId,\r\n+        \"rating\": rating,\r\n+        \"Comments\": comment,\r\n+        \"ProductId\": barcode,\r\n+        \"ProductDescription\": productDescription,\r\n+        \"BrandName\": brandName,\r\n+        \"GTIN\": barcode,\r\n+        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n+      },\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      return ReviewModel.fromJson(response.data);\r\n+    } else {\r\n+      throw Exception('Failed to submit review');\r\n+    }\r\n+  }\r\n+\r\n+  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n+      String barcode) async {\r\n+    final response = await upcHubService.request(\r\n+      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n+      method: HttpMethod.get,\r\n+    );\r\n+\r\n+    if (response.success) {\r\n+      final data = json.decode(response.body);\r\n+      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n+      return nutritionFactsJson\r\n+          .map((json) => NutritionFactsModel.fromJson(json))\r\n+          .toList();\r\n+    } else {\r\n+      throw Exception('Failed to load nutrition facts');\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750922082260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,322 +315,4 @@\n       throw Exception('Failed to load nutrition facts');\r\n     }\r\n   }\r\n }\r\n-import 'dart:convert';\r\n-\r\n-import 'package:gtrack_nartec/constants/app_preferences.dart';\r\n-import 'package:gtrack_nartec/constants/app_urls.dart';\r\n-import 'package:gtrack_nartec/global/services/http_service.dart';\r\n-import 'package:gtrack_nartec/global/utils/device_ip.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-class GTINController {\r\n-  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n-  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n-  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n-  static final HttpService gtrackBackendOnline =\r\n-      HttpService(baseUrl: AppUrls.gtrack);\r\n-\r\n-  // static Future<List<GTIN_Model>> getProducts() async {\r\n-  //   final userId = await AppPreferences.getUserId();\r\n-\r\n-  //   String url = \"api/products?user_id=$userId\";\r\n-\r\n-  //   final response = await httpService.request(url);\r\n-\r\n-  //   var data = response.body as List;\r\n-\r\n-  //   if (response.success) {\r\n-  //     List<GTIN_Model> products =\r\n-  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n-\r\n-  //     return products;\r\n-  //   } else {\r\n-  //     return [];\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future<void> deleteProductById(String productId) async {\r\n-    final token = await AppPreferences.getToken();\r\n-    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n-    final response = await http.delete(\r\n-      Uri.parse(url),\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'authorization': \"Bearer $token\",\r\n-      },\r\n-    );\r\n-    if (response.statusCode == 200 || response.statusCode == 201) {\r\n-      return;\r\n-    } else {\r\n-      throw Exception('Failed to delete product');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n-    required int page,\r\n-    required int pageSize,\r\n-    String? searchQuery,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-\r\n-    String url = '/api/products/';\r\n-\r\n-    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n-      url +=\r\n-          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n-    } else {\r\n-      url +=\r\n-          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n-    }\r\n-\r\n-    final response = await gtrackService.request(url);\r\n-\r\n-    if (response.success) {\r\n-      return PaginatedGTINResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to load paginated products');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<AllergenModel>> getAllergenInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = response.data['ingredients'] as List;\r\n-      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load allergens');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<RetailerModel>> getRetailerInformation(String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/retailers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => RetailerModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<IngredientResponse> getIngredientInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n-    return ingredientResponse;\r\n-  }\r\n-\r\n-  static Future<List<PackagingModel>> getPackagingInformation(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/packagings?barcode=$gtin&page=1&pageSize=100',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['packagings'] as List;\r\n-    return data.map((e) => PackagingModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<PromotionalOfferModel>> getPromotionalOffers(\r\n-      String gtin) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/promotionalOffers?page=1&pageSize=100&barcode=$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data['promotionalOffers'] as List;\r\n-    return data.map((e) => PromotionalOfferModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<List<RecipeModel>> getRecipeInformation(String gtin) async {\r\n-    final response = await gtrackBackendOnline.request(\r\n-      '/api/getRecipeDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final data = response.data as List;\r\n-    return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await gtrackService.request(\r\n-      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n-  }\r\n-\r\n-  static Future<List<ImageModel>> getImageInformation(String gtin) async {\r\n-    final response = await upcHubService\r\n-        .request(\"/api/digitalLinks/images?barcode=$gtin&page=1&pageSize=10\");\r\n-\r\n-    final data = response.data['data'] as List;\r\n-    return data.map((e) => ImageModel.fromJson(e)).toList();\r\n-  }\r\n-\r\n-  static Future<InstructionResponse> getInstructionInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n-\r\n-    if (response.success) {\r\n-      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n-    } else {\r\n-      throw Exception('Failed to load instructions');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<VideoResponse> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n-    final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n-    String gtin, {\r\n-    int page = 1,\r\n-    int limit = 20,\r\n-  }) async {\r\n-    try {\r\n-      final responses = await Future.wait([\r\n-        getAllergenInformation(gtin),\r\n-        getRetailerInformation(gtin),\r\n-        getIngredientInformation(gtin, page: page, limit: limit),\r\n-        getPackagingInformation(gtin),\r\n-        getPromotionalOffers(gtin),\r\n-        getRecipeInformation(gtin),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n-        getImageInformation(gtin, page: page, limit: limit),\r\n-        getInstructionInformation(gtin, page: page, limit: limit),\r\n-        getVideoInformation(gtin, page: page, limit: limit),\r\n-      ]);\r\n-\r\n-      return {\r\n-        'allergens': responses[0],\r\n-        'retailers': responses[1],\r\n-        'ingredients': responses[2],\r\n-        'packagings': responses[3],\r\n-        'promotions': responses[4],\r\n-        'recipes': responses[5],\r\n-        'leaflets': responses[6],\r\n-        'images': responses[7],\r\n-        'instructions': responses[8],\r\n-        'videos': responses[9],\r\n-      };\r\n-    } catch (e) {\r\n-      throw Exception('Failed to fetch digital link data: $e');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n-    final response =\r\n-        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n-\r\n-    if (response.success) {\r\n-      return (response.data as List)\r\n-          .map((e) => ReviewModel.fromJson(e))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load reviews');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<ReviewModel> postReview({\r\n-    required String barcode,\r\n-    required int rating,\r\n-    required String comment,\r\n-    required String productDescription,\r\n-    required String brandName,\r\n-  }) async {\r\n-    final userId = await AppPreferences.getMemberId();\r\n-    String deviceIp = await getLocalIP();\r\n-\r\n-    final response = await upcHubService.request(\r\n-      '/api/productReview',\r\n-      method: HttpMethod.post,\r\n-      payload: {\r\n-        \"LocationIP\": deviceIp,\r\n-        \"SenderId\": userId,\r\n-        \"rating\": rating,\r\n-        \"Comments\": comment,\r\n-        \"ProductId\": barcode,\r\n-        \"ProductDescription\": productDescription,\r\n-        \"BrandName\": brandName,\r\n-        \"GTIN\": barcode,\r\n-        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n-      },\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      return ReviewModel.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception('Failed to submit review');\r\n-    }\r\n-  }\r\n-\r\n-  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n-      String barcode) async {\r\n-    final response = await upcHubService.request(\r\n-      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n-      method: HttpMethod.get,\r\n-    );\r\n-\r\n-    if (response.success) {\r\n-      final data = json.decode(response.body);\r\n-      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n-      return nutritionFactsJson\r\n-          .map((json) => NutritionFactsModel.fromJson(json))\r\n-          .toList();\r\n-    } else {\r\n-      throw Exception('Failed to load nutrition facts');\r\n-    }\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1750924754149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n     final data = response.data as List;\r\n     return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n   }\r\n \r\n-  static Future<LeafletResponse> getLeafletInformation(\r\n+  static Future<List<LeafletModel>> getLeafletInformation(\r\n     String gtin, {\r\n     required int page,\r\n     required int limit,\r\n   }) async {\r\n"
                },
                {
                    "date": 1750924766224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,10 +169,13 @@\n       '/api/getProductLeafLetsDataByGtin/$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n \r\n-    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n-    return leafletResponse;\r\n+    final data = response.data as List;\r\n+    if (data.isEmpty) {\r\n+      return [];\r\n+    }\r\n+    return data.map((e) => LeafletModel.fromJson(e)).toList();\r\n   }\r\n \r\n   static Future<List<ImageModel>> getImageInformation(String gtin) async {\r\n     final response = await upcHubService\r\n"
                },
                {
                    "date": 1750924771352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,12 +160,9 @@\n     return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n   }\r\n \r\n   static Future<List<LeafletModel>> getLeafletInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n+    String gtin) async {\r\n     final response = await gtrackService.request(\r\n       '/api/getProductLeafLetsDataByGtin/$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n"
                },
                {
                    "date": 1750924795392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,10 +159,9 @@\n     final data = response.data as List;\r\n     return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n   }\r\n \r\n-  static Future<List<LeafletModel>> getLeafletInformation(\r\n-    String gtin) async {\r\n+  static Future<List<LeafletModel>> getLeafletInformation(String gtin) async {\r\n     final response = await gtrackService.request(\r\n       '/api/getProductLeafLetsDataByGtin/$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n"
                },
                {
                    "date": 1750924801479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n     return data.map((e) => RecipeModel.fromJson(e)).toList();\r\n   }\r\n \r\n   static Future<List<LeafletModel>> getLeafletInformation(String gtin) async {\r\n-    final response = await gtrackService.request(\r\n+    final response = await gtrackBackendOnline.request(\r\n       '/api/getProductLeafLetsDataByGtin/$gtin',\r\n       method: HttpMethod.get,\r\n     );\r\n \r\n"
                },
                {
                    "date": 1750924904779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,9 @@\n         getIngredientInformation(gtin, page: page, limit: limit),\r\n         getPackagingInformation(gtin),\r\n         getPromotionalOffers(gtin),\r\n         getRecipeInformation(gtin),\r\n-        getLeafletInformation(gtin, page: page, limit: limit),\r\n+        getLeafletInformation(gtin),\r\n         getImageInformation(gtin),\r\n         getInstructionInformation(gtin, page: page, limit: limit),\r\n         getVideoInformation(gtin, page: page, limit: limit),\r\n       ]);\r\n"
                },
                {
                    "date": 1750927551707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,9 @@\n       throw Exception('Failed to load instructions');\r\n     }\r\n   }\r\n \r\n-  static Future<VideoResponse> getVideoInformation(\r\n+  static Future<List<VideoModel>> getVideoInformation(\r\n     String gtin, {\r\n     required int page,\r\n     required int limit,\r\n   }) async {\r\n"
                },
                {
                    "date": 1750927567872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,15 +205,9 @@\n       \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n       method: HttpMethod.get,\r\n     );\r\n \r\n-    if (response.success) {\r\n-      return VideoResponse.fromJson(response.data);\r\n-    } else {\r\n-      throw Exception(response.data['error'] ??\r\n-          response.data['message'] ??\r\n-          'Failed to load videos');\r\n-    }\r\n+    final data = response.data['videos'] as List;\r\n   }\r\n \r\n   static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n     String gtin, {\r\n"
                },
                {
                    "date": 1750927576242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,9 +205,10 @@\n       \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n       method: HttpMethod.get,\r\n     );\r\n \r\n-    final data = response.data['videos'] as List;\r\n+    final data = response.data['data'] as List; \r\n+    return data.map((e) => VideoModel.fromJson(e)).toList();\r\n   }\r\n \r\n   static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n     String gtin, {\r\n"
                },
                {
                    "date": 1750927632811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n   }\r\n \r\n   static Future<List<ImageModel>> getImageInformation(String gtin) async {\r\n     final response = await upcHubService\r\n-        .request(\"/api/digitalLinks/images?barcode=$gtin&page=1&pageSize=10\");\r\n+        .request(\"/api/digitalLinks/images?barcode=$gtin&page=1&pageSize=100\");\r\n \r\n     final data = response.data['data'] as List;\r\n     return data.map((e) => ImageModel.fromJson(e)).toList();\r\n   }\r\n@@ -201,9 +201,9 @@\n     required int page,\r\n     required int limit,\r\n   }) async {\r\n     final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n+      \"/api/digitalLinks/videos?page=1&pageSize=10&barcode=6285561000957\",\r\n       method: HttpMethod.get,\r\n     );\r\n \r\n     final data = response.data['data'] as List;\r\n"
                },
                {
                    "date": 1750927655439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,14 +196,11 @@\n     }\r\n   }\r\n \r\n   static Future<List<VideoModel>> getVideoInformation(\r\n-    String gtin, {\r\n-    required int page,\r\n-    required int limit,\r\n-  }) async {\r\n+    String gtin) async {\r\n     final response = await upcHubService.request(\r\n-      \"/api/digitalLinks/videos?page=1&pageSize=10&barcode=6285561000957\",\r\n+      \"/api/digitalLinks/videos?page=1&pageSize=100&barcode=$gtin\",\r\n       method: HttpMethod.get,\r\n     );\r\n \r\n     final data = response.data['data'] as List;\r\n"
                }
            ],
            "date": 1750754131897,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\n\r\nimport 'package:gtrack_nartec/constants/app_preferences.dart';\r\nimport 'package:gtrack_nartec/constants/app_urls.dart';\r\nimport 'package:gtrack_nartec/global/services/http_service.dart';\r\nimport 'package:gtrack_nartec/global/utils/device_ip.dart';\r\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\r\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\r\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\r\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\r\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\r\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\r\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\r\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\r\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\r\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\r\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\r\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\r\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\r\nimport 'package:http/http.dart' as http;\r\n\r\nclass GTINController {\r\n  static final HttpService httpService = HttpService(baseUrl: AppUrls.gs1Url);\r\n  static final HttpService gtrackService = HttpService(baseUrl: AppUrls.gtrack);\r\n  static final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\r\n\r\n  // static Future<List<GTIN_Model>> getProducts() async {\r\n  //   final userId = await AppPreferences.getUserId();\r\n\r\n  //   String url = \"api/products?user_id=$userId\";\r\n\r\n  //   final response = await httpService.request(url);\r\n\r\n  //   var data = response.body as List;\r\n\r\n  //   if (response.success) {\r\n  //     List<GTIN_Model> products =\r\n  //         data.map((e) => GTIN_Model.fromJson(e)).toList();\r\n\r\n  //     return products;\r\n  //   } else {\r\n  //     return [];\r\n  //   }\r\n  // }\r\n\r\n  static Future<void> deleteProductById(String productId) async {\r\n    final token = await AppPreferences.getToken();\r\n    String url = \"${AppUrls.baseUrlWith3093}api/products/gtin/$productId\";\r\n    final response = await http.delete(\r\n      Uri.parse(url),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'authorization': \"Bearer $token\",\r\n      },\r\n    );\r\n    if (response.statusCode == 200 || response.statusCode == 201) {\r\n      return;\r\n    } else {\r\n      throw Exception('Failed to delete product');\r\n    }\r\n  }\r\n\r\n  static Future<PaginatedGTINResponse> getPaginatedProducts({\r\n    required int page,\r\n    required int pageSize,\r\n    String? searchQuery,\r\n  }) async {\r\n    final userId = await AppPreferences.getMemberId();\r\n\r\n    String url = '/api/products/';\r\n\r\n    if (searchQuery != null && searchQuery.isNotEmpty) {\r\n      url +=\r\n          \"searchProductsBySelectedFields?searchText=$searchQuery&page=$page&limit=$pageSize\";\r\n    } else {\r\n      url +=\r\n          \"paginatedProducts?page=$page&pageSize=$pageSize&member_id=$userId\";\r\n    }\r\n\r\n    final response = await gtrackService.request(url);\r\n\r\n    if (response.success) {\r\n      return PaginatedGTINResponse.fromJson(response.data);\r\n    } else {\r\n      throw Exception('Failed to load paginated products');\r\n    }\r\n  }\r\n\r\n  static Future<List<AllergenModel>> getAllergenInformation(\r\n    String gtin, {\r\n    int page = 1,\r\n    int limit = 100,\r\n  }) async {\r\n    final response = await upcHubService.request(\r\n      '/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit',\r\n      method: HttpMethod.get,\r\n    );\r\n\r\n    print(\r\n        \"Url: ${AppUrls.upcHub}/api/digitalLinks/ingredients?barcode=$gtin&page=$page&pageSize=$limit\");\r\n\r\n    if (response.success) {\r\n      final data = response.data['ingredients'] as List;\r\n      return data.map((e) => AllergenModel.fromJson(e)).toList();\r\n    } else {\r\n      throw Exception(response.data['error'] ??\r\n          response.data['message'] ??\r\n          'Failed to load allergens');\r\n    }\r\n  }\r\n\r\n  static Future<RetailerModel> getRetailerInformation(\r\n    String gtin, {\r\n    required int page,\r\n    required int limit,\r\n  }) async {\r\n    final response = await upcHubService.request(\r\n      '/api/digitalLinks/retailers?page=$page&pageSize=$limit&barcode=$gtin',\r\n      method: HttpMethod.get,\r\n    );\r\n\r\n    final retailerResponse = RetailerModel.fromJson(response.data);\r\n    return retailerResponse;\r\n  }\r\n\r\n  static Future<IngredientResponse> getIngredientInformation(\r\n    String gtin, {\r\n    required int page,\r\n    required int limit,\r\n  }) async {\r\n    final response = await upcHubService.request(\r\n      '/api/digitalLinks/ingredients?page=$page&pageSize=$limit&barcode=$gtin',\r\n      method: HttpMethod.get,\r\n    );\r\n\r\n    final ingredientResponse = IngredientResponse.fromJson(response.data);\r\n    return ingredientResponse;\r\n  }\r\n\r\n  static Future<PackagingResponse> getPackagingInformation(\r\n    String gtin, {\r\n    required int page,\r\n    required int limit,\r\n  }) async {\r\n    final response = await upcHubService.request(\r\n      '/api/digitalLinks/packagings?page=$page&pageSize=$limit&barcode=$gtin',\r\n      method: HttpMethod.get,\r\n    );\r\n\r\n    final packagingResponse = PackagingResponse.fromJson(response.data);\r\n    return packagingResponse;\r\n  }\r\n\r\n  static Future<PromotionalOfferResponse> getPromotionalOffers(\r\n    String gtin, {\r\n    required int page,\r\n    required int limit,\r\n  }) async {\r\n    final response = await gtrackService.request(\r\n      '/api/getPromotionalOffersByGtin/$gtin',\r\n      method: HttpMethod.get,\r\n    );\r\n\r\n    final promotionalResponse =\r\n        PromotionalOfferResponse.fromJson(response.data);\r\n    return promotionalResponse;\r\n  }\r\n\r\n  static Future<RecipeResponse> getRecipeInformation(\r\n    String gtin, {\r\n    required int page,\r\n    required int limit,\r\n  }) async {\r\n    final response = await gtrackService.request(\r\n      '/api/getRecipeDataByGtin/$gtin',\r\n      method: HttpMethod.get,\r\n    );\r\n\r\n    final recipeResponse = RecipeResponse.fromJson(response.data);\r\n    return recipeResponse;\r\n  }\r\n\r\n  static Future<LeafletResponse> getLeafletInformation(\r\n    String gtin, {\r\n    required int page,\r\n    required int limit,\r\n  }) async {\r\n    final response = await gtrackService.request(\r\n      '/api/getProductLeafLetsDataByGtin/$gtin',\r\n      method: HttpMethod.get,\r\n    );\r\n\r\n    final leafletResponse = LeafletResponse.fromJson(response.data);\r\n    return leafletResponse;\r\n  }\r\n\r\n  static Future<ImageResponse> getImageInformation(\r\n    String gtin, {\r\n    required int page,\r\n    required int limit,\r\n  }) async {\r\n    final response = await upcHubService.request(\r\n        \"/api/digitalLinks/images?page=$page&pageSize=$limit&barcode=$gtin\");\r\n\r\n    if (response.success) {\r\n      return ImageResponse.fromJson(response.data);\r\n    } else {\r\n      throw Exception(response.data['error'] ??\r\n          response.data['message'] ??\r\n          'Failed to load images');\r\n    }\r\n  }\r\n\r\n  static Future<InstructionResponse> getInstructionInformation(\r\n    String gtin, {\r\n    required int page,\r\n    required int limit,\r\n  }) async {\r\n    final response = await upcHubService.request(\r\n        \"/api/digitalLinks/instructions?page=$page&pageSize=$limit&barcode=$gtin\");\r\n\r\n    if (response.success) {\r\n      return InstructionResponse.fromJson(jsonDecode(response.body));\r\n    } else {\r\n      throw Exception('Failed to load instructions');\r\n    }\r\n  }\r\n\r\n  static Future<VideoResponse> getVideoInformation(\r\n    String gtin, {\r\n    required int page,\r\n    required int limit,\r\n  }) async {\r\n    final response = await upcHubService.request(\r\n      \"/api/digitalLinks/videos?page=$page&pageSize=$limit&barcode=$gtin\",\r\n      method: HttpMethod.get,\r\n    );\r\n\r\n    if (response.success) {\r\n      return VideoResponse.fromJson(response.data);\r\n    } else {\r\n      throw Exception(response.data['error'] ??\r\n          response.data['message'] ??\r\n          'Failed to load videos');\r\n    }\r\n  }\r\n\r\n  static Future<Map<String, dynamic>> getDigitalLinkViewData(\r\n    String gtin, {\r\n    int page = 1,\r\n    int limit = 20,\r\n  }) async {\r\n    try {\r\n      final responses = await Future.wait([\r\n        getAllergenInformation(gtin, page: page, limit: limit),\r\n        getRetailerInformation(gtin, page: page, limit: limit),\r\n        getIngredientInformation(gtin, page: page, limit: limit),\r\n        getPackagingInformation(gtin, page: page, limit: limit),\r\n        getPromotionalOffers(gtin, page: page, limit: limit),\r\n        getRecipeInformation(gtin, page: page, limit: limit),\r\n        getLeafletInformation(gtin, page: page, limit: limit),\r\n        getImageInformation(gtin, page: page, limit: limit),\r\n        getInstructionInformation(gtin, page: page, limit: limit),\r\n        getVideoInformation(gtin, page: page, limit: limit),\r\n      ]);\r\n\r\n      return {\r\n        'allergens': responses[0],\r\n        'retailers': responses[1],\r\n        'ingredients': responses[2],\r\n        'packagings': responses[3],\r\n        'promotions': responses[4],\r\n        'recipes': responses[5],\r\n        'leaflets': responses[6],\r\n        'images': responses[7],\r\n        'instructions': responses[8],\r\n        'videos': responses[9],\r\n      };\r\n    } catch (e) {\r\n      throw Exception('Failed to fetch digital link data: $e');\r\n    }\r\n  }\r\n\r\n  static Future<List<ReviewModel>> getReviews(String gtin) async {\r\n    final response =\r\n        await upcHubService.request('/api/productReview?ProductId=$gtin');\r\n\r\n    if (response.success) {\r\n      return (response.data as List)\r\n          .map((e) => ReviewModel.fromJson(e))\r\n          .toList();\r\n    } else {\r\n      throw Exception('Failed to load reviews');\r\n    }\r\n  }\r\n\r\n  static Future<ReviewModel> postReview({\r\n    required String barcode,\r\n    required int rating,\r\n    required String comment,\r\n    required String productDescription,\r\n    required String brandName,\r\n  }) async {\r\n    final userId = await AppPreferences.getMemberId();\r\n    String deviceIp = await getLocalIP();\r\n\r\n    final response = await upcHubService.request(\r\n      '/api/productReview',\r\n      method: HttpMethod.post,\r\n      payload: {\r\n        \"LocationIP\": deviceIp,\r\n        \"SenderId\": userId,\r\n        \"rating\": rating,\r\n        \"Comments\": comment,\r\n        \"ProductId\": barcode,\r\n        \"ProductDescription\": productDescription,\r\n        \"BrandName\": brandName,\r\n        \"GTIN\": barcode,\r\n        \"gcpGLNID\": barcode.substring(0, 7), // Taking first 7 chars as GCP\r\n      },\r\n    );\r\n\r\n    if (response.success) {\r\n      return ReviewModel.fromJson(response.data);\r\n    } else {\r\n      throw Exception('Failed to submit review');\r\n    }\r\n  }\r\n\r\n  static Future<List<NutritionFactsModel>> fetchNutritionFacts(\r\n      String barcode) async {\r\n    final response = await upcHubService.request(\r\n      '/api/digitalLinks/nutritionFacts?barcode=$barcode',\r\n      method: HttpMethod.get,\r\n    );\r\n\r\n    if (response.success) {\r\n      final data = json.decode(response.body);\r\n      final List<dynamic> nutritionFactsJson = data['nutritionFacts'];\r\n      return nutritionFactsJson\r\n          .map((json) => NutritionFactsModel.fromJson(json))\r\n          .toList();\r\n    } else {\r\n      throw Exception('Failed to load nutrition facts');\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}