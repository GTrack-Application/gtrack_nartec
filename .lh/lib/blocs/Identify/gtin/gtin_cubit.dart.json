{
    "sourceFile": "lib/blocs/Identify/gtin/gtin_cubit.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 62,
            "patches": [
                {
                    "date": 1750754028410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750754065336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,20 +310,17 @@\n       emit(GtinReviewErrorState(message: e.toString()));\n     }\n   }\n \n-  Future<void> get() async {\n-    if (_hasMoreData) {\n-      _currentAllergenPage++;\n-      try {\n-        final newAllergens = await GTINController.getPaginatedAllergens(\n-          page: _currentAllergenPage,\n-          pageSize: _allergenPageSize,\n-        );\n-        _allergens.addAll(newAllergens);\n-        emit(GetAllergenInformationLoaded(_allergens));\n-      } catch (e) {\n-        emit(GetAllergenInformationError(e.toString()));\n-      }\n+  Future<void> getRetailersInformation() async {\n+    try {\n+      final newAllergens = await GTINController.getPaginatedAllergens(\n+        page: _currentAllergenPage,\n+        pageSize: _allergenPageSize,\n+      );\n+      _allergens.addAll(newAllergens);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n     }\n   }\n }\n"
                },
                {
                    "date": 1750754249401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,14 +310,11 @@\n       emit(GtinReviewErrorState(message: e.toString()));\n     }\n   }\n \n-  Future<void> getRetailersInformation() async {\n+  Future<void> getRetailersInformation(String gtin) async {\n     try {\n-      final newAllergens = await GTINController.getPaginatedAllergens(\n-        page: _currentAllergenPage,\n-        pageSize: _allergenPageSize,\n-      );\n+      final newAllergens = await GTINController.getRetailerInformation(gtin);\n       _allergens.addAll(newAllergens);\n       emit(GetAllergenInformationLoaded(_allergens));\n     } catch (e) {\n       emit(GetAllergenInformationError(e.toString()));\n"
                },
                {
                    "date": 1750754277620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,11 +312,11 @@\n   }\n \n   Future<void> getRetailersInformation(String gtin) async {\n     try {\n-      final newAllergens = await GTINController.getRetailerInformation(gtin);\n-      _allergens.addAll(newAllergens);\n-      emit(GetAllergenInformationLoaded(_allergens));\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n     } catch (e) {\n       emit(GetAllergenInformationError(e.toString()));\n     }\n   }\n"
                },
                {
                    "date": 1750754320143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,11 +40,8 @@\n   int _currentAllergenPage = 1;\n   static const int _allergenPageSize = 20;\n \n   List<RetailerModel> _retailers = [];\n-  bool _hasMoreRetailers = true;\n-  int _currentRetailerPage = 1;\n-  static const int _retailerPageSize = 10;\n \n   List<IngredientModel> _ingredients = [];\n   bool _hasMoreIngredients = true;\n   int _currentIngredientPage = 1;\n"
                },
                {
                    "date": 1750754343025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,320 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  int _currentAllergenPage = 1;\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  int _currentIngredientPage = 1;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  bool _hasMorePackagings = true;\n+  int _currentPackagingPage = 1;\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  int _currentPromotionPage = 1;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  int _currentRecipePage = 1;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  int _currentLeafletPage = 1;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  int _currentImagePage = 1;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  int _currentInstructionPage = 1;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  int _currentVideoPage = 1;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        page: _currentVideoPage,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as RetailerModel;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as PackagingResponse;\n+      final promotionalResponse =\n+          response['promotions'] as PromotionalOfferResponse;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse.retailers;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse.packagings;\n+      _promotions = promotionalResponse.offers;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      _hasMoreRetailers =\n+          _currentRetailerPage < retailerResponse.pagination.totalPages;\n+      _hasMoreIngredients =\n+          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n+      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n+      _hasMorePromotions =\n+          _currentPromotionPage < promotionalResponse.totalPages;\n+      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n+      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n+      _hasMoreInstructions =\n+          _currentInstructionPage < instructionResponse.totalPages;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+      _videos = videoResponse.videos;\n+      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    print('HI');\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750754351663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n       );\n \n       // Fix: Handle allergens properly\n       final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as RetailerModel;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n       final ingredientResponse = response['ingredients'] as IngredientResponse;\n       final packagingResponse = response['packagings'] as PackagingResponse;\n       final promotionalResponse =\n           response['promotions'] as PromotionalOfferResponse;\n"
                },
                {
                    "date": 1750754366248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,320 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  int _currentAllergenPage = 1;\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  int _currentIngredientPage = 1;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  bool _hasMorePackagings = true;\n+  int _currentPackagingPage = 1;\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  int _currentPromotionPage = 1;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  int _currentRecipePage = 1;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  int _currentLeafletPage = 1;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  int _currentImagePage = 1;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  int _currentInstructionPage = 1;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  int _currentVideoPage = 1;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        page: _currentVideoPage,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as RetailerModel;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as PackagingResponse;\n+      final promotionalResponse =\n+          response['promotions'] as PromotionalOfferResponse;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse.retailers;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse.packagings;\n+      _promotions = promotionalResponse.offers;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      _hasMoreRetailers =\n+          _currentRetailerPage < retailerResponse.pagination.totalPages;\n+      _hasMoreIngredients =\n+          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n+      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n+      _hasMorePromotions =\n+          _currentPromotionPage < promotionalResponse.totalPages;\n+      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n+      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n+      _hasMoreInstructions =\n+          _currentInstructionPage < instructionResponse.totalPages;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+      _videos = videoResponse.videos;\n+      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    print('HI');\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750754411904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,8 @@\n           response['instructions'] as InstructionResponse;\n \n       // Fix: Assign allergens properly\n       _allergens = allergens;\n-      _retailers = retailerResponse.retailers;\n       _ingredients = ingredientResponse.ingredients;\n       _packagings = packagingResponse.packagings;\n       _promotions = promotionalResponse.offers;\n       _recipes = recipeResponse.recipes;\n@@ -317,644 +316,4 @@\n       emit(GetAllergenInformationError(e.toString()));\n     }\n   }\n }\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  int _currentAllergenPage = 1;\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  int _currentIngredientPage = 1;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  bool _hasMorePackagings = true;\n-  int _currentPackagingPage = 1;\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  int _currentPromotionPage = 1;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  int _currentRecipePage = 1;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  int _currentLeafletPage = 1;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  int _currentImagePage = 1;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  int _currentInstructionPage = 1;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  int _currentVideoPage = 1;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        page: _currentVideoPage,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as List<RetailerModel>;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as PackagingResponse;\n-      final promotionalResponse =\n-          response['promotions'] as PromotionalOfferResponse;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse.retailers;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse.packagings;\n-      _promotions = promotionalResponse.offers;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      _hasMoreRetailers =\n-          _currentRetailerPage < retailerResponse.pagination.totalPages;\n-      _hasMoreIngredients =\n-          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n-      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n-      _hasMorePromotions =\n-          _currentPromotionPage < promotionalResponse.totalPages;\n-      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n-      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n-      _hasMoreInstructions =\n-          _currentInstructionPage < instructionResponse.totalPages;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-      _videos = videoResponse.videos;\n-      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    print('HI');\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-}\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  int _currentAllergenPage = 1;\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  int _currentIngredientPage = 1;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  bool _hasMorePackagings = true;\n-  int _currentPackagingPage = 1;\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  int _currentPromotionPage = 1;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  int _currentRecipePage = 1;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  int _currentLeafletPage = 1;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  int _currentImagePage = 1;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  int _currentInstructionPage = 1;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  int _currentVideoPage = 1;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        page: _currentVideoPage,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['retailers'] as RetailerResponse;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as PackagingResponse;\n-      final promotionalResponse =\n-          response['promotions'] as PromotionalOfferResponse;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse.retailers;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse.packagings;\n-      _promotions = promotionalResponse.offers;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      _hasMoreRetailers =\n-          _currentRetailerPage < retailerResponse.pagination.totalPages;\n-      _hasMoreIngredients =\n-          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n-      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n-      _hasMorePromotions =\n-          _currentPromotionPage < promotionalResponse.totalPages;\n-      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n-      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n-      _hasMoreInstructions =\n-          _currentInstructionPage < instructionResponse.totalPages;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-      _videos = videoResponse.videos;\n-      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    print('HI');\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-}\n"
                },
                {
                    "date": 1750754436894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,320 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  int _currentAllergenPage = 1;\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  int _currentIngredientPage = 1;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  bool _hasMorePackagings = true;\n+  int _currentPackagingPage = 1;\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  int _currentPromotionPage = 1;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  int _currentRecipePage = 1;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  int _currentLeafletPage = 1;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  int _currentImagePage = 1;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  int _currentInstructionPage = 1;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  int _currentVideoPage = 1;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        page: _currentVideoPage,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as RetailerModel;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as PackagingResponse;\n+      final promotionalResponse =\n+          response['promotions'] as PromotionalOfferResponse;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailers;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse.packagings;\n+      _promotions = promotionalResponse.offers;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      _hasMoreRetailers =\n+          _currentRetailerPage < retailerResponse.pagination.totalPages;\n+      _hasMoreIngredients =\n+          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n+      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n+      _hasMorePromotions =\n+          _currentPromotionPage < promotionalResponse.totalPages;\n+      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n+      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n+      _hasMoreInstructions =\n+          _currentInstructionPage < instructionResponse.totalPages;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+      _videos = videoResponse.videos;\n+      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    print('HI');\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750754445434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,10 +208,8 @@\n       _recipes = recipeResponse.recipes;\n       _leaflets = leafletResponse.leaflets;\n       _instructions = instructionResponse.instructions;\n \n-      _hasMoreRetailers =\n-          _currentRetailerPage < retailerResponse.pagination.totalPages;\n       _hasMoreIngredients =\n           _currentIngredientPage < ingredientResponse.pagination.totalPages;\n       _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n       _hasMorePromotions =\n@@ -317,323 +315,4 @@\n       emit(GetAllergenInformationError(e.toString()));\n     }\n   }\n }\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  int _currentAllergenPage = 1;\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  int _currentIngredientPage = 1;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  bool _hasMorePackagings = true;\n-  int _currentPackagingPage = 1;\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  int _currentPromotionPage = 1;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  int _currentRecipePage = 1;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  int _currentLeafletPage = 1;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  int _currentImagePage = 1;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  int _currentInstructionPage = 1;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  int _currentVideoPage = 1;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        page: _currentVideoPage,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as RetailerModel;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as PackagingResponse;\n-      final promotionalResponse =\n-          response['promotions'] as PromotionalOfferResponse;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse.packagings;\n-      _promotions = promotionalResponse.offers;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      _hasMoreRetailers =\n-          _currentRetailerPage < retailerResponse.pagination.totalPages;\n-      _hasMoreIngredients =\n-          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n-      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n-      _hasMorePromotions =\n-          _currentPromotionPage < promotionalResponse.totalPages;\n-      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n-      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n-      _hasMoreInstructions =\n-          _currentInstructionPage < instructionResponse.totalPages;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-      _videos = videoResponse.videos;\n-      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    print('HI');\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-}\n"
                },
                {
                    "date": 1750754457976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,15 +304,5 @@\n     } catch (e) {\n       emit(GtinReviewErrorState(message: e.toString()));\n     }\n   }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n }\n"
                },
                {
                    "date": 1750754470566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,5 +304,15 @@\n     } catch (e) {\n       emit(GtinReviewErrorState(message: e.toString()));\n     }\n   }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n }\n"
                },
                {
                    "date": 1750754503289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,8 +311,8 @@\n       final newRetailers = await GTINController.getRetailerInformation(gtin);\n       _retailers.addAll(newRetailers);\n       emit(GetRetailerInformationLoaded(_retailers));\n     } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n+      emit(GetRetailerInformationError(e.toString()));\n     }\n   }\n }\n"
                },
                {
                    "date": 1750754526476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,8 +307,9 @@\n   }\n \n   Future<void> getRetailersInformation(String gtin) async {\n     try {\n+      List<RetailerModel>\n       final newRetailers = await GTINController.getRetailerInformation(gtin);\n       _retailers.addAll(newRetailers);\n       emit(GetRetailerInformationLoaded(_retailers));\n     } catch (e) {\n"
                },
                {
                    "date": 1750754540019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,318 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  int _currentAllergenPage = 1;\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  int _currentIngredientPage = 1;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  bool _hasMorePackagings = true;\n+  int _currentPackagingPage = 1;\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  int _currentPromotionPage = 1;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  int _currentRecipePage = 1;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  int _currentLeafletPage = 1;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  int _currentImagePage = 1;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  int _currentInstructionPage = 1;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  int _currentVideoPage = 1;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        page: _currentVideoPage,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as RetailerModel;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as PackagingResponse;\n+      final promotionalResponse =\n+          response['promotions'] as PromotionalOfferResponse;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailers;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse.packagings;\n+      _promotions = promotionalResponse.offers;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      _hasMoreIngredients =\n+          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n+      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n+      _hasMorePromotions =\n+          _currentPromotionPage < promotionalResponse.totalPages;\n+      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n+      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n+      _hasMoreInstructions =\n+          _currentInstructionPage < instructionResponse.totalPages;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+      _videos = videoResponse.videos;\n+      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    print('HI');\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750754550505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,317 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  int _currentAllergenPage = 1;\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  int _currentIngredientPage = 1;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  bool _hasMorePackagings = true;\n+  int _currentPackagingPage = 1;\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  int _currentPromotionPage = 1;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  int _currentRecipePage = 1;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  int _currentLeafletPage = 1;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  int _currentImagePage = 1;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  int _currentInstructionPage = 1;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  int _currentVideoPage = 1;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        page: _currentVideoPage,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as RetailerModel;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as PackagingResponse;\n+      final promotionalResponse =\n+          response['promotions'] as PromotionalOfferResponse;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailers;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse.packagings;\n+      _promotions = promotionalResponse.offers;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      _hasMoreIngredients =\n+          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n+      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n+      _hasMorePromotions =\n+          _currentPromotionPage < promotionalResponse.totalPages;\n+      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n+      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n+      _hasMoreInstructions =\n+          _currentInstructionPage < instructionResponse.totalPages;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+      _videos = videoResponse.videos;\n+      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    print('HI');\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750754613066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,8 +308,9 @@\n \n   Future<void> getRetailersInformation(String gtin) async {\n     try {\n       final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n       emit(GetRetailerInformationLoaded(_retailers));\n     } catch (e) {\n       emit(GetRetailerInformationError(e.toString()));\n     }\n"
                },
                {
                    "date": 1750755028926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,318 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  int _currentAllergenPage = 1;\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  int _currentIngredientPage = 1;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  bool _hasMorePackagings = true;\n+  int _currentPackagingPage = 1;\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  int _currentPromotionPage = 1;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  int _currentRecipePage = 1;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  int _currentLeafletPage = 1;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  int _currentImagePage = 1;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  int _currentInstructionPage = 1;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  int _currentVideoPage = 1;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        page: _currentVideoPage,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as PackagingResponse;\n+      final promotionalResponse =\n+          response['promotions'] as PromotionalOfferResponse;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailers;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse.packagings;\n+      _promotions = promotionalResponse.offers;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      _hasMoreIngredients =\n+          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n+      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n+      _hasMorePromotions =\n+          _currentPromotionPage < promotionalResponse.totalPages;\n+      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n+      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n+      _hasMoreInstructions =\n+          _currentInstructionPage < instructionResponse.totalPages;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+      _videos = videoResponse.videos;\n+      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    print('HI');\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750755035621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,9 @@\n           response['instructions'] as InstructionResponse;\n \n       // Fix: Assign allergens properly\n       _allergens = allergens;\n-      _retailers = retailers;\n+      _retailers = retailerResponse;\n       _ingredients = ingredientResponse.ingredients;\n       _packagings = packagingResponse.packagings;\n       _promotions = promotionalResponse.offers;\n       _recipes = recipeResponse.recipes;\n"
                },
                {
                    "date": 1750762428763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,959 +315,4 @@\n       emit(GetRetailerInformationError(e.toString()));\n     }\n   }\n }\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  int _currentAllergenPage = 1;\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  int _currentIngredientPage = 1;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  bool _hasMorePackagings = true;\n-  int _currentPackagingPage = 1;\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  int _currentPromotionPage = 1;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  int _currentRecipePage = 1;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  int _currentLeafletPage = 1;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  int _currentImagePage = 1;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  int _currentInstructionPage = 1;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  int _currentVideoPage = 1;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        page: _currentVideoPage,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as RetailerModel;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as PackagingResponse;\n-      final promotionalResponse =\n-          response['promotions'] as PromotionalOfferResponse;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailers;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse.packagings;\n-      _promotions = promotionalResponse.offers;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      _hasMoreIngredients =\n-          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n-      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n-      _hasMorePromotions =\n-          _currentPromotionPage < promotionalResponse.totalPages;\n-      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n-      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n-      _hasMoreInstructions =\n-          _currentInstructionPage < instructionResponse.totalPages;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-      _videos = videoResponse.videos;\n-      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    print('HI');\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-}\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  int _currentAllergenPage = 1;\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  int _currentIngredientPage = 1;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  bool _hasMorePackagings = true;\n-  int _currentPackagingPage = 1;\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  int _currentPromotionPage = 1;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  int _currentRecipePage = 1;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  int _currentLeafletPage = 1;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  int _currentImagePage = 1;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  int _currentInstructionPage = 1;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  int _currentVideoPage = 1;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        page: _currentVideoPage,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as RetailerModel;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as PackagingResponse;\n-      final promotionalResponse =\n-          response['promotions'] as PromotionalOfferResponse;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailers;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse.packagings;\n-      _promotions = promotionalResponse.offers;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      _hasMoreIngredients =\n-          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n-      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n-      _hasMorePromotions =\n-          _currentPromotionPage < promotionalResponse.totalPages;\n-      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n-      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n-      _hasMoreInstructions =\n-          _currentInstructionPage < instructionResponse.totalPages;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-      _videos = videoResponse.videos;\n-      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    print('HI');\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-}\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  int _currentAllergenPage = 1;\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  int _currentIngredientPage = 1;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  bool _hasMorePackagings = true;\n-  int _currentPackagingPage = 1;\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  int _currentPromotionPage = 1;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  int _currentRecipePage = 1;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  int _currentLeafletPage = 1;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  int _currentImagePage = 1;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  int _currentInstructionPage = 1;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  int _currentVideoPage = 1;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        page: _currentVideoPage,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as RetailerModel;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as PackagingResponse;\n-      final promotionalResponse =\n-          response['promotions'] as PromotionalOfferResponse;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailers;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse.packagings;\n-      _promotions = promotionalResponse.offers;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      _hasMoreIngredients =\n-          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n-      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n-      _hasMorePromotions =\n-          _currentPromotionPage < promotionalResponse.totalPages;\n-      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n-      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n-      _hasMoreInstructions =\n-          _currentInstructionPage < instructionResponse.totalPages;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-      _videos = videoResponse.videos;\n-      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    print('HI');\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    try {\n-      List<RetailerModel>\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-}\n"
                },
                {
                    "date": 1750762438934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,318 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  int _currentAllergenPage = 1;\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  int _currentIngredientPage = 1;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  bool _hasMorePackagings = true;\n+  int _currentPackagingPage = 1;\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  int _currentPromotionPage = 1;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  int _currentRecipePage = 1;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  int _currentLeafletPage = 1;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  int _currentImagePage = 1;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  int _currentInstructionPage = 1;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  int _currentVideoPage = 1;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        page: _currentVideoPage,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as List<PackagingModel>;\n+      final promotionalResponse =\n+          response['promotions'] as PromotionalOfferResponse;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagings;\n+      _promotions = promotionalResponse.offers;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      _hasMoreIngredients =\n+          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n+      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n+      _hasMorePromotions =\n+          _currentPromotionPage < promotionalResponse.totalPages;\n+      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n+      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n+      _hasMoreInstructions =\n+          _currentInstructionPage < instructionResponse.totalPages;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+      _videos = videoResponse.videos;\n+      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    print('HI');\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750762444077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,9 +210,8 @@\n       _instructions = instructionResponse.instructions;\n \n       _hasMoreIngredients =\n           _currentIngredientPage < ingredientResponse.pagination.totalPages;\n-      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n       _hasMorePromotions =\n           _currentPromotionPage < promotionalResponse.totalPages;\n       _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n       _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n"
                },
                {
                    "date": 1750762479592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,51 +36,41 @@\n   bool _hasMoreData = true;\n   final List<GTIN_Model> _allProducts = [];\n \n   List<AllergenModel> _allergens = [];\n-  int _currentAllergenPage = 1;\n   static const int _allergenPageSize = 20;\n \n   List<RetailerModel> _retailers = [];\n \n   List<IngredientModel> _ingredients = [];\n   bool _hasMoreIngredients = true;\n-  int _currentIngredientPage = 1;\n   static const int _ingredientPageSize = 10;\n \n   List<PackagingModel> _packagings = [];\n-  bool _hasMorePackagings = true;\n-  int _currentPackagingPage = 1;\n   static const int _packagingPageSize = 10;\n \n   List<PromotionalOfferModel> _promotions = [];\n   bool _hasMorePromotions = true;\n-  int _currentPromotionPage = 1;\n   static const int _promotionPageSize = 10;\n \n   List<RecipeModel> _recipes = [];\n   bool _hasMoreRecipes = true;\n-  int _currentRecipePage = 1;\n   static const int _recipePageSize = 10;\n \n   List<LeafletModel> _leaflets = [];\n   bool _hasMoreLeaflets = true;\n-  int _currentLeafletPage = 1;\n   static const int _leafletPageSize = 10;\n \n   List<ImageModel> _images = [];\n   bool _hasMoreImages = true;\n-  int _currentImagePage = 1;\n   static const int _imagePageSize = 10;\n \n   List<InstructionModel> _instructions = [];\n   bool _hasMoreInstructions = true;\n-  int _currentInstructionPage = 1;\n   static const int _instructionPageSize = 10;\n \n   List<VideoModel> _videos = [];\n   bool _hasMoreVideos = true;\n-  int _currentVideoPage = 1;\n   static const int _videoPageSize = 10;\n \n   // * Getters\n   int get page => _currentPage;\n@@ -208,20 +198,10 @@\n       _recipes = recipeResponse.recipes;\n       _leaflets = leafletResponse.leaflets;\n       _instructions = instructionResponse.instructions;\n \n-      _hasMoreIngredients =\n-          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n-      _hasMorePromotions =\n-          _currentPromotionPage < promotionalResponse.totalPages;\n-      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n-      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n-      _hasMoreInstructions =\n-          _currentInstructionPage < instructionResponse.totalPages;\n-\n       final imageResponse = response['images'] as ImageResponse;\n       _images = imageResponse.images;\n-      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n \n       final videoResponse = response['videos'] as VideoResponse;\n       _videos = videoResponse.videos;\n       _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n@@ -266,9 +246,8 @@\n   }\n \n   Future<void> getNutritionFacts(String barcode) async {\n     _nutritionFacts.clear();\n-    print('HI');\n     emit(GtinNutritionFactsLoadingState());\n     try {\n       _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n       emit(GtinNutritionFactsLoadedState());\n@@ -314,322 +293,4 @@\n       emit(GetRetailerInformationError(e.toString()));\n     }\n   }\n }\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  int _currentAllergenPage = 1;\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  int _currentIngredientPage = 1;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  bool _hasMorePackagings = true;\n-  int _currentPackagingPage = 1;\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  int _currentPromotionPage = 1;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  int _currentRecipePage = 1;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  int _currentLeafletPage = 1;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  int _currentImagePage = 1;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  int _currentInstructionPage = 1;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  int _currentVideoPage = 1;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        page: _currentVideoPage,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as List<RetailerModel>;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as PackagingResponse;\n-      final promotionalResponse =\n-          response['promotions'] as PromotionalOfferResponse;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse.packagings;\n-      _promotions = promotionalResponse.offers;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      _hasMoreIngredients =\n-          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n-      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n-      _hasMorePromotions =\n-          _currentPromotionPage < promotionalResponse.totalPages;\n-      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n-      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n-      _hasMoreInstructions =\n-          _currentInstructionPage < instructionResponse.totalPages;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-      _videos = videoResponse.videos;\n-      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    print('HI');\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-}\n"
                },
                {
                    "date": 1750762485642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,10 +202,8 @@\n       final imageResponse = response['images'] as ImageResponse;\n       _images = imageResponse.images;\n \n       final videoResponse = response['videos'] as VideoResponse;\n-      _videos = videoResponse.videos;\n-      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n \n       emit(GtinDigitalLinkViewDataLoadedState(\n         allergens: _allergens,\n         retailers: _retailers,\n"
                },
                {
                    "date": 1750762491102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,293 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as List<PackagingModel>;\n+      final promotionalResponse =\n+          response['promotions'] as PromotionalOfferResponse;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagings;\n+      _promotions = promotionalResponse.offers;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750762598676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,293 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as List<PackagingModel>;\n+      final promotionalResponse =\n+          response['promotions'] as PromotionalOfferResponse;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagings;\n+      _promotions = promotionalResponse.offers;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750762615588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,293 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as List<PackagingModel>;\n+      final promotionalResponse =\n+          response['promotions'] as PromotionalOfferResponse;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse;\n+      _promotions = promotionalResponse.offers;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750762637732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,885 +289,16 @@\n     } catch (e) {\n       emit(GetRetailerInformationError(e.toString()));\n     }\n   }\n-}\n-// ignore_for_file: unused_field\n \n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n+  Future<void> getIngredientsInformation(String barcode) async {\n+    _ingredients.clear();\n+    emit(GetIngredientsInformationLoading());\n     try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n+      _ingredients = await GTINController.getIngredientsInformation(barcode);\n+      emit(GetIngredientsInformationLoaded(_ingredients));\n     } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n+      emit(GetIngredientsInformationError(e.toString()));\n     }\n   }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as List<RetailerModel>;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as List<PackagingModel>;\n-      final promotionalResponse =\n-          response['promotions'] as PromotionalOfferResponse;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagings;\n-      _promotions = promotionalResponse.offers;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n }\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as List<RetailerModel>;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as List<PackagingModel>;\n-      final promotionalResponse =\n-          response['promotions'] as PromotionalOfferResponse;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagings;\n-      _promotions = promotionalResponse.offers;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-}\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        page: _currentVideoPage,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as List<RetailerModel>;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as List<PackagingModel>;\n-      final promotionalResponse =\n-          response['promotions'] as PromotionalOfferResponse;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagings;\n-      _promotions = promotionalResponse.offers;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-}\n"
                },
                {
                    "date": 1750762685341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,304 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as List<PackagingModel>;\n+      final promotionalResponse =\n+          response['promotions'] as PromotionalOfferResponse;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse;\n+      _promotions = promotionalResponse.offers;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPackagingInformation(String gtin) async {\n+    _packagings.clear();\n+    emit(GetPackagingInformationLoading());\n+    try {\n+      _packagings = await GTINController.getPackagingInformation(gtin);\n+      emit(GetPackagingInformationLoaded(_packagings));\n+    } catch (e) {\n+      emit(GetPackagingInformationError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750762695361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,8 +281,10 @@\n     }\n   }\n \n   Future<void> getRetailersInformation(String gtin) async {\n+    _retailers.clear();\n+    emit(GetRetailerInformationLoading());\n     try {\n       final newRetailers = await GTINController.getRetailerInformation(gtin);\n       _retailers.addAll(newRetailers);\n       emit(GetRetailerInformationLoaded(_retailers));\n"
                },
                {
                    "date": 1750831505850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n       final retailerResponse = response['data'] as List<RetailerModel>;\n       final ingredientResponse = response['ingredients'] as IngredientResponse;\n       final packagingResponse = response['packagings'] as List<PackagingModel>;\n       final promotionalResponse =\n-          response['promotions'] as PromotionalOfferResponse;\n+          response['promotionalOffers'] as List<PromotionalOfferModel>;\n       final recipeResponse = response['recipes'] as RecipeResponse;\n       final leafletResponse = response['leaflets'] as LeafletResponse;\n       final instructionResponse =\n           response['instructions'] as InstructionResponse;\n"
                },
                {
                    "date": 1750831518311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,306 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as List<PackagingModel>;\n+      final promotionalResponse =\n+          response['promotionalOffers'] as List<PromotionalOfferModel>;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse;\n+      _promotions = promotions;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    _retailers.clear();\n+    emit(GetRetailerInformationLoading());\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPackagingInformation(String gtin) async {\n+    _packagings.clear();\n+    emit(GetPackagingInformationLoading());\n+    try {\n+      _packagings = await GTINController.getPackagingInformation(gtin);\n+      emit(GetPackagingInformationLoaded(_packagings));\n+    } catch (e) {\n+      emit(GetPackagingInformationError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750831534649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,306 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as List<PackagingModel>;\n+      final promotionalResponse =\n+          response['promotionalOffers'] as List<PromotionalOfferModel>;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse;\n+      _promotions = promotionalResponse;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    _retailers.clear();\n+    emit(GetRetailerInformationLoading());\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPackagingInformation(String gtin) async {\n+    _packagings.clear();\n+    emit(GetPackagingInformationLoading());\n+    try {\n+      _packagings = await GTINController.getPackagingInformation(gtin);\n+      emit(GetPackagingInformationLoaded(_packagings));\n+    } catch (e) {\n+      emit(GetPackagingInformationError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750831938441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,317 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as List<PackagingModel>;\n+      final promotionalResponse =\n+          response['promotionalOffers'] as List<PromotionalOfferModel>;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse;\n+      _promotions = promotionalResponse;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    _retailers.clear();\n+    emit(GetRetailerInformationLoading());\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPackagingInformation(String gtin) async {\n+    _packagings.clear();\n+    emit(GetPackagingInformationLoading());\n+    try {\n+      _packagings = await GTINController.getPackagingInformation(gtin);\n+      emit(GetPackagingInformationLoaded(_packagings));\n+    } catch (e) {\n+      emit(GetPackagingInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPromotionalOffers(String gtin) async {\n+    _promotions.clear();\n+    emit(GetPromotionalOffersLoading());\n+    try {\n+      _promotions = await GTINController.getPromotionalOffers(gtin);\n+      emit(GetPromotionalOffersLoaded(_promotions));\n+    } catch (e) {\n+      emit(GetPromotionalOffersError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750833227547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,317 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as List<PackagingModel>;\n+      final promotionalResponse =\n+          response['promotionalOffers'] as List<PromotionalOfferModel>;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse;\n+      _promotions = promotionalResponse;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    _retailers.clear();\n+    emit(GetRetailerInformationLoading());\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPackagingInformation(String gtin) async {\n+    _packagings.clear();\n+    emit(GetPackagingInformationLoading());\n+    try {\n+      _packagings = await GTINController.getPackagingInformation(gtin);\n+      emit(GetPackagingInformationLoaded(_packagings));\n+    } catch (e) {\n+      emit(GetPackagingInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPromotionalOffers(String gtin) async {\n+    _promotions.clear();\n+    emit(GetPromotionalOffersLoading());\n+    try {\n+      _promotions = await GTINController.getPromotionalOffers(gtin);\n+      emit(GetPromotionalOffersLoaded(_promotions));\n+    } catch (e) {\n+      emit(GetPromotionalOffersError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750833261508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,1543 +314,4 @@\n       emit(GetPromotionalOffersError(e.toString()));\n     }\n   }\n }\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as List<RetailerModel>;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as List<PackagingModel>;\n-      final promotionalResponse =\n-          response['promotionalOffers'] as List<PromotionalOfferModel>;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse;\n-      _promotions = promotionalResponse;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    _retailers.clear();\n-    emit(GetRetailerInformationLoading());\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getPackagingInformation(String gtin) async {\n-    _packagings.clear();\n-    emit(GetPackagingInformationLoading());\n-    try {\n-      _packagings = await GTINController.getPackagingInformation(gtin);\n-      emit(GetPackagingInformationLoaded(_packagings));\n-    } catch (e) {\n-      emit(GetPackagingInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getPromotionalOffers(String gtin) async {\n-    _promotions.clear();\n-    emit(GetPromotionalOffersLoading());\n-    try {\n-      _promotions = await GTINController.getPromotionalOffers(gtin);\n-      emit(GetPromotionalOffersLoaded(_promotions));\n-    } catch (e) {\n-      emit(GetPromotionalOffersError(e.toString()));\n-    }\n-  }\n-}\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as List<RetailerModel>;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as List<PackagingModel>;\n-      final promotionalResponse =\n-          response['promotionalOffers'] as List<PromotionalOfferModel>;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse;\n-      _promotions = promotionalResponse;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    _retailers.clear();\n-    emit(GetRetailerInformationLoading());\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getPackagingInformation(String gtin) async {\n-    _packagings.clear();\n-    emit(GetPackagingInformationLoading());\n-    try {\n-      _packagings = await GTINController.getPackagingInformation(gtin);\n-      emit(GetPackagingInformationLoaded(_packagings));\n-    } catch (e) {\n-      emit(GetPackagingInformationError(e.toString()));\n-    }\n-  }\n-}\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as List<RetailerModel>;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as List<PackagingModel>;\n-      final promotionalResponse =\n-          response['promotionalOffers'] as List<PromotionalOfferModel>;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse;\n-      _promotions = promotions;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    _retailers.clear();\n-    emit(GetRetailerInformationLoading());\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getPackagingInformation(String gtin) async {\n-    _packagings.clear();\n-    emit(GetPackagingInformationLoading());\n-    try {\n-      _packagings = await GTINController.getPackagingInformation(gtin);\n-      emit(GetPackagingInformationLoaded(_packagings));\n-    } catch (e) {\n-      emit(GetPackagingInformationError(e.toString()));\n-    }\n-  }\n-}\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as List<RetailerModel>;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as List<PackagingModel>;\n-      final promotionalResponse =\n-          response['promotionalOffers'] as List<PromotionalOfferModel>;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse;\n-      _promotions = promotionalResponse.offers;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    _retailers.clear();\n-    emit(GetRetailerInformationLoading());\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getPackagingInformation(String gtin) async {\n-    _packagings.clear();\n-    emit(GetPackagingInformationLoading());\n-    try {\n-      _packagings = await GTINController.getPackagingInformation(gtin);\n-      emit(GetPackagingInformationLoaded(_packagings));\n-    } catch (e) {\n-      emit(GetPackagingInformationError(e.toString()));\n-    }\n-  }\n-}\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as List<RetailerModel>;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as List<PackagingModel>;\n-      final promotionalResponse =\n-          response['promotions'] as PromotionalOfferResponse;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse;\n-      _promotions = promotionalResponse.offers;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getIngredientsInformation(String barcode) async {\n-    _ingredients.clear();\n-    emit(GetIngredientsInformationLoading());\n-    try {\n-      _ingredients = await GTINController.getIngredientsInformation(barcode);\n-      emit(GetIngredientsInformationLoaded(_ingredients));\n-    } catch (e) {\n-      emit(GetIngredientsInformationError(e.toString()));\n-    }\n-  }\n-}\n"
                },
                {
                    "date": 1750833320840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,8 +308,10 @@\n     _promotions.clear();\n     emit(GetPromotionalOffersLoading());\n     try {\n       _promotions = await GTINController.getPromotionalOffers(gtin);\n+      print(\"Logo URL: $logoUrl\");\n+\n       emit(GetPromotionalOffersLoaded(_promotions));\n     } catch (e) {\n       emit(GetPromotionalOffersError(e.toString()));\n     }\n"
                },
                {
                    "date": 1750833328057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,319 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  bool _hasMoreIngredients = true;\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  bool _hasMorePromotions = true;\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  bool _hasMoreRecipes = true;\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  bool _hasMoreLeaflets = true;\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  bool _hasMoreImages = true;\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  bool _hasMoreInstructions = true;\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  bool _hasMoreVideos = true;\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as List<PackagingModel>;\n+      final promotionalResponse =\n+          response['promotionalOffers'] as List<PromotionalOfferModel>;\n+      final recipeResponse = response['recipes'] as RecipeResponse;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse;\n+      _promotions = promotionalResponse;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    _retailers.clear();\n+    emit(GetRetailerInformationLoading());\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPackagingInformation(String gtin) async {\n+    _packagings.clear();\n+    emit(GetPackagingInformationLoading());\n+    try {\n+      _packagings = await GTINController.getPackagingInformation(gtin);\n+      emit(GetPackagingInformationLoaded(_packagings));\n+    } catch (e) {\n+      emit(GetPackagingInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPromotionalOffers(String gtin) async {\n+    _promotions.clear();\n+    emit(GetPromotionalOffersLoading());\n+    try {\n+      _promotions = await GTINController.getPromotionalOffers(gtin);\n+      print(\"Logo URL: ${_promotions.map((p) => p.logoUrl).toList()}\");\n+\n+      emit(GetPromotionalOffersLoaded(_promotions));\n+    } catch (e) {\n+      emit(GetPromotionalOffersError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750834522118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,312 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as List<PackagingModel>;\n+      final promotionalResponse =\n+          response['promotionalOffers'] as List<PromotionalOfferModel>;\n+      final recipeResponse = response['recipes'] as List<RecipeModel>;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse;\n+      _promotions = promotionalResponse;\n+      _recipes = recipeResponse.recipes;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    _retailers.clear();\n+    emit(GetRetailerInformationLoading());\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPackagingInformation(String gtin) async {\n+    _packagings.clear();\n+    emit(GetPackagingInformationLoading());\n+    try {\n+      _packagings = await GTINController.getPackagingInformation(gtin);\n+      emit(GetPackagingInformationLoaded(_packagings));\n+    } catch (e) {\n+      emit(GetPackagingInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPromotionalOffers(String gtin) async {\n+    _promotions.clear();\n+    emit(GetPromotionalOffersLoading());\n+    try {\n+      _promotions = await GTINController.getPromotionalOffers(gtin);\n+      print(\"Logo URL: ${_promotions.map((p) => p.logo).toList()}\");\n+\n+      emit(GetPromotionalOffersLoaded(_promotions));\n+    } catch (e) {\n+      emit(GetPromotionalOffersError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750834527395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n       final ingredientResponse = response['ingredients'] as IngredientResponse;\n       final packagingResponse = response['packagings'] as List<PackagingModel>;\n       final promotionalResponse =\n           response['promotionalOffers'] as List<PromotionalOfferModel>;\n-      final recipeResponse = response['recipes'] as List<RecipeModel>;\n+      final recipeResponse = response as List<RecipeModel>;\n       final leafletResponse = response['leaflets'] as LeafletResponse;\n       final instructionResponse =\n           response['instructions'] as InstructionResponse;\n \n"
                },
                {
                    "date": 1750834536854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n       _retailers = retailerResponse;\n       _ingredients = ingredientResponse.ingredients;\n       _packagings = packagingResponse;\n       _promotions = promotionalResponse;\n-      _recipes = recipeResponse.recipes;\n+      _recipes = recipeResponse;\n       _leaflets = leafletResponse.leaflets;\n       _instructions = instructionResponse.instructions;\n \n       final imageResponse = response['images'] as ImageResponse;\n"
                },
                {
                    "date": 1750834711348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,323 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as List<PackagingModel>;\n+      final promotionalResponse =\n+          response['promotionalOffers'] as List<PromotionalOfferModel>;\n+      final recipeResponse = response as List<RecipeModel>;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse;\n+      _promotions = promotionalResponse;\n+      _recipes = recipeResponse;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    _retailers.clear();\n+    emit(GetRetailerInformationLoading());\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPackagingInformation(String gtin) async {\n+    _packagings.clear();\n+    emit(GetPackagingInformationLoading());\n+    try {\n+      _packagings = await GTINController.getPackagingInformation(gtin);\n+      emit(GetPackagingInformationLoaded(_packagings));\n+    } catch (e) {\n+      emit(GetPackagingInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPromotionalOffers(String gtin) async {\n+    _promotions.clear();\n+    emit(GetPromotionalOffersLoading());\n+    try {\n+      _promotions = await GTINController.getPromotionalOffers(gtin);\n+      print(\"Logo URL: ${_promotions.map((p) => p.logo).toList()}\");\n+\n+      emit(GetPromotionalOffersLoaded(_promotions));\n+    } catch (e) {\n+      emit(GetPromotionalOffersError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRecipes(String gtin) async {\n+    _recipes.clear();\n+    emit(GetRecipesLoading());\n+    try {\n+      _recipes = await GTINController.getRecipes(gtin);\n+      emit(GetRecipesLoaded(_recipes));\n+    } catch (e) {\n+      emit(GetRecipesError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750834721682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,13 +311,13 @@\n   }\n \n   Future<void> getRecipes(String gtin) async {\n     _recipes.clear();\n-    emit(GetRecipesLoading());\n+    emit(GetRecipeInformationLoading());\n     try {\n       _recipes = await GTINController.getRecipes(gtin);\n-      emit(GetRecipesLoaded(_recipes));\n+      emit(GetRecipeInformationLoaded(_recipes));\n     } catch (e) {\n-      emit(GetRecipesError(e.toString()));\n+      emit(GetRecipeInformationError(e.toString()));\n     }\n   }\n }\n"
                },
                {
                    "date": 1750834914605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,323 @@\n+// ignore_for_file: unused_field\n+\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n+import 'package:gtrack_nartec/global/services/http_service.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n+\n+class GtinCubit extends Cubit<GtinState> {\n+  GtinCubit() : super(GtinInitState());\n+\n+  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n+  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n+\n+  // * Lists\n+  final List<GTIN_Model> data = [];\n+  List<ReviewModel> _reviews = [];\n+  List<NutritionFactsModel> _nutritionFacts = [];\n+\n+  int _currentPage = 1;\n+  final int _pageSize = 20;\n+  bool _hasMoreData = true;\n+  final List<GTIN_Model> _allProducts = [];\n+\n+  List<AllergenModel> _allergens = [];\n+  static const int _allergenPageSize = 20;\n+\n+  List<RetailerModel> _retailers = [];\n+\n+  List<IngredientModel> _ingredients = [];\n+  static const int _ingredientPageSize = 10;\n+\n+  List<PackagingModel> _packagings = [];\n+  static const int _packagingPageSize = 10;\n+\n+  List<PromotionalOfferModel> _promotions = [];\n+  static const int _promotionPageSize = 10;\n+\n+  List<RecipeModel> _recipes = [];\n+  static const int _recipePageSize = 10;\n+\n+  List<LeafletModel> _leaflets = [];\n+  static const int _leafletPageSize = 10;\n+\n+  List<ImageModel> _images = [];\n+  static const int _imagePageSize = 10;\n+\n+  List<InstructionModel> _instructions = [];\n+  static const int _instructionPageSize = 10;\n+\n+  List<VideoModel> _videos = [];\n+  static const int _videoPageSize = 10;\n+\n+  // * Getters\n+  int get page => _currentPage;\n+  int get pageSize => _pageSize;\n+  List<GTIN_Model> get products => _allProducts;\n+  List<AllergenModel> get allergens => _allergens;\n+  List<RetailerModel> get retailers => _retailers;\n+  List<IngredientModel> get ingredients => _ingredients;\n+  List<PackagingModel> get packagings => _packagings;\n+  List<PromotionalOfferModel> get promotions => _promotions;\n+  List<RecipeModel> get recipes => _recipes;\n+  List<LeafletModel> get leaflets => _leaflets;\n+  List<ImageModel> get images => _images;\n+  List<InstructionModel> get instructions => _instructions;\n+  List<VideoModel> get videos => _videos;\n+  List<ReviewModel> get reviews => _reviews;\n+  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n+  TextEditingController get searchController => _searchController;\n+\n+  final TextEditingController _searchController = TextEditingController();\n+\n+  void getProducts({String? searchQuery}) async {\n+    if (state is GtinLoadingState) return;\n+\n+    if (_currentPage == 1) {\n+      emit(GtinLoadingState());\n+      _allProducts.clear();\n+    }\n+\n+    try {\n+      final response = await GTINController.getPaginatedProducts(\n+        page: _currentPage,\n+        pageSize: _pageSize,\n+        searchQuery: searchQuery,\n+      );\n+\n+      _allProducts.addAll(response.products);\n+\n+      final totalPages = (response.totalProducts / _pageSize).ceil();\n+      _hasMoreData = _currentPage < totalPages;\n+\n+      emit(GtinLoadedState(\n+        data: _allProducts,\n+        currentPage: _currentPage,\n+        totalPages: totalPages,\n+        hasMoreData: _hasMoreData,\n+      ));\n+    } catch (error) {\n+      emit(GtinErrorState(message: error.toString()));\n+    }\n+  }\n+\n+  void loadMore({String? searchQuery}) {\n+    if (state is GtinLoadedState) {\n+      final currentState = state as GtinLoadedState;\n+      if (currentState.hasMoreData) {\n+        emit(GtinLoadingMoreState(\n+          currentData: _allProducts,\n+          hasMoreData: true,\n+        ));\n+        _currentPage++;\n+        getProducts(searchQuery: searchQuery);\n+      }\n+    }\n+  }\n+\n+  void refresh() {\n+    _currentPage = 1;\n+    getProducts();\n+  }\n+\n+  // void getGtinData() async {\n+  //   emit(GtinLoadingState());\n+\n+  //   try {\n+  //     final data = await GTINController.getProducts();\n+  //     emit(GtinLoadedState(\n+  //       data: data,\n+  //       currentPage: 1,\n+  //       totalPages: 1,\n+  //       hasMoreData: false,\n+  //     ));\n+  //   } catch (e) {\n+  //     emit(GtinErrorState(message: e.toString()));\n+  //   }\n+  // }\n+\n+  void deleteGtinProductById(String productId) async {\n+    emit(GtinDeleteProductLoadingState());\n+\n+    try {\n+      await GTINController.deleteProductById(productId);\n+      emit(GtinDeleteProductLoadedState());\n+    } catch (e) {\n+      emit(GtinErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getDigitalLinkViewData(String gtin) async {\n+    try {\n+      final response = await GTINController.getDigitalLinkViewData(\n+        gtin,\n+        limit: _videoPageSize,\n+      );\n+\n+      // Fix: Handle allergens properly\n+      final allergens = response['allergens'] as List<AllergenModel>;\n+      final retailerResponse = response['data'] as List<RetailerModel>;\n+      final ingredientResponse = response['ingredients'] as IngredientResponse;\n+      final packagingResponse = response['packagings'] as List<PackagingModel>;\n+      final promotionalResponse =\n+          response['promotionalOffers'] as List<PromotionalOfferModel>;\n+      final recipeResponse = response as List<RecipeModel>;\n+      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final instructionResponse =\n+          response['instructions'] as InstructionResponse;\n+\n+      // Fix: Assign allergens properly\n+      _allergens = allergens;\n+      _retailers = retailerResponse;\n+      _ingredients = ingredientResponse.ingredients;\n+      _packagings = packagingResponse;\n+      _promotions = promotionalResponse;\n+      _recipes = recipeResponse;\n+      _leaflets = leafletResponse.leaflets;\n+      _instructions = instructionResponse.instructions;\n+\n+      final imageResponse = response['images'] as ImageResponse;\n+      _images = imageResponse.images;\n+\n+      final videoResponse = response['videos'] as VideoResponse;\n+\n+      emit(GtinDigitalLinkViewDataLoadedState(\n+        allergens: _allergens,\n+        retailers: _retailers,\n+        ingredients: _ingredients,\n+        packagings: _packagings,\n+        promotions: _promotions,\n+        recipes: _recipes,\n+        leaflets: _leaflets,\n+        images: _images,\n+        instructions: _instructions,\n+        videos: _videos,\n+      ));\n+    } catch (e) {\n+      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getAllergenInformation(String barcode) async {\n+    _allergens.clear();\n+    emit(GetAllergenInformationLoading());\n+    try {\n+      _allergens = await GTINController.getAllergenInformation(barcode);\n+      emit(GetAllergenInformationLoaded(_allergens));\n+    } catch (e) {\n+      emit(GetAllergenInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getNutritionFacts(String barcode) async {\n+    _nutritionFacts.clear();\n+    emit(GtinNutritionFactsLoadingState());\n+    try {\n+      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n+      emit(GtinNutritionFactsLoadedState());\n+    } catch (e) {\n+      emit(GtinNutritionFactsErrorState(e.toString()));\n+    }\n+  }\n+\n+  void submitReview({\n+    required String barcode,\n+    required int rating,\n+    required String comment,\n+    required String productDescription,\n+    required String brandName,\n+  }) async {\n+    emit(GtinReviewSubmittingState());\n+    try {\n+      final newReview = await GTINController.postReview(\n+        barcode: barcode,\n+        rating: rating,\n+        comment: comment,\n+        productDescription: productDescription,\n+        brandName: brandName,\n+      );\n+\n+      // Add the new review to the existing reviews\n+      _reviews = [newReview, ..._reviews];\n+\n+      emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewErrorState(message: e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRetailersInformation(String gtin) async {\n+    _retailers.clear();\n+    emit(GetRetailerInformationLoading());\n+    try {\n+      final newRetailers = await GTINController.getRetailerInformation(gtin);\n+      _retailers.addAll(newRetailers);\n+      emit(GetRetailerInformationLoaded(_retailers));\n+    } catch (e) {\n+      emit(GetRetailerInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPackagingInformation(String gtin) async {\n+    _packagings.clear();\n+    emit(GetPackagingInformationLoading());\n+    try {\n+      _packagings = await GTINController.getPackagingInformation(gtin);\n+      emit(GetPackagingInformationLoaded(_packagings));\n+    } catch (e) {\n+      emit(GetPackagingInformationError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getPromotionalOffers(String gtin) async {\n+    _promotions.clear();\n+    emit(GetPromotionalOffersLoading());\n+    try {\n+      _promotions = await GTINController.getPromotionalOffers(gtin);\n+      print(\"Logo URL: ${_promotions.map((p) => p.logo).toList()}\");\n+\n+      emit(GetPromotionalOffersLoaded(_promotions));\n+    } catch (e) {\n+      emit(GetPromotionalOffersError(e.toString()));\n+    }\n+  }\n+\n+  Future<void> getRecipes(String gtin) async {\n+    _recipes.clear();\n+    emit(GetRecipeInformationLoading());\n+    try {\n+      _recipes = await GTINController.getRecipeInformation(gtin);\n+      emit(GetRecipeInformationLoaded(_recipes));\n+    } catch (e) {\n+      emit(GetRecipeInformationError(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1750835817887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,1277 +320,4 @@\n       emit(GetRecipeInformationError(e.toString()));\n     }\n   }\n }\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as List<RetailerModel>;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as List<PackagingModel>;\n-      final promotionalResponse =\n-          response['promotionalOffers'] as List<PromotionalOfferModel>;\n-      final recipeResponse = response as List<RecipeModel>;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse;\n-      _promotions = promotionalResponse;\n-      _recipes = recipeResponse;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    _retailers.clear();\n-    emit(GetRetailerInformationLoading());\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getPackagingInformation(String gtin) async {\n-    _packagings.clear();\n-    emit(GetPackagingInformationLoading());\n-    try {\n-      _packagings = await GTINController.getPackagingInformation(gtin);\n-      emit(GetPackagingInformationLoaded(_packagings));\n-    } catch (e) {\n-      emit(GetPackagingInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getPromotionalOffers(String gtin) async {\n-    _promotions.clear();\n-    emit(GetPromotionalOffersLoading());\n-    try {\n-      _promotions = await GTINController.getPromotionalOffers(gtin);\n-      print(\"Logo URL: ${_promotions.map((p) => p.logo).toList()}\");\n-\n-      emit(GetPromotionalOffersLoaded(_promotions));\n-    } catch (e) {\n-      emit(GetPromotionalOffersError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRecipes(String gtin) async {\n-    _recipes.clear();\n-    emit(GetRecipeInformationLoading());\n-    try {\n-      _recipes = await GTINController.getRecipes(gtin);\n-      emit(GetRecipeInformationLoaded(_recipes));\n-    } catch (e) {\n-      emit(GetRecipeInformationError(e.toString()));\n-    }\n-  }\n-}\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as List<RetailerModel>;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as List<PackagingModel>;\n-      final promotionalResponse =\n-          response['promotionalOffers'] as List<PromotionalOfferModel>;\n-      final recipeResponse = response as List<RecipeModel>;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse;\n-      _promotions = promotionalResponse;\n-      _recipes = recipeResponse;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    _retailers.clear();\n-    emit(GetRetailerInformationLoading());\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getPackagingInformation(String gtin) async {\n-    _packagings.clear();\n-    emit(GetPackagingInformationLoading());\n-    try {\n-      _packagings = await GTINController.getPackagingInformation(gtin);\n-      emit(GetPackagingInformationLoaded(_packagings));\n-    } catch (e) {\n-      emit(GetPackagingInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getPromotionalOffers(String gtin) async {\n-    _promotions.clear();\n-    emit(GetPromotionalOffersLoading());\n-    try {\n-      _promotions = await GTINController.getPromotionalOffers(gtin);\n-      print(\"Logo URL: ${_promotions.map((p) => p.logo).toList()}\");\n-\n-      emit(GetPromotionalOffersLoaded(_promotions));\n-    } catch (e) {\n-      emit(GetPromotionalOffersError(e.toString()));\n-    }\n-  }\n-}\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as List<RetailerModel>;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as List<PackagingModel>;\n-      final promotionalResponse =\n-          response['promotionalOffers'] as List<PromotionalOfferModel>;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse;\n-      _promotions = promotionalResponse;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    _retailers.clear();\n-    emit(GetRetailerInformationLoading());\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getPackagingInformation(String gtin) async {\n-    _packagings.clear();\n-    emit(GetPackagingInformationLoading());\n-    try {\n-      _packagings = await GTINController.getPackagingInformation(gtin);\n-      emit(GetPackagingInformationLoaded(_packagings));\n-    } catch (e) {\n-      emit(GetPackagingInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getPromotionalOffers(String gtin) async {\n-    _promotions.clear();\n-    emit(GetPromotionalOffersLoading());\n-    try {\n-      _promotions = await GTINController.getPromotionalOffers(gtin);\n-      print(\"Logo URL: ${_promotions.map((p) => p.logoUrl).toList()}\");\n-\n-      emit(GetPromotionalOffersLoaded(_promotions));\n-    } catch (e) {\n-      emit(GetPromotionalOffersError(e.toString()));\n-    }\n-  }\n-}\n-// ignore_for_file: unused_field\n-\n-import 'package:flutter/material.dart';\n-import 'package:flutter_bloc/flutter_bloc.dart';\n-import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n-import 'package:gtrack_nartec/constants/app_urls.dart';\n-import 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\n-import 'package:gtrack_nartec/global/services/http_service.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\n-import 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n-\n-class GtinCubit extends Cubit<GtinState> {\n-  GtinCubit() : super(GtinInitState());\n-\n-  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n-  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n-\n-  // * Lists\n-  final List<GTIN_Model> data = [];\n-  List<ReviewModel> _reviews = [];\n-  List<NutritionFactsModel> _nutritionFacts = [];\n-\n-  int _currentPage = 1;\n-  final int _pageSize = 20;\n-  bool _hasMoreData = true;\n-  final List<GTIN_Model> _allProducts = [];\n-\n-  List<AllergenModel> _allergens = [];\n-  static const int _allergenPageSize = 20;\n-\n-  List<RetailerModel> _retailers = [];\n-\n-  List<IngredientModel> _ingredients = [];\n-  bool _hasMoreIngredients = true;\n-  static const int _ingredientPageSize = 10;\n-\n-  List<PackagingModel> _packagings = [];\n-  static const int _packagingPageSize = 10;\n-\n-  List<PromotionalOfferModel> _promotions = [];\n-  bool _hasMorePromotions = true;\n-  static const int _promotionPageSize = 10;\n-\n-  List<RecipeModel> _recipes = [];\n-  bool _hasMoreRecipes = true;\n-  static const int _recipePageSize = 10;\n-\n-  List<LeafletModel> _leaflets = [];\n-  bool _hasMoreLeaflets = true;\n-  static const int _leafletPageSize = 10;\n-\n-  List<ImageModel> _images = [];\n-  bool _hasMoreImages = true;\n-  static const int _imagePageSize = 10;\n-\n-  List<InstructionModel> _instructions = [];\n-  bool _hasMoreInstructions = true;\n-  static const int _instructionPageSize = 10;\n-\n-  List<VideoModel> _videos = [];\n-  bool _hasMoreVideos = true;\n-  static const int _videoPageSize = 10;\n-\n-  // * Getters\n-  int get page => _currentPage;\n-  int get pageSize => _pageSize;\n-  List<GTIN_Model> get products => _allProducts;\n-  List<AllergenModel> get allergens => _allergens;\n-  List<RetailerModel> get retailers => _retailers;\n-  List<IngredientModel> get ingredients => _ingredients;\n-  List<PackagingModel> get packagings => _packagings;\n-  List<PromotionalOfferModel> get promotions => _promotions;\n-  List<RecipeModel> get recipes => _recipes;\n-  List<LeafletModel> get leaflets => _leaflets;\n-  List<ImageModel> get images => _images;\n-  List<InstructionModel> get instructions => _instructions;\n-  List<VideoModel> get videos => _videos;\n-  List<ReviewModel> get reviews => _reviews;\n-  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n-  TextEditingController get searchController => _searchController;\n-\n-  final TextEditingController _searchController = TextEditingController();\n-\n-  void getProducts({String? searchQuery}) async {\n-    if (state is GtinLoadingState) return;\n-\n-    if (_currentPage == 1) {\n-      emit(GtinLoadingState());\n-      _allProducts.clear();\n-    }\n-\n-    try {\n-      final response = await GTINController.getPaginatedProducts(\n-        page: _currentPage,\n-        pageSize: _pageSize,\n-        searchQuery: searchQuery,\n-      );\n-\n-      _allProducts.addAll(response.products);\n-\n-      final totalPages = (response.totalProducts / _pageSize).ceil();\n-      _hasMoreData = _currentPage < totalPages;\n-\n-      emit(GtinLoadedState(\n-        data: _allProducts,\n-        currentPage: _currentPage,\n-        totalPages: totalPages,\n-        hasMoreData: _hasMoreData,\n-      ));\n-    } catch (error) {\n-      emit(GtinErrorState(message: error.toString()));\n-    }\n-  }\n-\n-  void loadMore({String? searchQuery}) {\n-    if (state is GtinLoadedState) {\n-      final currentState = state as GtinLoadedState;\n-      if (currentState.hasMoreData) {\n-        emit(GtinLoadingMoreState(\n-          currentData: _allProducts,\n-          hasMoreData: true,\n-        ));\n-        _currentPage++;\n-        getProducts(searchQuery: searchQuery);\n-      }\n-    }\n-  }\n-\n-  void refresh() {\n-    _currentPage = 1;\n-    getProducts();\n-  }\n-\n-  // void getGtinData() async {\n-  //   emit(GtinLoadingState());\n-\n-  //   try {\n-  //     final data = await GTINController.getProducts();\n-  //     emit(GtinLoadedState(\n-  //       data: data,\n-  //       currentPage: 1,\n-  //       totalPages: 1,\n-  //       hasMoreData: false,\n-  //     ));\n-  //   } catch (e) {\n-  //     emit(GtinErrorState(message: e.toString()));\n-  //   }\n-  // }\n-\n-  void deleteGtinProductById(String productId) async {\n-    emit(GtinDeleteProductLoadingState());\n-\n-    try {\n-      await GTINController.deleteProductById(productId);\n-      emit(GtinDeleteProductLoadedState());\n-    } catch (e) {\n-      emit(GtinErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getDigitalLinkViewData(String gtin) async {\n-    try {\n-      final response = await GTINController.getDigitalLinkViewData(\n-        gtin,\n-        limit: _videoPageSize,\n-      );\n-\n-      // Fix: Handle allergens properly\n-      final allergens = response['allergens'] as List<AllergenModel>;\n-      final retailerResponse = response['data'] as List<RetailerModel>;\n-      final ingredientResponse = response['ingredients'] as IngredientResponse;\n-      final packagingResponse = response['packagings'] as List<PackagingModel>;\n-      final promotionalResponse =\n-          response['promotionalOffers'] as List<PromotionalOfferModel>;\n-      final recipeResponse = response['recipes'] as RecipeResponse;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n-      final instructionResponse =\n-          response['instructions'] as InstructionResponse;\n-\n-      // Fix: Assign allergens properly\n-      _allergens = allergens;\n-      _retailers = retailerResponse;\n-      _ingredients = ingredientResponse.ingredients;\n-      _packagings = packagingResponse;\n-      _promotions = promotionalResponse;\n-      _recipes = recipeResponse.recipes;\n-      _leaflets = leafletResponse.leaflets;\n-      _instructions = instructionResponse.instructions;\n-\n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n-\n-      final videoResponse = response['videos'] as VideoResponse;\n-\n-      emit(GtinDigitalLinkViewDataLoadedState(\n-        allergens: _allergens,\n-        retailers: _retailers,\n-        ingredients: _ingredients,\n-        packagings: _packagings,\n-        promotions: _promotions,\n-        recipes: _recipes,\n-        leaflets: _leaflets,\n-        images: _images,\n-        instructions: _instructions,\n-        videos: _videos,\n-      ));\n-    } catch (e) {\n-      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getAllergenInformation(String barcode) async {\n-    _allergens.clear();\n-    emit(GetAllergenInformationLoading());\n-    try {\n-      _allergens = await GTINController.getAllergenInformation(barcode);\n-      emit(GetAllergenInformationLoaded(_allergens));\n-    } catch (e) {\n-      emit(GetAllergenInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getNutritionFacts(String barcode) async {\n-    _nutritionFacts.clear();\n-    emit(GtinNutritionFactsLoadingState());\n-    try {\n-      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n-      emit(GtinNutritionFactsLoadedState());\n-    } catch (e) {\n-      emit(GtinNutritionFactsErrorState(e.toString()));\n-    }\n-  }\n-\n-  void submitReview({\n-    required String barcode,\n-    required int rating,\n-    required String comment,\n-    required String productDescription,\n-    required String brandName,\n-  }) async {\n-    emit(GtinReviewSubmittingState());\n-    try {\n-      final newReview = await GTINController.postReview(\n-        barcode: barcode,\n-        rating: rating,\n-        comment: comment,\n-        productDescription: productDescription,\n-        brandName: brandName,\n-      );\n-\n-      // Add the new review to the existing reviews\n-      _reviews = [newReview, ..._reviews];\n-\n-      emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewErrorState(message: e.toString()));\n-    }\n-  }\n-\n-  Future<void> getRetailersInformation(String gtin) async {\n-    _retailers.clear();\n-    emit(GetRetailerInformationLoading());\n-    try {\n-      final newRetailers = await GTINController.getRetailerInformation(gtin);\n-      _retailers.addAll(newRetailers);\n-      emit(GetRetailerInformationLoaded(_retailers));\n-    } catch (e) {\n-      emit(GetRetailerInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getPackagingInformation(String gtin) async {\n-    _packagings.clear();\n-    emit(GetPackagingInformationLoading());\n-    try {\n-      _packagings = await GTINController.getPackagingInformation(gtin);\n-      emit(GetPackagingInformationLoaded(_packagings));\n-    } catch (e) {\n-      emit(GetPackagingInformationError(e.toString()));\n-    }\n-  }\n-\n-  Future<void> getPromotionalOffers(String gtin) async {\n-    _promotions.clear();\n-    emit(GetPromotionalOffersLoading());\n-    try {\n-      _promotions = await GTINController.getPromotionalOffers(gtin);\n-      print(\"Logo URL: $logoUrl\");\n-\n-      emit(GetPromotionalOffersLoaded(_promotions));\n-    } catch (e) {\n-      emit(GetPromotionalOffersError(e.toString()));\n-    }\n-  }\n-}\n"
                },
                {
                    "date": 1750921865940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -319,5 +319,16 @@\n     } catch (e) {\n       emit(GetRecipeInformationError(e.toString()));\n     }\n   }\n+\n+  Future<void> getImages(String gtin) async {\n+    _images.clear();\n+    emit(GetImagesLoading());\n+    try {\n+      _images = await GTINController.getImageInformation(gtin);\n+      emit(GetImagesLoaded(_images));\n+    } catch (e) {\n+      emit(GetImagesError(e.toString()));\n+    }\n+  }\n }\n"
                },
                {
                    "date": 1750921896778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,10 +190,10 @@\n       _recipes = recipeResponse;\n       _leaflets = leafletResponse.leaflets;\n       _instructions = instructionResponse.instructions;\n \n-      final imageResponse = response['images'] as ImageResponse;\n-      _images = imageResponse.images;\n+      final imageResponse = response['data'] as List<ImageModel>;\n+      _images = imageResponse;\n \n       final videoResponse = response['videos'] as VideoResponse;\n \n       emit(GtinDigitalLinkViewDataLoadedState(\n"
                },
                {
                    "date": 1750924865930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,5 +330,16 @@\n     } catch (e) {\n       emit(GetImagesError(e.toString()));\n     }\n   }\n+\n+  Future<void> getLeafletInformation(String gtin) async {\n+    _leaflets.clear();\n+    emit(GetLeafletLoading());\n+    try {\n+      _leaflets = await GTINController.getLeafletInformation(gtin);\n+      emit(GetLeafletLoaded(_leaflets));\n+    } catch (e) {\n+      emit(GetLeafletError(e.toString()));\n+    }\n+  }\n }\n"
                },
                {
                    "date": 1750924884203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n       final packagingResponse = response['packagings'] as List<PackagingModel>;\n       final promotionalResponse =\n           response['promotionalOffers'] as List<PromotionalOfferModel>;\n       final recipeResponse = response as List<RecipeModel>;\n-      final leafletResponse = response['leaflets'] as LeafletResponse;\n+      final leafletResponse = response as List<LeafletModel>;\n       final instructionResponse =\n           response['instructions'] as InstructionResponse;\n \n       // Fix: Assign allergens properly\n"
                },
                {
                    "date": 1750924890784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n       _ingredients = ingredientResponse.ingredients;\n       _packagings = packagingResponse;\n       _promotions = promotionalResponse;\n       _recipes = recipeResponse;\n-      _leaflets = leafletResponse.leaflets;\n+      _leaflets = leafletResponse;\n       _instructions = instructionResponse.instructions;\n \n       final imageResponse = response['data'] as List<ImageModel>;\n       _images = imageResponse;\n"
                },
                {
                    "date": 1750927698497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,9 @@\n \n       final imageResponse = response['data'] as List<ImageModel>;\n       _images = imageResponse;\n \n-      final videoResponse = response['videos'] as VideoResponse;\n+      final videoResponse = response['data'] as List<VideoModel>;\n \n       emit(GtinDigitalLinkViewDataLoadedState(\n         allergens: _allergens,\n         retailers: _retailers,\n"
                },
                {
                    "date": 1750927750092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,8 +179,9 @@\n       final recipeResponse = response as List<RecipeModel>;\n       final leafletResponse = response as List<LeafletModel>;\n       final instructionResponse =\n           response['instructions'] as InstructionResponse;\n+      final videoResponse = response['videos'] as List<VideoModel>;\n \n       // Fix: Assign allergens properly\n       _allergens = allergens;\n       _retailers = retailerResponse;\n"
                },
                {
                    "date": 1750927793531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,8 +194,9 @@\n       final imageResponse = response['data'] as List<ImageModel>;\n       _images = imageResponse;\n \n       final videoResponse = response['data'] as List<VideoModel>;\n+      _videos = videoResponse;\n \n       emit(GtinDigitalLinkViewDataLoadedState(\n         allergens: _allergens,\n         retailers: _retailers,\n"
                },
                {
                    "date": 1750927825717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,5 +342,16 @@\n     } catch (e) {\n       emit(GetLeafletError(e.toString()));\n     }\n   }\n+\n+  Future<void> getVideoInformation(String gtin) async {\n+    _videos.clear();\n+    emit(GetVideoLoading());\n+    try {\n+      _videos = await GTINController.getVideoInformation(gtin);\n+      emit(GetVideoLoaded(_videos));\n+    } catch (e) {\n+      emit(GetVideoError(e.toString()));\n+    }\n+  }\n }\n"
                },
                {
                    "date": 1750930720351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -353,5 +353,16 @@\n     } catch (e) {\n       emit(GetVideoError(e.toString()));\n     }\n   }\n+\n+  Future<void> getReviewsInformation(String gtin) async {\n+    _reviews.clear();\n+    emit(GetReviewsLoading());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GetReviewsLoaded(_reviews));\n+    } catch (e) {\n+      emit(GetReviewsError(e.toString()));\n+    }\n+  }\n }\n"
                },
                {
                    "date": 1750931001422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,9 +302,8 @@\n     _promotions.clear();\n     emit(GetPromotionalOffersLoading());\n     try {\n       _promotions = await GTINController.getPromotionalOffers(gtin);\n-      print(\"Logo URL: ${_promotions.map((p) => p.logo).toList()}\");\n \n       emit(GetPromotionalOffersLoaded(_promotions));\n     } catch (e) {\n       emit(GetPromotionalOffersError(e.toString()));\n"
                },
                {
                    "date": 1750931170713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,18 +213,8 @@\n       emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n     }\n   }\n \n-  // * Reviews\n-  Future<void> getReviews(String gtin) async {\n-    emit(GtinReviewsLoadingState());\n-    try {\n-      _reviews = await GTINController.getReviews(gtin);\n-      emit(GtinReviewsLoadedState());\n-    } catch (e) {\n-      emit(GtinReviewsErrorState(message: e.toString()));\n-    }\n-  }\n \n   Future<void> getAllergenInformation(String barcode) async {\n     _allergens.clear();\n     emit(GetAllergenInformationLoading());\n"
                },
                {
                    "date": 1750931180894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,10 +256,8 @@\n       // Add the new review to the existing reviews\n       _reviews = [newReview, ..._reviews];\n \n       emit(GtinReviewSubmittedState());\n-      // Notify that reviews are loaded with the updated list\n-      emit(GtinReviewsLoadedState());\n     } catch (e) {\n       emit(GtinReviewErrorState(message: e.toString()));\n     }\n   }\n"
                },
                {
                    "date": 1750931201611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,8 +256,10 @@\n       // Add the new review to the existing reviews\n       _reviews = [newReview, ..._reviews];\n \n       emit(GtinReviewSubmittedState());\n+      // Notify that reviews are loaded with the updated list\n+      emit(GetReviewsLoaded());\n     } catch (e) {\n       emit(GtinReviewErrorState(message: e.toString()));\n     }\n   }\n"
                },
                {
                    "date": 1750931235162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,8 @@\n       final recipeResponse = response as List<RecipeModel>;\n       final leafletResponse = response as List<LeafletModel>;\n       final instructionResponse =\n           response['instructions'] as InstructionResponse;\n-      final videoResponse = response['videos'] as List<VideoModel>;\n \n       // Fix: Assign allergens properly\n       _allergens = allergens;\n       _retailers = retailerResponse;\n@@ -214,8 +213,18 @@\n       emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n     }\n   }\n \n+  // * Reviews\n+  Future<void> getReviews(String gtin) async {\n+    emit(GtinReviewsLoadingState());\n+    try {\n+      _reviews = await GTINController.getReviews(gtin);\n+      emit(GtinReviewsLoadedState());\n+    } catch (e) {\n+      emit(GtinReviewsErrorState(message: e.toString()));\n+    }\n+  }\n \n   Future<void> getAllergenInformation(String barcode) async {\n     _allergens.clear();\n     emit(GetAllergenInformationLoading());\n@@ -259,9 +268,9 @@\n       _reviews = [newReview, ..._reviews];\n \n       emit(GtinReviewSubmittedState());\n       // Notify that reviews are loaded with the updated list\n-      emit(GetReviewsLoaded());\n+      emit(GtinReviewsLoadedState());\n     } catch (e) {\n       emit(GtinReviewErrorState(message: e.toString()));\n     }\n   }\n"
                },
                {
                    "date": 1750931276835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,13 +355,13 @@\n   }\n \n   Future<void> getReviewsInformation(String gtin) async {\n     _reviews.clear();\n-    emit(GetReviewsLoading());\n+    emit(GtinReviewsLoadingState());\n     try {\n       _reviews = await GTINController.getReviews(gtin);\n-      emit(GetReviewsLoaded(_reviews));\n+      emit(GtinReviewsLoadedState());\n     } catch (e) {\n-      emit(GetReviewsError(e.toString()));\n+      emit(GtinReviewsErrorState(message: e.toString()));\n     }\n   }\n }\n"
                },
                {
                    "date": 1750932537258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,5 +363,7 @@\n     } catch (e) {\n       emit(GtinReviewsErrorState(message: e.toString()));\n     }\n   }\n+\n+  void getGtinData() {}\n }\n"
                }
            ],
            "date": 1750754028410,
            "name": "Commit-0",
            "content": "// ignore_for_file: unused_field\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\nimport 'package:gtrack_nartec/constants/app_urls.dart';\nimport 'package:gtrack_nartec/controllers/Identify/gtin/gtin_controller.dart';\nimport 'package:gtrack_nartec/global/services/http_service.dart';\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/allergen_model.dart';\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/image_model.dart';\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/ingredient_model.dart';\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/instruction_model.dart';\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/leaflet_model.dart';\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/nutrition_facts_model.dart';\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/packaging_model.dart';\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/promotional_offer_model.dart';\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/recipe_model.dart';\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/retailer_model.dart';\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/review_model.dart';\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/video_model.dart';\n\nclass GtinCubit extends Cubit<GtinState> {\n  GtinCubit() : super(GtinInitState());\n\n  static GtinCubit get(context) => BlocProvider.of<GtinCubit>(context);\n  final HttpService upcHubService = HttpService(baseUrl: AppUrls.upcHub);\n\n  // * Lists\n  final List<GTIN_Model> data = [];\n  List<ReviewModel> _reviews = [];\n  List<NutritionFactsModel> _nutritionFacts = [];\n\n  int _currentPage = 1;\n  final int _pageSize = 20;\n  bool _hasMoreData = true;\n  final List<GTIN_Model> _allProducts = [];\n\n  List<AllergenModel> _allergens = [];\n  int _currentAllergenPage = 1;\n  static const int _allergenPageSize = 20;\n\n  List<RetailerModel> _retailers = [];\n  bool _hasMoreRetailers = true;\n  int _currentRetailerPage = 1;\n  static const int _retailerPageSize = 10;\n\n  List<IngredientModel> _ingredients = [];\n  bool _hasMoreIngredients = true;\n  int _currentIngredientPage = 1;\n  static const int _ingredientPageSize = 10;\n\n  List<PackagingModel> _packagings = [];\n  bool _hasMorePackagings = true;\n  int _currentPackagingPage = 1;\n  static const int _packagingPageSize = 10;\n\n  List<PromotionalOfferModel> _promotions = [];\n  bool _hasMorePromotions = true;\n  int _currentPromotionPage = 1;\n  static const int _promotionPageSize = 10;\n\n  List<RecipeModel> _recipes = [];\n  bool _hasMoreRecipes = true;\n  int _currentRecipePage = 1;\n  static const int _recipePageSize = 10;\n\n  List<LeafletModel> _leaflets = [];\n  bool _hasMoreLeaflets = true;\n  int _currentLeafletPage = 1;\n  static const int _leafletPageSize = 10;\n\n  List<ImageModel> _images = [];\n  bool _hasMoreImages = true;\n  int _currentImagePage = 1;\n  static const int _imagePageSize = 10;\n\n  List<InstructionModel> _instructions = [];\n  bool _hasMoreInstructions = true;\n  int _currentInstructionPage = 1;\n  static const int _instructionPageSize = 10;\n\n  List<VideoModel> _videos = [];\n  bool _hasMoreVideos = true;\n  int _currentVideoPage = 1;\n  static const int _videoPageSize = 10;\n\n  // * Getters\n  int get page => _currentPage;\n  int get pageSize => _pageSize;\n  List<GTIN_Model> get products => _allProducts;\n  List<AllergenModel> get allergens => _allergens;\n  List<RetailerModel> get retailers => _retailers;\n  List<IngredientModel> get ingredients => _ingredients;\n  List<PackagingModel> get packagings => _packagings;\n  List<PromotionalOfferModel> get promotions => _promotions;\n  List<RecipeModel> get recipes => _recipes;\n  List<LeafletModel> get leaflets => _leaflets;\n  List<ImageModel> get images => _images;\n  List<InstructionModel> get instructions => _instructions;\n  List<VideoModel> get videos => _videos;\n  List<ReviewModel> get reviews => _reviews;\n  List<NutritionFactsModel> get nutritionFacts => _nutritionFacts;\n  TextEditingController get searchController => _searchController;\n\n  final TextEditingController _searchController = TextEditingController();\n\n  void getProducts({String? searchQuery}) async {\n    if (state is GtinLoadingState) return;\n\n    if (_currentPage == 1) {\n      emit(GtinLoadingState());\n      _allProducts.clear();\n    }\n\n    try {\n      final response = await GTINController.getPaginatedProducts(\n        page: _currentPage,\n        pageSize: _pageSize,\n        searchQuery: searchQuery,\n      );\n\n      _allProducts.addAll(response.products);\n\n      final totalPages = (response.totalProducts / _pageSize).ceil();\n      _hasMoreData = _currentPage < totalPages;\n\n      emit(GtinLoadedState(\n        data: _allProducts,\n        currentPage: _currentPage,\n        totalPages: totalPages,\n        hasMoreData: _hasMoreData,\n      ));\n    } catch (error) {\n      emit(GtinErrorState(message: error.toString()));\n    }\n  }\n\n  void loadMore({String? searchQuery}) {\n    if (state is GtinLoadedState) {\n      final currentState = state as GtinLoadedState;\n      if (currentState.hasMoreData) {\n        emit(GtinLoadingMoreState(\n          currentData: _allProducts,\n          hasMoreData: true,\n        ));\n        _currentPage++;\n        getProducts(searchQuery: searchQuery);\n      }\n    }\n  }\n\n  void refresh() {\n    _currentPage = 1;\n    getProducts();\n  }\n\n  // void getGtinData() async {\n  //   emit(GtinLoadingState());\n\n  //   try {\n  //     final data = await GTINController.getProducts();\n  //     emit(GtinLoadedState(\n  //       data: data,\n  //       currentPage: 1,\n  //       totalPages: 1,\n  //       hasMoreData: false,\n  //     ));\n  //   } catch (e) {\n  //     emit(GtinErrorState(message: e.toString()));\n  //   }\n  // }\n\n  void deleteGtinProductById(String productId) async {\n    emit(GtinDeleteProductLoadingState());\n\n    try {\n      await GTINController.deleteProductById(productId);\n      emit(GtinDeleteProductLoadedState());\n    } catch (e) {\n      emit(GtinErrorState(message: e.toString()));\n    }\n  }\n\n  Future<void> getDigitalLinkViewData(String gtin) async {\n    try {\n      final response = await GTINController.getDigitalLinkViewData(\n        gtin,\n        page: _currentVideoPage,\n        limit: _videoPageSize,\n      );\n\n      // Fix: Handle allergens properly\n      final allergens = response['allergens'] as List<AllergenModel>;\n      final retailerResponse = response['retailers'] as RetailerResponse;\n      final ingredientResponse = response['ingredients'] as IngredientResponse;\n      final packagingResponse = response['packagings'] as PackagingResponse;\n      final promotionalResponse =\n          response['promotions'] as PromotionalOfferResponse;\n      final recipeResponse = response['recipes'] as RecipeResponse;\n      final leafletResponse = response['leaflets'] as LeafletResponse;\n      final instructionResponse =\n          response['instructions'] as InstructionResponse;\n\n      // Fix: Assign allergens properly\n      _allergens = allergens;\n      _retailers = retailerResponse.retailers;\n      _ingredients = ingredientResponse.ingredients;\n      _packagings = packagingResponse.packagings;\n      _promotions = promotionalResponse.offers;\n      _recipes = recipeResponse.recipes;\n      _leaflets = leafletResponse.leaflets;\n      _instructions = instructionResponse.instructions;\n\n      _hasMoreRetailers =\n          _currentRetailerPage < retailerResponse.pagination.totalPages;\n      _hasMoreIngredients =\n          _currentIngredientPage < ingredientResponse.pagination.totalPages;\n      _hasMorePackagings = _currentPackagingPage < packagingResponse.totalPages;\n      _hasMorePromotions =\n          _currentPromotionPage < promotionalResponse.totalPages;\n      _hasMoreRecipes = _currentRecipePage < recipeResponse.totalPages;\n      _hasMoreLeaflets = _currentLeafletPage < leafletResponse.totalPages;\n      _hasMoreInstructions =\n          _currentInstructionPage < instructionResponse.totalPages;\n\n      final imageResponse = response['images'] as ImageResponse;\n      _images = imageResponse.images;\n      _hasMoreImages = _currentImagePage < imageResponse.totalPages;\n\n      final videoResponse = response['videos'] as VideoResponse;\n      _videos = videoResponse.videos;\n      _hasMoreVideos = _currentVideoPage < videoResponse.totalPages;\n\n      emit(GtinDigitalLinkViewDataLoadedState(\n        allergens: _allergens,\n        retailers: _retailers,\n        ingredients: _ingredients,\n        packagings: _packagings,\n        promotions: _promotions,\n        recipes: _recipes,\n        leaflets: _leaflets,\n        images: _images,\n        instructions: _instructions,\n        videos: _videos,\n      ));\n    } catch (e) {\n      emit(GtinDigitalLinkViewDataErrorState(message: e.toString()));\n    }\n  }\n\n  // * Reviews\n  Future<void> getReviews(String gtin) async {\n    emit(GtinReviewsLoadingState());\n    try {\n      _reviews = await GTINController.getReviews(gtin);\n      emit(GtinReviewsLoadedState());\n    } catch (e) {\n      emit(GtinReviewsErrorState(message: e.toString()));\n    }\n  }\n\n  Future<void> getAllergenInformation(String barcode) async {\n    _allergens.clear();\n    emit(GetAllergenInformationLoading());\n    try {\n      _allergens = await GTINController.getAllergenInformation(barcode);\n      emit(GetAllergenInformationLoaded(_allergens));\n    } catch (e) {\n      emit(GetAllergenInformationError(e.toString()));\n    }\n  }\n\n  Future<void> getNutritionFacts(String barcode) async {\n    _nutritionFacts.clear();\n    print('HI');\n    emit(GtinNutritionFactsLoadingState());\n    try {\n      _nutritionFacts = await GTINController.fetchNutritionFacts(barcode);\n      emit(GtinNutritionFactsLoadedState());\n    } catch (e) {\n      emit(GtinNutritionFactsErrorState(e.toString()));\n    }\n  }\n\n  void submitReview({\n    required String barcode,\n    required int rating,\n    required String comment,\n    required String productDescription,\n    required String brandName,\n  }) async {\n    emit(GtinReviewSubmittingState());\n    try {\n      final newReview = await GTINController.postReview(\n        barcode: barcode,\n        rating: rating,\n        comment: comment,\n        productDescription: productDescription,\n        brandName: brandName,\n      );\n\n      // Add the new review to the existing reviews\n      _reviews = [newReview, ..._reviews];\n\n      emit(GtinReviewSubmittedState());\n      // Notify that reviews are loaded with the updated list\n      emit(GtinReviewsLoadedState());\n    } catch (e) {\n      emit(GtinReviewErrorState(message: e.toString()));\n    }\n  }\n\n  Future<void> get() async {\n    if (_hasMoreData) {\n      _currentAllergenPage++;\n      try {\n        final newAllergens = await GTINController.getPaginatedAllergens(\n          page: _currentAllergenPage,\n          pageSize: _allergenPageSize,\n        );\n        _allergens.addAll(newAllergens);\n        emit(GetAllergenInformationLoaded(_allergens));\n      } catch (e) {\n        emit(GetAllergenInformationError(e.toString()));\n      }\n    }\n  }\n}\n"
        }
    ]
}