{
    "sourceFile": "lib/screens/home/identify/GTIN/widget/leaflet_info_tab.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750925504285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750925504285,
            "name": "Commit-0",
            "content": "// ignore_for_file: deprecated_member_use, avoid_print\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter/rendering.dart';\nimport 'package:flutter/services.dart';\nimport 'dart:ui' as ui;\nimport 'dart:io';\nimport 'package:path_provider/path_provider.dart';\nimport 'package:share_plus/share_plus.dart';\nimport 'package:pdf/pdf.dart';\nimport 'package:pdf/widgets.dart' as pw;\nimport 'package:image/image.dart' as img;\nimport 'package:url_launcher/url_launcher.dart';\n\nclass LeafletInfoTab extends StatelessWidget {\n  final List<dynamic> leafletInfo; // Replace with your actual leaflet model type\n\n  const LeafletInfoTab({super.key, required this.leafletInfo});\n\n  @override\n  Widget build(BuildContext context) {\n    if (leafletInfo.isEmpty) {\n      return const Center(\n        child: Text(\n          'No leaflet information available',\n          style: TextStyle(fontSize: 16, color: Colors.grey),\n        ),\n      );\n    }\n\n    return Column(\n      children: leafletInfo\n          .map((leaflet) => LeafletCard(leaflet: leaflet))\n          .toList(),\n    );\n  }\n}\n\nclass LeafletCard extends StatelessWidget {\n  final dynamic leaflet; // Replace with your actual leaflet model type\n  final GlobalKey _cardKey = GlobalKey();\n\n  LeafletCard({super.key, required this.leaflet});\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      margin: const EdgeInsets.only(bottom: 16),\n      elevation: 4,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\n      child: Column(\n        children: [\n          // Card content for capture (without buttons)\n          RepaintBoundary(\n            key: _cardKey,\n            child: Container(\n              decoration: BoxDecoration(\n                borderRadius: BorderRadius.circular(8),\n                border: Border.all(color: Colors.black, width: 2),\n                color: Colors.white,\n              ),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  // Header Section\n                  Container(\n                    width: double.infinity,\n                    padding: const EdgeInsets.all(16),\n                    decoration: const BoxDecoration(\n                      color: Colors.white,\n                      borderRadius: BorderRadius.only(\n                        topLeft: Radius.circular(6),\n                        topRight: Radius.circular(6),\n                      ),\n                    ),\n                    child: const Text(\n                      'Electronic Leaflet\\nالنشرة الإلكترونية',\n                      style: TextStyle(\n                        color: Colors.black,\n                        fontSize: 18,\n                        fontWeight: FontWeight.bold,\n                      ),\n                      textAlign: TextAlign.center,\n                    ),\n                  ),\n\n                  // Thick divider\n                  Container(\n                    height: 4,\n                    color: Colors.black,\n                  ),\n\n                  // Leaflet Details Section\n                  Padding(\n                    padding: const EdgeInsets.all(16),\n                    child: Column(\n                      children: [\n                        _buildInfoRow(\n                          'Product ID:',\n                          'معرف المنتج /',\n                          _getValue('productId', '10032'),\n                          isRightAligned: true,\n                        ),\n                        const Divider(color: Colors.grey),\n                        _buildInfoRow(\n                          'GTIN:',\n                          'الرمز الشريطي /',\n                          _getValue('gtin', '6285561000957'),\n                          isRightAligned: true,\n                        ),\n                        const Divider(color: Colors.grey),\n                        _buildInfoRow(\n                          'Link Type:',\n                          'نوع الرابط /',\n                          _getValue('linkType', 'link'),\n                          isRightAligned: true,\n                        ),\n                        const Divider(color: Colors.grey),\n                        _buildInfoRow(\n                          'Languages:',\n                          'اللغات /',\n                          _getValue('languages', 'Language'),\n                          isRightAligned: true,\n                        ),\n                        const Divider(color: Colors.grey),\n                        _buildDescriptionRow(\n                          'Leaflet Information:',\n                          'معلومات النشرة /',\n                          _getValue('leafletInformation', 'testt'),\n                        ),\n                        const Divider(color: Colors.grey),\n                        _buildInfoRow(\n                          'Target URL:',\n                          'الرابط المستهدف /',\n                          _getValue('targetUrl', 'www.google.com'),\n                          isRightAligned: true,\n                          isLink: true,\n                        ),\n                      ],\n                    ),\n                  ),\n\n                  // Thick divider\n                  Container(\n                    height: 4,\n                    color: Colors.black,\n                  ),\n\n                  // PDF Section\n                  Container(\n                    width: double.infinity,\n                    padding: const EdgeInsets.all(16),\n                    child: const Text(\n                      'PDF Leaflet / نشرة PDF',\n                      style: TextStyle(\n                        fontSize: 16,\n                        fontWeight: FontWeight.bold,\n                        color: Colors.black,\n                      ),\n                      textAlign: TextAlign.center,\n                    ),\n                  ),\n\n                  // PDF Status Section\n                  Container(\n                    width: double.infinity,\n                    padding: const EdgeInsets.all(16),\n                    child: Container(\n                      padding: const EdgeInsets.all(16),\n                      decoration: BoxDecoration(\n                        color: Colors.grey[50],\n                        borderRadius: BorderRadius.circular(8),\n                        border: Border.all(\n                          color: Colors.grey.withOpacity(0.3),\n                          width: 2,\n                          style: BorderStyle.solid,\n                        ),\n                      ),\n                      child: Column(\n                        children: [\n                          // PDF Icon\n                          Container(\n                            padding: const EdgeInsets.all(8),\n                            decoration: BoxDecoration(\n                              color: Colors.red,\n                              borderRadius: BorderRadius.circular(4),\n                            ),\n                            child: const Text(\n                              'PDF',\n                              style: TextStyle(\n                                color: Colors.white,\n                                fontWeight: FontWeight.bold,\n                                fontSize: 16,\n                              ),\n                            ),\n                          ),\n                          const SizedBox(height: 12),\n                          const Text(\n                            'PDF Leaflet Available',\n                            style: TextStyle(\n                              fontSize: 16,\n                              fontWeight: FontWeight.bold,\n                              color: Colors.black,\n                            ),\n                            textAlign: TextAlign.center,\n                          ),\n                          const Text(\n                            'نشرة إلكترونية متاحة بصيغة PDF',\n                            style: TextStyle(\n                              fontSize: 12,\n                              color: Colors.grey,\n                            ),\n                            textAlign: TextAlign.center,\n                          ),\n                          const SizedBox(height: 16),\n                          // View PDF Button\n                          GestureDetector(\n                            onTap: () => _openPDFUrl(),\n                            child: Container(\n                              width: double.infinity,\n                              padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),\n                              decoration: BoxDecoration(\n                                color: Colors.red,\n                                borderRadius: BorderRadius.circular(4),\n                              ),\n                              child: const Row(\n                                mainAxisAlignment: MainAxisAlignment.center,\n                                children: [\n                                  Icon(\n                                    Icons.download,\n                                    color: Colors.white,\n                                    size: 16,\n                                  ),\n                                  SizedBox(width: 8),\n                                  Text(\n                                    'VIEW PDF / عرض PDF',\n                                    style: TextStyle(\n                                      color: Colors.white,\n                                      fontWeight: FontWeight.bold,\n                                      fontSize: 12,\n                                    ),\n                                  ),\n                                ],\n                              ),\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n\n                  const SizedBox(height: 16),\n\n                  // Footer Info\n                  Padding(\n                    padding: const EdgeInsets.all(16),\n                    child: Column(\n                      children: [\n                        Text(\n                          'Leaflet ID: ${_getValue('leafletId', '10032')}',\n                          style: const TextStyle(fontSize: 12, color: Colors.grey),\n                          textAlign: TextAlign.center,\n                        ),\n                        Text(\n                          'GTIN: ${_getValue('gtin', '6285561000957')}',\n                          style: const TextStyle(fontSize: 12, color: Colors.grey),\n                          textAlign: TextAlign.center,\n                        ),\n                        Text(\n                          'Generated on: ${_getValue('generatedOn', '6/26/2025, 1:02:56 PM')}',\n                          style: const TextStyle(fontSize: 12, color: Colors.grey),\n                          textAlign: TextAlign.center,\n                        ),\n                      ],\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n\n          // Action Buttons (outside RepaintBoundary, so they won't be captured)\n          Padding(\n            padding: const EdgeInsets.all(12),\n            child: Wrap(\n              spacing: 8,\n              runSpacing: 8,\n              alignment: WrapAlignment.center,\n              children: [\n                _buildActionButton(\n                    'PNG', Colors.blue[900]!, () => _downloadAs('png')),\n                _buildActionButton(\n                    'JPG', Colors.blue[900]!, () => _downloadAs('jpg')),\n                _buildActionButton(\n                    'PDF', Colors.blue[900]!, () => _downloadAs('pdf')),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildInfoRow(String englishLabel, String arabicLabel, String value,\n      {bool isRightAligned = false, bool isLink = false}) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 8),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Expanded(\n            flex: 2,\n            child: RichText(\n              text: TextSpan(\n                style: const TextStyle(\n                  fontSize: 14,\n                  color: Colors.black,\n                ),\n                children: [\n                  TextSpan(\n                    text: arabicLabel,\n                    style: const TextStyle(fontWeight: FontWeight.w500),\n                  ),\n                  TextSpan(\n                    text: ' $englishLabel',\n                    style: const TextStyle(fontWeight: FontWeight.w500),\n                  ),\n                ],\n              ),\n            ),\n          ),\n          Expanded(\n            flex: 3,\n            child: GestureDetector(\n              onTap: isLink ? () => _openUrl(value) : null,\n              child: Text(\n                value,\n                style: TextStyle(\n                  fontSize: 14,\n                  fontWeight: FontWeight.w500,\n                  color: isLink ? Colors.blue : Colors.black,\n                  decoration: isLink ? TextDecoration.underline : null,\n                ),\n                textAlign: isRightAligned ? TextAlign.right : TextAlign.left,\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildDescriptionRow(String englishLabel, String arabicLabel, String value) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 8),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          RichText(\n            text: TextSpan(\n              style: const TextStyle(\n                fontSize: 14,\n                color: Colors.black,\n              ),\n              children: [\n                TextSpan(\n                  text: arabicLabel,\n                  style: const TextStyle(fontWeight: FontWeight.w500),\n                ),\n                TextSpan(\n                  text: ' $englishLabel',\n                  style: const TextStyle(fontWeight: FontWeight.w500),\n                ),\n              ],\n            ),\n          ),\n          const SizedBox(height: 8),\n          Container(\n            width: double.infinity,\n            padding: const EdgeInsets.all(12),\n            decoration: BoxDecoration(\n              color: Colors.grey[100],\n              borderRadius: BorderRadius.circular(4),\n              border: Border.all(color: Colors.grey[300]!),\n            ),\n            child: Text(\n              value,\n              style: const TextStyle(fontSize: 14),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildActionButton(String text, Color color, VoidCallback onPressed) {\n    return GestureDetector(\n      onTap: onPressed,\n      child: Container(\n        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n        decoration: BoxDecoration(\n          color: color,\n          borderRadius: BorderRadius.circular(4),\n        ),\n        child: Text(\n          text,\n          style: const TextStyle(\n            color: Colors.white,\n            fontWeight: FontWeight.bold,\n            fontSize: 12,\n          ),\n        ),\n      ),\n    );\n  }\n\n  String _getValue(String key, String defaultValue) {\n    // Replace this with your actual data extraction logic\n    // Example: return leaflet[key]?.toString() ?? defaultValue;\n    return defaultValue;\n  }\n\n  Future<void> _openUrl(String url) async {\n    if (!url.startsWith('http://') && !url.startsWith('https://')) {\n      url = 'https://$url';\n    }\n    final Uri uri = Uri.parse(url);\n    if (await canLaunchUrl(uri)) {\n      await launchUrl(uri);\n    }\n  }\n\n  Future<void> _openPDFUrl() async {\n    final pdfUrl = _getValue('pdfUrl', 'https://www.google.com');\n    await _openUrl(pdfUrl);\n  }\n\n  Future<void> _downloadAs(String format) async {\n    try {\n      if (format == 'pdf') {\n        await _generatePDF();\n      } else {\n        await _captureAndSave(format);\n      }\n    } catch (e) {\n      print('Error downloading as $format: $e');\n    }\n  }\n\n  Future<void> _captureAndSave(String format) async {\n    try {\n      RenderRepaintBoundary boundary =\n          _cardKey.currentContext!.findRenderObject() as RenderRepaintBoundary;\n\n      ui.Image image = await boundary.toImage(pixelRatio: 3.0);\n      ByteData? byteData =\n          await image.toByteData(format: ui.ImageByteFormat.png);\n\n      if (byteData != null) {\n        Uint8List pngBytes = byteData.buffer.asUint8List();\n        Uint8List finalBytes = pngBytes;\n        String fileExtension = format.toLowerCase();\n\n        // Convert to different formats using the image package\n        if (format.toLowerCase() != 'png') {\n          img.Image? decodedImage = img.decodePng(pngBytes);\n          if (decodedImage != null) {\n            switch (format.toLowerCase()) {\n              case 'jpg':\n              case 'jpeg':\n                finalBytes = Uint8List.fromList(\n                    img.encodeJpg(decodedImage, quality: 95));\n                fileExtension = 'jpg';\n                break;\n              default:\n                finalBytes = pngBytes;\n                fileExtension = 'png';\n            }\n          }\n        }\n\n        final directory = await getTemporaryDirectory();\n        final fileName =\n            'leaflet_info_${DateTime.now().millisecondsSinceEpoch}.$fileExtension';\n        final file = File('${directory.path}/$fileName');\n\n        await file.writeAsBytes(finalBytes);\n\n        // Share the file\n        await Share.shareXFiles([XFile(file.path)], text: 'Leaflet Information');\n      }\n    } catch (e) {\n      print('Error capturing image: $e');\n    }\n  }\n\n  Future<void> _generatePDF() async {\n    try {\n      final pdf = pw.Document();\n\n      pdf.addPage(\n        pw.Page(\n          pageFormat: PdfPageFormat.a4,\n          build: (pw.Context context) {\n            return pw.Container(\n              decoration: pw.BoxDecoration(\n                border: pw.Border.all(color: PdfColors.black, width: 2),\n              ),\n              child: pw.Column(\n                crossAxisAlignment: pw.CrossAxisAlignment.start,\n                children: [\n                  // Header\n                  pw.Container(\n                    width: double.infinity,\n                    padding: const pw.EdgeInsets.all(16),\n                    child: pw.Text(\n                      'Electronic Leaflet\\nالنشرة الإلكترونية',\n                      style: pw.TextStyle(\n                        color: PdfColors.black,\n                        fontSize: 18,\n                        fontWeight: pw.FontWeight.bold,\n                      ),\n                      textAlign: pw.TextAlign.center,\n                    ),\n                  ),\n\n                  pw.SizedBox(height: 20),\n\n                  // Leaflet Details\n                  pw.Padding(\n                    padding: const pw.EdgeInsets.all(16),\n                    child: pw.Column(\n                      children: [\n                        _buildPDFInfoRow(\n                          'Product ID: / معرف المنتج',\n                          _getValue('productId', '10032'),\n                        ),\n                        pw.Divider(),\n                        _buildPDFInfoRow(\n                          'GTIN: / الرمز الشريطي',\n                          _getValue('gtin', '6285561000957'),\n                        ),\n                        pw.Divider(),\n                        _buildPDFInfoRow(\n                          'Link Type: / نوع الرابط',\n                          _getValue('linkType', 'link'),\n                        ),\n                        pw.Divider(),\n                        _buildPDFInfoRow(\n                          'Languages: / اللغات',\n                          _getValue('languages', 'Language'),\n                        ),\n                        pw.Divider(),\n                        _buildPDFInfoRow(\n                          'Leaflet Information: / معلومات النشرة',\n                          _getValue('leafletInformation', 'testt'),\n                        ),\n                        pw.Divider(),\n                        _buildPDFInfoRow(\n                          'Target URL: / الرابط المستهدف',\n                          _getValue('targetUrl', 'www.google.com'),\n                        ),\n                      ],\n                    ),\n                  ),\n\n                  pw.SizedBox(height: 20),\n\n                  // PDF Section\n                  pw.Container(\n                    width: double.infinity,\n                    padding: const pw.EdgeInsets.all(16),\n                    child: pw.Text(\n                      'PDF Leaflet / نشرة PDF',\n                      style: pw.TextStyle(\n                        fontSize: 16,\n                        fontWeight: pw.FontWeight.bold,\n                      ),\n                      textAlign: pw.TextAlign.center,\n                    ),\n                  ),\n\n                  pw.Container(\n                    width: double.infinity,\n                    padding: const pw.EdgeInsets.all(16),\n                    decoration: pw.BoxDecoration(\n                      color: PdfColors.grey100,\n                      border: pw.Border.all(color: PdfColors.grey),\n                      borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),\n                    ),\n                    child: pw.Text(\n                      'PDF Leaflet Available\\nنشرة إلكترونية متاحة بصيغة PDF',\n                      style: pw.TextStyle(\n                        fontSize: 16,\n                        fontWeight: pw.FontWeight.bold,\n                      ),\n                      textAlign: pw.TextAlign.center,\n                    ),\n                  ),\n\n                  pw.SizedBox(height: 20),\n\n                  // Footer\n                  pw.Padding(\n                    padding: const pw.EdgeInsets.all(16),\n                    child: pw.Column(\n                      children: [\n                        pw.Text(\n                          'Leaflet ID: ${_getValue('leafletId', '10032')}',\n                          style: pw.TextStyle(fontSize: 12),\n                          textAlign: pw.TextAlign.center,\n                        ),\n                        pw.Text(\n                          'GTIN: ${_getValue('gtin', '6285561000957')}',\n                          style: pw.TextStyle(fontSize: 12),\n                          textAlign: pw.TextAlign.center,\n                        ),\n                        pw.Text(\n                          'Generated on: ${_getValue('generatedOn', '6/26/2025, 1:02:56 PM')}',\n                          style: pw.TextStyle(fontSize: 12),\n                          textAlign: pw.TextAlign.center,\n                        ),\n                      ],\n                    ),\n                  ),\n                ],\n              ),\n            );\n          },\n        ),\n      );\n\n      final directory = await getTemporaryDirectory();\n      final fileName =\n          'leaflet_info_${DateTime.now().millisecondsSinceEpoch}.pdf';\n      final file = File('${directory.path}/$fileName');\n\n      await file.writeAsBytes(await pdf.save());\n\n      // Share the PDF\n      await Share.shareXFiles([XFile(file.path)],\n          text: 'Leaflet Information PDF');\n    } catch (e) {\n      print('Error generating PDF: $e');\n    }\n  }\n\n  pw.Widget _buildPDFInfoRow(String label, String value) {\n    return pw.Padding(\n      padding: const pw.EdgeInsets.symmetric(vertical: 4),\n      child: pw.Row(\n        mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,\n        children: [\n          pw.Expanded(\n            flex: 2,\n            child: pw.Text(\n              label,\n              style: pw.TextStyle(fontWeight: pw.FontWeight.bold),\n            ),\n          ),\n          pw.Expanded(\n            child: pw.Text(\n              value,\n              textAlign: pw.TextAlign.right,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}"
        }
    ]
}