{
    "sourceFile": "lib/screens/home/identify/GTIN/widget/image_info_tab.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1750923237530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750923300063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,5 +250,322 @@\n           ),\n         ],\n       ),\n     );\n-  }\n\\ No newline at end of file\n+  }\n+\n+  Widget _buildProductImage() {\n+    final imageUrl = _getValue('imageUrl', '');\n+\n+    if (imageUrl.isNotEmpty) {\n+      return CachedNetworkImage(\n+        imageUrl: imageUrl,\n+        fit: BoxFit.contain,\n+        placeholder: (context, url) => const Center(\n+          child: CircularProgressIndicator(),\n+        ),\n+        errorWidget: (context, url, error) => _buildPlaceholderImage(),\n+      );\n+    }\n+\n+    return _buildPlaceholderImage();\n+  }\n+\n+  Widget _buildPlaceholderImage() {\n+    return Container(\n+      decoration: BoxDecoration(\n+        color: Colors.grey[100],\n+        borderRadius: BorderRadius.circular(8),\n+      ),\n+      child: const Center(\n+        child: Column(\n+          mainAxisAlignment: MainAxisAlignment.center,\n+          children: [\n+            Icon(\n+              Icons.image,\n+              size: 64,\n+              color: Colors.grey,\n+            ),\n+            SizedBox(height: 8),\n+            Text(\n+              'Product Image',\n+              style: TextStyle(\n+                color: Colors.grey,\n+                fontSize: 14,\n+              ),\n+            ),\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+\n+  Widget _buildInfoRow(String englishLabel, String arabicLabel, String value,\n+      {bool isRightAligned = false, bool isLink = false}) {\n+    return Padding(\n+      padding: const EdgeInsets.symmetric(vertical: 8),\n+      child: Row(\n+        crossAxisAlignment: CrossAxisAlignment.start,\n+        children: [\n+          Expanded(\n+            flex: 2,\n+            child: RichText(\n+              text: TextSpan(\n+                style: const TextStyle(\n+                  fontSize: 14,\n+                  color: Colors.black,\n+                ),\n+                children: [\n+                  TextSpan(\n+                    text: arabicLabel,\n+                    style: const TextStyle(fontWeight: FontWeight.w500),\n+                  ),\n+                  TextSpan(\n+                    text: ' $englishLabel',\n+                    style: const TextStyle(fontWeight: FontWeight.w500),\n+                  ),\n+                ],\n+              ),\n+            ),\n+          ),\n+          Expanded(\n+            flex: 3,\n+            child: Text(\n+              value,\n+              style: TextStyle(\n+                fontSize: 14,\n+                fontWeight: FontWeight.w500,\n+                color: isLink ? Colors.blue : Colors.black,\n+                decoration: isLink ? TextDecoration.underline : null,\n+              ),\n+              textAlign: isRightAligned ? TextAlign.right : TextAlign.left,\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  Widget _buildActionButton(String text, Color color, VoidCallback onPressed) {\n+    return GestureDetector(\n+      onTap: onPressed,\n+      child: Container(\n+        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n+        decoration: BoxDecoration(\n+          color: color,\n+          borderRadius: BorderRadius.circular(4),\n+        ),\n+        child: Text(\n+          text,\n+          style: const TextStyle(\n+            color: Colors.white,\n+            fontWeight: FontWeight.bold,\n+            fontSize: 12,\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  String _getValue(String key, String defaultValue) {\n+    // Replace this with your actual data extraction logic\n+    // Example: return imageData[key]?.toString() ?? defaultValue;\n+    return defaultValue;\n+  }\n+\n+  Future<void> _downloadAs(String format) async {\n+    try {\n+      if (format == 'pdf') {\n+        await _generatePDF();\n+      } else {\n+        await _captureAndSave(format);\n+      }\n+    } catch (e) {\n+      print('Error downloading as $format: $e');\n+    }\n+  }\n+\n+  Future<void> _captureAndSave(String format) async {\n+    try {\n+      RenderRepaintBoundary boundary =\n+          _cardKey.currentContext!.findRenderObject() as RenderRepaintBoundary;\n+\n+      ui.Image image = await boundary.toImage(pixelRatio: 3.0);\n+      ByteData? byteData =\n+          await image.toByteData(format: ui.ImageByteFormat.png);\n+\n+      if (byteData != null) {\n+        Uint8List pngBytes = byteData.buffer.asUint8List();\n+        Uint8List finalBytes = pngBytes;\n+        String fileExtension = format.toLowerCase();\n+\n+        // Convert to different formats using the image package\n+        if (format.toLowerCase() != 'png') {\n+          img.Image? decodedImage = img.decodePng(pngBytes);\n+          if (decodedImage != null) {\n+            switch (format.toLowerCase()) {\n+              case 'jpg':\n+              case 'jpeg':\n+                finalBytes = Uint8List.fromList(\n+                    img.encodeJpg(decodedImage, quality: 95));\n+                fileExtension = 'jpg';\n+                break;\n+              default:\n+                finalBytes = pngBytes;\n+                fileExtension = 'png';\n+            }\n+          }\n+        }\n+\n+        final directory = await getTemporaryDirectory();\n+        final fileName =\n+            'image_info_${DateTime.now().millisecondsSinceEpoch}.$fileExtension';\n+        final file = File('${directory.path}/$fileName');\n+\n+        await file.writeAsBytes(finalBytes);\n+\n+        // Share the file\n+        await Share.shareXFiles([XFile(file.path)], text: 'Image Information');\n+      }\n+    } catch (e) {\n+      print('Error capturing image: $e');\n+    }\n+  }\n+\n+  Future<void> _generatePDF() async {\n+    try {\n+      final pdf = pw.Document();\n+\n+      pdf.addPage(\n+        pw.Page(\n+          pageFormat: PdfPageFormat.a4,\n+          build: (pw.Context context) {\n+            return pw.Container(\n+              decoration: pw.BoxDecoration(\n+                border: pw.Border.all(color: PdfColors.black, width: 2),\n+              ),\n+              child: pw.Column(\n+                crossAxisAlignment: pw.CrossAxisAlignment.start,\n+                children: [\n+                  // Header\n+                  pw.Container(\n+                    width: double.infinity,\n+                    padding: const pw.EdgeInsets.all(16),\n+                    child: pw.Column(\n+                      children: [\n+                        pw.Text(\n+                          'Images Information',\n+                          style: pw.TextStyle(\n+                            color: PdfColors.black,\n+                            fontSize: 18,\n+                            fontWeight: pw.FontWeight.bold,\n+                          ),\n+                          textAlign: pw.TextAlign.center,\n+                        ),\n+                        pw.Text(\n+                          'معلومات الصور',\n+                          style: pw.TextStyle(\n+                            color: PdfColors.black,\n+                            fontSize: 14,\n+                          ),\n+                          textAlign: pw.TextAlign.center,\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+\n+                  pw.SizedBox(height: 20),\n+\n+                  // Image Details\n+                  pw.Padding(\n+                    padding: const pw.EdgeInsets.all(16),\n+                    child: pw.Column(\n+                      children: [\n+                        _buildPDFInfoRow(\n+                          'Barcode: / الرمز الشريطي',\n+                          _getValue('barcode', '6285561000957'),\n+                        ),\n+                        pw.Divider(),\n+                        _buildPDFInfoRow(\n+                          'Created Date: / تاريخ الإنشاء',\n+                          _getValue('createdDate', '5/11/2025'),\n+                        ),\n+                        pw.Divider(),\n+                        _buildPDFInfoRow(\n+                          'Updated Date: / تاريخ التحديث',\n+                          _getValue('updatedDate', '5/11/2025'),\n+                        ),\n+                        pw.Divider(),\n+                        _buildPDFInfoRow(\n+                          'Domain: / النطاق',\n+                          _getValue('domain', 'dl.gs1ksa.org'),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+\n+                  pw.SizedBox(height: 20),\n+\n+                  // Footer\n+                  pw.Padding(\n+                    padding: const pw.EdgeInsets.all(16),\n+                    child: pw.Column(\n+                      children: [\n+                        pw.Text(\n+                          'Document ID: ${_getValue('documentId', 'cmajfobck005zasc3ka5nj8ps')}',\n+                          style: pw.TextStyle(fontSize: 12),\n+                          textAlign: pw.TextAlign.center,\n+                        ),\n+                        pw.Text(\n+                          'Generated on: ${_getValue('generatedOn', '6/26/2025, 12:16:00 PM')}',\n+                          style: pw.TextStyle(fontSize: 12),\n+                          textAlign: pw.TextAlign.center,\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                ],\n+              ),\n+            );\n+          },\n+        ),\n+      );\n+\n+      final directory = await getTemporaryDirectory();\n+      final fileName =\n+          'image_info_${DateTime.now().millisecondsSinceEpoch}.pdf';\n+      final file = File('${directory.path}/$fileName');\n+\n+      await file.writeAsBytes(await pdf.save());\n+\n+      // Share the PDF\n+      await Share.shareXFiles([XFile(file.path)],\n+          text: 'Image Information PDF');\n+    } catch (e) {\n+      print('Error generating PDF: $e');\n+    }\n+  }\n+\n+  pw.Widget _buildPDFInfoRow(String label, String value) {\n+    return pw.Padding(\n+      padding: const pw.EdgeInsets.symmetric(vertical: 4),\n+      child: pw.Row(\n+        mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,\n+        children: [\n+          pw.Expanded(\n+            flex: 2,\n+            child: pw.Text(\n+              label,\n+              style: pw.TextStyle(fontWeight: pw.FontWeight.bold),\n+            ),\n+          ),\n+          pw.Expanded(\n+            child: pw.Text(\n+              value,\n+              textAlign: pw.TextAlign.right,\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1750923360746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,13 @@\n+import 'dart:io';\n+import 'dart:typed_data';\n+import 'dart:ui' as pw;\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:path_provider/path_provider.dart';\n+import 'package:share_plus/share_plus.dart';\n \n class ImageInfoTab extends StatelessWidget {\n   final List<dynamic> imageInfo; // Replace with your actual image model type\n \n@@ -388,9 +396,9 @@\n     try {\n       RenderRepaintBoundary boundary =\n           _cardKey.currentContext!.findRenderObject() as RenderRepaintBoundary;\n \n-      ui.Image image = await boundary.toImage(pixelRatio: 3.0);\n+      pw.Image image = await boundary.toImage(pixelRatio: 3.0);\n       ByteData? byteData =\n           await image.toByteData(format: ui.ImageByteFormat.png);\n \n       if (byteData != null) {\n@@ -399,9 +407,9 @@\n         String fileExtension = format.toLowerCase();\n \n         // Convert to different formats using the image package\n         if (format.toLowerCase() != 'png') {\n-          img.Image? decodedImage = img.decodePng(pngBytes);\n+          img.image? decodedImage = img.decodePng(pngBytes);\n           if (decodedImage != null) {\n             switch (format.toLowerCase()) {\n               case 'jpg':\n               case 'jpeg':\n"
                },
                {
                    "date": 1750923387783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -407,9 +407,9 @@\n         String fileExtension = format.toLowerCase();\n \n         // Convert to different formats using the image package\n         if (format.toLowerCase() != 'png') {\n-          img.image? decodedImage = img.decodePng(pngBytes);\n+          img.Image? decodedImage = img.decodePng(pngBytes);\n           if (decodedImage != null) {\n             switch (format.toLowerCase()) {\n               case 'jpg':\n               case 'jpeg':\n"
                },
                {
                    "date": 1750923395408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import 'dart:io';\n import 'dart:typed_data';\n-import 'dart:ui' as pw;\n+import 'dart:ui';\n \n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n import 'package:flutter/rendering.dart';\n"
                },
                {
                    "date": 1750923410897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import 'package:flutter/material.dart';\n import 'package:flutter/rendering.dart';\n import 'package:path_provider/path_provider.dart';\n import 'package:share_plus/share_plus.dart';\n+import 'package:pdf/widgets.dart' as pw;\n \n class ImageInfoTab extends StatelessWidget {\n   final List<dynamic> imageInfo; // Replace with your actual image model type\n \n"
                },
                {
                    "date": 1750923429939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -397,9 +397,9 @@\n     try {\n       RenderRepaintBoundary boundary =\n           _cardKey.currentContext!.findRenderObject() as RenderRepaintBoundary;\n \n-      pw.Image image = await boundary.toImage(pixelRatio: 3.0);\n+      pw.Image image = (await boundary.toImage(pixelRatio: 3.0)) as pw.Image;\n       ByteData? byteData =\n           await image.toByteData(format: ui.ImageByteFormat.png);\n \n       if (byteData != null) {\n"
                },
                {
                    "date": 1750923439845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,13 @@\n import 'dart:io';\n import 'dart:typed_data';\n-import 'dart:ui';\n+import 'dart:ui' as pw;\n \n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n import 'package:flutter/rendering.dart';\n import 'package:path_provider/path_provider.dart';\n import 'package:share_plus/share_plus.dart';\n-import 'package:pdf/widgets.dart' as pw;\n \n class ImageInfoTab extends StatelessWidget {\n   final List<dynamic> imageInfo; // Replace with your actual image model type\n \n"
                },
                {
                    "date": 1750923470849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n import 'dart:io';\n import 'dart:typed_data';\n-import 'dart:ui' as pw;\n+import 'dart:ui' ;\n \n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n import 'package:flutter/rendering.dart';\n import 'package:path_provider/path_provider.dart';\n-import 'package:share_plus/share_plus.dart';\n+import 'package:share_plus/share_plus.dart' as pw;\n \n class ImageInfoTab extends StatelessWidget {\n   final List<dynamic> imageInfo; // Replace with your actual image model type\n \n"
                },
                {
                    "date": 1750923477611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,579 +0,0 @@\n-import 'dart:io';\n-import 'dart:typed_data';\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:path_provider/path_provider.dart';\n-import 'package:share_plus/share_plus.dart' as pw;\n-\n-class ImageInfoTab extends StatelessWidget {\n-  final List<dynamic> imageInfo; // Replace with your actual image model type\n-\n-  const ImageInfoTab({super.key, required this.imageInfo});\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    if (imageInfo.isEmpty) {\n-      return const Center(\n-        child: Text(\n-          'No image information available',\n-          style: TextStyle(fontSize: 16, color: Colors.grey),\n-        ),\n-      );\n-    }\n-\n-    return Column(\n-      children: imageInfo.map((image) => ImageCard(imageData: image)).toList(),\n-    );\n-  }\n-}\n-\n-class ImageCard extends StatelessWidget {\n-  final dynamic imageData; // Replace with your actual image model type\n-  final GlobalKey _cardKey = GlobalKey();\n-\n-  ImageCard({super.key, required this.imageData});\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Card(\n-      margin: const EdgeInsets.only(bottom: 16),\n-      elevation: 4,\n-      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\n-      child: Column(\n-        children: [\n-          // Card content for capture (without buttons)\n-          RepaintBoundary(\n-            key: _cardKey,\n-            child: Container(\n-              decoration: BoxDecoration(\n-                borderRadius: BorderRadius.circular(8),\n-                border: Border.all(color: Colors.black, width: 2),\n-                color: Colors.white,\n-              ),\n-              child: Column(\n-                crossAxisAlignment: CrossAxisAlignment.start,\n-                children: [\n-                  // Header Section\n-                  Container(\n-                    width: double.infinity,\n-                    padding: const EdgeInsets.all(16),\n-                    decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(6),\n-                        topRight: Radius.circular(6),\n-                      ),\n-                    ),\n-                    child: Column(\n-                      children: [\n-                        const Text(\n-                          'Images Information',\n-                          style: TextStyle(\n-                            color: Colors.black,\n-                            fontSize: 18,\n-                            fontWeight: FontWeight.bold,\n-                          ),\n-                          textAlign: TextAlign.center,\n-                        ),\n-                        const Text(\n-                          'معلومات الصور',\n-                          style: TextStyle(\n-                            color: Colors.black,\n-                            fontSize: 14,\n-                          ),\n-                          textAlign: TextAlign.center,\n-                        ),\n-                        const SizedBox(height: 16),\n-                        // Ask AI Button\n-                        Container(\n-                          padding: const EdgeInsets.symmetric(\n-                              horizontal: 12, vertical: 6),\n-                          decoration: BoxDecoration(\n-                            color: Colors.grey[200],\n-                            borderRadius: BorderRadius.circular(4),\n-                          ),\n-                          child: const Text(\n-                            'Ask AI',\n-                            style: TextStyle(\n-                              fontSize: 12,\n-                              fontWeight: FontWeight.w500,\n-                            ),\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-\n-                  // Thick divider\n-                  Container(\n-                    height: 4,\n-                    color: Colors.black,\n-                  ),\n-\n-                  // Image Display Section\n-                  Container(\n-                    width: double.infinity,\n-                    padding: const EdgeInsets.all(16),\n-                    child: Container(\n-                      padding: const EdgeInsets.all(16),\n-                      decoration: BoxDecoration(\n-                        color: Colors.grey[50],\n-                        borderRadius: BorderRadius.circular(8),\n-                        border: Border.all(\n-                          color: Colors.grey.withOpacity(0.3),\n-                          width: 2,\n-                          style: BorderStyle.solid,\n-                        ),\n-                      ),\n-                      child: Column(\n-                        children: [\n-                          // Product Image\n-                          Container(\n-                            height: 200,\n-                            width: double.infinity,\n-                            decoration: BoxDecoration(\n-                              borderRadius: BorderRadius.circular(8),\n-                              color: Colors.white,\n-                            ),\n-                            child: _buildProductImage(),\n-                          ),\n-                          const SizedBox(height: 16),\n-                          // View Full Image Button\n-                          Container(\n-                            width: double.infinity,\n-                            padding: const EdgeInsets.symmetric(\n-                                vertical: 12, horizontal: 16),\n-                            decoration: BoxDecoration(\n-                              color: Colors.green[600],\n-                              borderRadius: BorderRadius.circular(4),\n-                            ),\n-                            child: Row(\n-                              mainAxisAlignment: MainAxisAlignment.center,\n-                              children: [\n-                                const Icon(\n-                                  Icons.download,\n-                                  color: Colors.white,\n-                                  size: 16,\n-                                ),\n-                                const SizedBox(width: 8),\n-                                const Text(\n-                                  'VIEW FULL IMAGE / عرض الصورة كاملة',\n-                                  style: TextStyle(\n-                                    color: Colors.white,\n-                                    fontWeight: FontWeight.bold,\n-                                    fontSize: 12,\n-                                  ),\n-                                ),\n-                              ],\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-\n-                  // Image Details Section\n-                  Padding(\n-                    padding: const EdgeInsets.all(16),\n-                    child: Column(\n-                      children: [\n-                        _buildInfoRow(\n-                          'Barcode:',\n-                          'الرمز الشريطي /',\n-                          _getValue('barcode', '6285561000957'),\n-                          isRightAligned: true,\n-                        ),\n-                        const Divider(color: Colors.grey),\n-                        _buildInfoRow(\n-                          'Created Date:',\n-                          'تاريخ الإنشاء /',\n-                          _getValue('createdDate', '5/11/2025'),\n-                          isRightAligned: true,\n-                        ),\n-                        const Divider(color: Colors.grey),\n-                        _buildInfoRow(\n-                          'Updated Date:',\n-                          'تاريخ التحديث /',\n-                          _getValue('updatedDate', '5/11/2025'),\n-                          isRightAligned: true,\n-                        ),\n-                        const Divider(color: Colors.grey),\n-                        _buildInfoRow(\n-                          'Domain:',\n-                          'النطاق /',\n-                          _getValue('domain', 'dl.gs1ksa.org'),\n-                          isRightAligned: true,\n-                          isLink: true,\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-\n-                  const SizedBox(height: 16),\n-\n-                  // Footer Info\n-                  Padding(\n-                    padding: const EdgeInsets.all(16),\n-                    child: Column(\n-                      children: [\n-                        Text(\n-                          'Document ID: ${_getValue('documentId', 'cmajfobck005zasc3ka5nj8ps')}',\n-                          style:\n-                              const TextStyle(fontSize: 12, color: Colors.grey),\n-                          textAlign: TextAlign.center,\n-                        ),\n-                        Text(\n-                          'Generated on: ${_getValue('generatedOn', '6/26/2025, 12:16:00 PM')}',\n-                          style:\n-                              const TextStyle(fontSize: 12, color: Colors.grey),\n-                          textAlign: TextAlign.center,\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                ],\n-              ),\n-            ),\n-          ),\n-\n-          // Action Buttons (outside RepaintBoundary, so they won't be captured)\n-          Padding(\n-            padding: const EdgeInsets.all(12),\n-            child: Wrap(\n-              spacing: 8,\n-              runSpacing: 8,\n-              alignment: WrapAlignment.center,\n-              children: [\n-                _buildActionButton(\n-                    'PNG', Colors.blue[900]!, () => _downloadAs('png')),\n-                _buildActionButton(\n-                    'JPG', Colors.blue[900]!, () => _downloadAs('jpg')),\n-                _buildActionButton(\n-                    'PDF', Colors.blue[900]!, () => _downloadAs('pdf')),\n-              ],\n-            ),\n-          ),\n-        ],\n-      ),\n-    );\n-  }\n-\n-  Widget _buildProductImage() {\n-    final imageUrl = _getValue('imageUrl', '');\n-\n-    if (imageUrl.isNotEmpty) {\n-      return CachedNetworkImage(\n-        imageUrl: imageUrl,\n-        fit: BoxFit.contain,\n-        placeholder: (context, url) => const Center(\n-          child: CircularProgressIndicator(),\n-        ),\n-        errorWidget: (context, url, error) => _buildPlaceholderImage(),\n-      );\n-    }\n-\n-    return _buildPlaceholderImage();\n-  }\n-\n-  Widget _buildPlaceholderImage() {\n-    return Container(\n-      decoration: BoxDecoration(\n-        color: Colors.grey[100],\n-        borderRadius: BorderRadius.circular(8),\n-      ),\n-      child: const Center(\n-        child: Column(\n-          mainAxisAlignment: MainAxisAlignment.center,\n-          children: [\n-            Icon(\n-              Icons.image,\n-              size: 64,\n-              color: Colors.grey,\n-            ),\n-            SizedBox(height: 8),\n-            Text(\n-              'Product Image',\n-              style: TextStyle(\n-                color: Colors.grey,\n-                fontSize: 14,\n-              ),\n-            ),\n-          ],\n-        ),\n-      ),\n-    );\n-  }\n-\n-  Widget _buildInfoRow(String englishLabel, String arabicLabel, String value,\n-      {bool isRightAligned = false, bool isLink = false}) {\n-    return Padding(\n-      padding: const EdgeInsets.symmetric(vertical: 8),\n-      child: Row(\n-        crossAxisAlignment: CrossAxisAlignment.start,\n-        children: [\n-          Expanded(\n-            flex: 2,\n-            child: RichText(\n-              text: TextSpan(\n-                style: const TextStyle(\n-                  fontSize: 14,\n-                  color: Colors.black,\n-                ),\n-                children: [\n-                  TextSpan(\n-                    text: arabicLabel,\n-                    style: const TextStyle(fontWeight: FontWeight.w500),\n-                  ),\n-                  TextSpan(\n-                    text: ' $englishLabel',\n-                    style: const TextStyle(fontWeight: FontWeight.w500),\n-                  ),\n-                ],\n-              ),\n-            ),\n-          ),\n-          Expanded(\n-            flex: 3,\n-            child: Text(\n-              value,\n-              style: TextStyle(\n-                fontSize: 14,\n-                fontWeight: FontWeight.w500,\n-                color: isLink ? Colors.blue : Colors.black,\n-                decoration: isLink ? TextDecoration.underline : null,\n-              ),\n-              textAlign: isRightAligned ? TextAlign.right : TextAlign.left,\n-            ),\n-          ),\n-        ],\n-      ),\n-    );\n-  }\n-\n-  Widget _buildActionButton(String text, Color color, VoidCallback onPressed) {\n-    return GestureDetector(\n-      onTap: onPressed,\n-      child: Container(\n-        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n-        decoration: BoxDecoration(\n-          color: color,\n-          borderRadius: BorderRadius.circular(4),\n-        ),\n-        child: Text(\n-          text,\n-          style: const TextStyle(\n-            color: Colors.white,\n-            fontWeight: FontWeight.bold,\n-            fontSize: 12,\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  String _getValue(String key, String defaultValue) {\n-    // Replace this with your actual data extraction logic\n-    // Example: return imageData[key]?.toString() ?? defaultValue;\n-    return defaultValue;\n-  }\n-\n-  Future<void> _downloadAs(String format) async {\n-    try {\n-      if (format == 'pdf') {\n-        await _generatePDF();\n-      } else {\n-        await _captureAndSave(format);\n-      }\n-    } catch (e) {\n-      print('Error downloading as $format: $e');\n-    }\n-  }\n-\n-  Future<void> _captureAndSave(String format) async {\n-    try {\n-      RenderRepaintBoundary boundary =\n-          _cardKey.currentContext!.findRenderObject() as RenderRepaintBoundary;\n-\n-      pw.Image image = (await boundary.toImage(pixelRatio: 3.0)) as pw.Image;\n-      ByteData? byteData =\n-          await image.toByteData(format: ui.ImageByteFormat.png);\n-\n-      if (byteData != null) {\n-        Uint8List pngBytes = byteData.buffer.asUint8List();\n-        Uint8List finalBytes = pngBytes;\n-        String fileExtension = format.toLowerCase();\n-\n-        // Convert to different formats using the image package\n-        if (format.toLowerCase() != 'png') {\n-          img.Image? decodedImage = img.decodePng(pngBytes);\n-          if (decodedImage != null) {\n-            switch (format.toLowerCase()) {\n-              case 'jpg':\n-              case 'jpeg':\n-                finalBytes = Uint8List.fromList(\n-                    img.encodeJpg(decodedImage, quality: 95));\n-                fileExtension = 'jpg';\n-                break;\n-              default:\n-                finalBytes = pngBytes;\n-                fileExtension = 'png';\n-            }\n-          }\n-        }\n-\n-        final directory = await getTemporaryDirectory();\n-        final fileName =\n-            'image_info_${DateTime.now().millisecondsSinceEpoch}.$fileExtension';\n-        final file = File('${directory.path}/$fileName');\n-\n-        await file.writeAsBytes(finalBytes);\n-\n-        // Share the file\n-        await Share.shareXFiles([XFile(file.path)], text: 'Image Information');\n-      }\n-    } catch (e) {\n-      print('Error capturing image: $e');\n-    }\n-  }\n-\n-  Future<void> _generatePDF() async {\n-    try {\n-      final pdf = pw.Document();\n-\n-      pdf.addPage(\n-        pw.Page(\n-          pageFormat: PdfPageFormat.a4,\n-          build: (pw.Context context) {\n-            return pw.Container(\n-              decoration: pw.BoxDecoration(\n-                border: pw.Border.all(color: PdfColors.black, width: 2),\n-              ),\n-              child: pw.Column(\n-                crossAxisAlignment: pw.CrossAxisAlignment.start,\n-                children: [\n-                  // Header\n-                  pw.Container(\n-                    width: double.infinity,\n-                    padding: const pw.EdgeInsets.all(16),\n-                    child: pw.Column(\n-                      children: [\n-                        pw.Text(\n-                          'Images Information',\n-                          style: pw.TextStyle(\n-                            color: PdfColors.black,\n-                            fontSize: 18,\n-                            fontWeight: pw.FontWeight.bold,\n-                          ),\n-                          textAlign: pw.TextAlign.center,\n-                        ),\n-                        pw.Text(\n-                          'معلومات الصور',\n-                          style: pw.TextStyle(\n-                            color: PdfColors.black,\n-                            fontSize: 14,\n-                          ),\n-                          textAlign: pw.TextAlign.center,\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-\n-                  pw.SizedBox(height: 20),\n-\n-                  // Image Details\n-                  pw.Padding(\n-                    padding: const pw.EdgeInsets.all(16),\n-                    child: pw.Column(\n-                      children: [\n-                        _buildPDFInfoRow(\n-                          'Barcode: / الرمز الشريطي',\n-                          _getValue('barcode', '6285561000957'),\n-                        ),\n-                        pw.Divider(),\n-                        _buildPDFInfoRow(\n-                          'Created Date: / تاريخ الإنشاء',\n-                          _getValue('createdDate', '5/11/2025'),\n-                        ),\n-                        pw.Divider(),\n-                        _buildPDFInfoRow(\n-                          'Updated Date: / تاريخ التحديث',\n-                          _getValue('updatedDate', '5/11/2025'),\n-                        ),\n-                        pw.Divider(),\n-                        _buildPDFInfoRow(\n-                          'Domain: / النطاق',\n-                          _getValue('domain', 'dl.gs1ksa.org'),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-\n-                  pw.SizedBox(height: 20),\n-\n-                  // Footer\n-                  pw.Padding(\n-                    padding: const pw.EdgeInsets.all(16),\n-                    child: pw.Column(\n-                      children: [\n-                        pw.Text(\n-                          'Document ID: ${_getValue('documentId', 'cmajfobck005zasc3ka5nj8ps')}',\n-                          style: pw.TextStyle(fontSize: 12),\n-                          textAlign: pw.TextAlign.center,\n-                        ),\n-                        pw.Text(\n-                          'Generated on: ${_getValue('generatedOn', '6/26/2025, 12:16:00 PM')}',\n-                          style: pw.TextStyle(fontSize: 12),\n-                          textAlign: pw.TextAlign.center,\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                ],\n-              ),\n-            );\n-          },\n-        ),\n-      );\n-\n-      final directory = await getTemporaryDirectory();\n-      final fileName =\n-          'image_info_${DateTime.now().millisecondsSinceEpoch}.pdf';\n-      final file = File('${directory.path}/$fileName');\n-\n-      await file.writeAsBytes(await pdf.save());\n-\n-      // Share the PDF\n-      await Share.shareXFiles([XFile(file.path)],\n-          text: 'Image Information PDF');\n-    } catch (e) {\n-      print('Error generating PDF: $e');\n-    }\n-  }\n-\n-  pw.Widget _buildPDFInfoRow(String label, String value) {\n-    return pw.Padding(\n-      padding: const pw.EdgeInsets.symmetric(vertical: 4),\n-      child: pw.Row(\n-        mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,\n-        children: [\n-          pw.Expanded(\n-            flex: 2,\n-            child: pw.Text(\n-              label,\n-              style: pw.TextStyle(fontWeight: pw.FontWeight.bold),\n-            ),\n-          ),\n-          pw.Expanded(\n-            child: pw.Text(\n-              value,\n-              textAlign: pw.TextAlign.right,\n-            ),\n-          ),\n-        ],\n-      ),\n-    );\n-  }\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1750923527676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,4 @@\n-import 'dart:io';\n-import 'dart:typed_data';\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:path_provider/path_provider.dart';\n-import 'package:share_plus/share_plus.dart' as pw;\n-\n class ImageInfoTab extends StatelessWidget {\n   final List<dynamic> imageInfo; // Replace with your actual image model type\n \n   const ImageInfoTab({super.key, required this.imageInfo});\n@@ -396,9 +386,9 @@\n     try {\n       RenderRepaintBoundary boundary =\n           _cardKey.currentContext!.findRenderObject() as RenderRepaintBoundary;\n \n-      pw.Image image = (await boundary.toImage(pixelRatio: 3.0)) as pw.Image;\n+      ui.Image image = await boundary.toImage(pixelRatio: 3.0);\n       ByteData? byteData =\n           await image.toByteData(format: ui.ImageByteFormat.png);\n \n       if (byteData != null) {\n"
                }
            ],
            "date": 1750923237530,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\n\nclass ImageInfoTab extends StatelessWidget {\n  final List<dynamic> imageInfo; // Replace with your actual image model type\n\n  const ImageInfoTab({super.key, required this.imageInfo});\n\n  @override\n  Widget build(BuildContext context) {\n    if (imageInfo.isEmpty) {\n      return const Center(\n        child: Text(\n          'No image information available',\n          style: TextStyle(fontSize: 16, color: Colors.grey),\n        ),\n      );\n    }\n\n    return Column(\n      children: imageInfo.map((image) => ImageCard(imageData: image)).toList(),\n    );\n  }\n}\n\nclass ImageCard extends StatelessWidget {\n  final dynamic imageData; // Replace with your actual image model type\n  final GlobalKey _cardKey = GlobalKey();\n\n  ImageCard({super.key, required this.imageData});\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      margin: const EdgeInsets.only(bottom: 16),\n      elevation: 4,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\n      child: Column(\n        children: [\n          // Card content for capture (without buttons)\n          RepaintBoundary(\n            key: _cardKey,\n            child: Container(\n              decoration: BoxDecoration(\n                borderRadius: BorderRadius.circular(8),\n                border: Border.all(color: Colors.black, width: 2),\n                color: Colors.white,\n              ),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  // Header Section\n                  Container(\n                    width: double.infinity,\n                    padding: const EdgeInsets.all(16),\n                    decoration: const BoxDecoration(\n                      color: Colors.white,\n                      borderRadius: BorderRadius.only(\n                        topLeft: Radius.circular(6),\n                        topRight: Radius.circular(6),\n                      ),\n                    ),\n                    child: Column(\n                      children: [\n                        const Text(\n                          'Images Information',\n                          style: TextStyle(\n                            color: Colors.black,\n                            fontSize: 18,\n                            fontWeight: FontWeight.bold,\n                          ),\n                          textAlign: TextAlign.center,\n                        ),\n                        const Text(\n                          'معلومات الصور',\n                          style: TextStyle(\n                            color: Colors.black,\n                            fontSize: 14,\n                          ),\n                          textAlign: TextAlign.center,\n                        ),\n                        const SizedBox(height: 16),\n                        // Ask AI Button\n                        Container(\n                          padding: const EdgeInsets.symmetric(\n                              horizontal: 12, vertical: 6),\n                          decoration: BoxDecoration(\n                            color: Colors.grey[200],\n                            borderRadius: BorderRadius.circular(4),\n                          ),\n                          child: const Text(\n                            'Ask AI',\n                            style: TextStyle(\n                              fontSize: 12,\n                              fontWeight: FontWeight.w500,\n                            ),\n                          ),\n                        ),\n                      ],\n                    ),\n                  ),\n\n                  // Thick divider\n                  Container(\n                    height: 4,\n                    color: Colors.black,\n                  ),\n\n                  // Image Display Section\n                  Container(\n                    width: double.infinity,\n                    padding: const EdgeInsets.all(16),\n                    child: Container(\n                      padding: const EdgeInsets.all(16),\n                      decoration: BoxDecoration(\n                        color: Colors.grey[50],\n                        borderRadius: BorderRadius.circular(8),\n                        border: Border.all(\n                          color: Colors.grey.withOpacity(0.3),\n                          width: 2,\n                          style: BorderStyle.solid,\n                        ),\n                      ),\n                      child: Column(\n                        children: [\n                          // Product Image\n                          Container(\n                            height: 200,\n                            width: double.infinity,\n                            decoration: BoxDecoration(\n                              borderRadius: BorderRadius.circular(8),\n                              color: Colors.white,\n                            ),\n                            child: _buildProductImage(),\n                          ),\n                          const SizedBox(height: 16),\n                          // View Full Image Button\n                          Container(\n                            width: double.infinity,\n                            padding: const EdgeInsets.symmetric(\n                                vertical: 12, horizontal: 16),\n                            decoration: BoxDecoration(\n                              color: Colors.green[600],\n                              borderRadius: BorderRadius.circular(4),\n                            ),\n                            child: Row(\n                              mainAxisAlignment: MainAxisAlignment.center,\n                              children: [\n                                const Icon(\n                                  Icons.download,\n                                  color: Colors.white,\n                                  size: 16,\n                                ),\n                                const SizedBox(width: 8),\n                                const Text(\n                                  'VIEW FULL IMAGE / عرض الصورة كاملة',\n                                  style: TextStyle(\n                                    color: Colors.white,\n                                    fontWeight: FontWeight.bold,\n                                    fontSize: 12,\n                                  ),\n                                ),\n                              ],\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n\n                  // Image Details Section\n                  Padding(\n                    padding: const EdgeInsets.all(16),\n                    child: Column(\n                      children: [\n                        _buildInfoRow(\n                          'Barcode:',\n                          'الرمز الشريطي /',\n                          _getValue('barcode', '6285561000957'),\n                          isRightAligned: true,\n                        ),\n                        const Divider(color: Colors.grey),\n                        _buildInfoRow(\n                          'Created Date:',\n                          'تاريخ الإنشاء /',\n                          _getValue('createdDate', '5/11/2025'),\n                          isRightAligned: true,\n                        ),\n                        const Divider(color: Colors.grey),\n                        _buildInfoRow(\n                          'Updated Date:',\n                          'تاريخ التحديث /',\n                          _getValue('updatedDate', '5/11/2025'),\n                          isRightAligned: true,\n                        ),\n                        const Divider(color: Colors.grey),\n                        _buildInfoRow(\n                          'Domain:',\n                          'النطاق /',\n                          _getValue('domain', 'dl.gs1ksa.org'),\n                          isRightAligned: true,\n                          isLink: true,\n                        ),\n                      ],\n                    ),\n                  ),\n\n                  const SizedBox(height: 16),\n\n                  // Footer Info\n                  Padding(\n                    padding: const EdgeInsets.all(16),\n                    child: Column(\n                      children: [\n                        Text(\n                          'Document ID: ${_getValue('documentId', 'cmajfobck005zasc3ka5nj8ps')}',\n                          style:\n                              const TextStyle(fontSize: 12, color: Colors.grey),\n                          textAlign: TextAlign.center,\n                        ),\n                        Text(\n                          'Generated on: ${_getValue('generatedOn', '6/26/2025, 12:16:00 PM')}',\n                          style:\n                              const TextStyle(fontSize: 12, color: Colors.grey),\n                          textAlign: TextAlign.center,\n                        ),\n                      ],\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n\n          // Action Buttons (outside RepaintBoundary, so they won't be captured)\n          Padding(\n            padding: const EdgeInsets.all(12),\n            child: Wrap(\n              spacing: 8,\n              runSpacing: 8,\n              alignment: WrapAlignment.center,\n              children: [\n                _buildActionButton(\n                    'PNG', Colors.blue[900]!, () => _downloadAs('png')),\n                _buildActionButton(\n                    'JPG', Colors.blue[900]!, () => _downloadAs('jpg')),\n                _buildActionButton(\n                    'PDF', Colors.blue[900]!, () => _downloadAs('pdf')),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }"
        }
    ]
}