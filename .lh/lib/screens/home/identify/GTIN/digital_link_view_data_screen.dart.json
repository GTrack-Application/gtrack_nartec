{
    "sourceFile": "lib/screens/home/identify/GTIN/digital_link_view_data_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1750754640708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750754647867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -618,11 +618,12 @@\n                             color: AppColors.green,\n                           ),\n                         ),\n                         const SizedBox(height: 12),\n-                        _retailerDetailRow(\"Product SKU\", retailer.productSku),\n-                        _retailerDetailRow(\"Barcode\", retailer.barcode),\n-                        _retailerDetailRow(\"Domain\", retailer.domainName),\n+                        _retailerDetailRow(\n+                            \"Product SKU\", retailer.productSku ?? \"\"),\n+                        _retailerDetailRow(\"Barcode\", retailer.barcode ?? \"\"),\n+                        _retailerDetailRow(\"Domain\", retailer.domainName ?? \"\"),\n                       ],\n                     ),\n                   ),\n                   const SizedBox(height: 12),\n"
                },
                {
                    "date": 1750754671094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -645,20 +645,8 @@\n                             color: AppColors.pink,\n                           ),\n                         ),\n                         const SizedBox(height: 12),\n-                        _retailerDetailRow(\n-                          \"Created\",\n-                          _formatDateTime(retailer.createdAt),\n-                        ),\n-                        _retailerDetailRow(\n-                          \"Last Updated\",\n-                          _formatDateTime(retailer.updatedAt),\n-                        ),\n-                        _retailerDetailRow(\n-                          \"Brand Owner ID\",\n-                          retailer.brandOwnerId,\n-                        ),\n                       ],\n                     ),\n                   ),\n                 ],\n"
                },
                {
                    "date": 1750754711425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n     gtinCubit = GtinCubit.get(context);\n     // Updated to call with page 1 and limit 100 by default\n     gtinCubit.getDigitalLinkViewData(widget.barcode);\n     gtinCubit.getReviews(widget.barcode);\n+    gtinCubit.getRetailersInformation(widget.barcode);\n     gtinCubit.getNutritionFacts(widget.barcode);\n     gtinCubit.getAllergenInformation(widget.barcode);\n   }\n \n"
                },
                {
                    "date": 1750754977149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -554,8 +554,9 @@\n           itemCount: gtinCubit.retailers.length,\n           padding: const EdgeInsets.symmetric(vertical: 16),\n           itemBuilder: (context, index) {\n             final retailer = gtinCubit.retailers[index];\n+            print(retailer.runtimeType);\n             return Container(\n               padding: const EdgeInsets.all(16),\n               margin: const EdgeInsets.symmetric(vertical: 8),\n               decoration: BoxDecoration(\n"
                },
                {
                    "date": 1750755002146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -554,9 +554,8 @@\n           itemCount: gtinCubit.retailers.length,\n           padding: const EdgeInsets.symmetric(vertical: 16),\n           itemBuilder: (context, index) {\n             final retailer = gtinCubit.retailers[index];\n-            print(retailer.runtimeType);\n             return Container(\n               padding: const EdgeInsets.all(16),\n               margin: const EdgeInsets.symmetric(vertical: 8),\n               decoration: BoxDecoration(\n@@ -646,9 +645,8 @@\n                             fontWeight: FontWeight.w600,\n                             color: AppColors.pink,\n                           ),\n                         ),\n-                        const SizedBox(height: 12),\n                       ],\n                     ),\n                   ),\n                 ],\n"
                },
                {
                    "date": 1750761650702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -554,104 +554,25 @@\n           itemCount: gtinCubit.retailers.length,\n           padding: const EdgeInsets.symmetric(vertical: 16),\n           itemBuilder: (context, index) {\n             final retailer = gtinCubit.retailers[index];\n+            // display images\n             return Container(\n               padding: const EdgeInsets.all(16),\n               margin: const EdgeInsets.symmetric(vertical: 8),\n               decoration: BoxDecoration(\n                 borderRadius: BorderRadius.circular(12),\n-                color: Colors.white,\n+                color: AppColors.white,\n                 boxShadow: [\n                   BoxShadow(\n-                    color: Colors.grey.withValues(alpha: 0.1),\n+                    color: AppColors.grey.withValues(alpha: 0.1),\n                     spreadRadius: 1,\n                     blurRadius: 4,\n                     offset: const Offset(0, 2),\n                   ),\n                 ],\n               ),\n-              child: Column(\n-                crossAxisAlignment: CrossAxisAlignment.start,\n-                children: [\n-                  // Store Information Section\n-                  Container(\n-                    padding: const EdgeInsets.all(12),\n-                    decoration: BoxDecoration(\n-                      color: AppColors.skyBlue.withValues(alpha: 0.1),\n-                      borderRadius: BorderRadius.circular(8),\n-                    ),\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-                        Text(\n-                          \"Store Information\",\n-                          style: TextStyle(\n-                            fontSize: 16,\n-                            fontWeight: FontWeight.w600,\n-                            color: AppColors.skyBlue,\n-                          ),\n-                        ),\n-                        const SizedBox(height: 12),\n-                        _retailerDetailRow(\n-                            \"Store Name\", retailer.storeName ?? \"\"),\n-                        _retailerDetailRow(\"Store ID\", retailer.storeId ?? \"\"),\n-                        _retailerDetailRow(\n-                            \"Store GLN\", retailer.storeGln ?? \"\"),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(height: 12),\n-                  // Product Details Section\n-                  Container(\n-                    padding: const EdgeInsets.all(12),\n-                    decoration: BoxDecoration(\n-                      color: AppColors.green.withValues(alpha: 0.1),\n-                      borderRadius: BorderRadius.circular(8),\n-                    ),\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-                        const Text(\n-                          \"Product Details\",\n-                          style: TextStyle(\n-                            fontSize: 16,\n-                            fontWeight: FontWeight.w600,\n-                            color: AppColors.green,\n-                          ),\n-                        ),\n-                        const SizedBox(height: 12),\n-                        _retailerDetailRow(\n-                            \"Product SKU\", retailer.productSku ?? \"\"),\n-                        _retailerDetailRow(\"Barcode\", retailer.barcode ?? \"\"),\n-                        _retailerDetailRow(\"Domain\", retailer.domainName ?? \"\"),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(height: 12),\n-                  // Additional Information Section\n-                  Container(\n-                    padding: const EdgeInsets.all(12),\n-                    decoration: BoxDecoration(\n-                      color: AppColors.pink.withValues(alpha: 0.1),\n-                      borderRadius: BorderRadius.circular(8),\n-                    ),\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-                        const Text(\n-                          \"Additional Information\",\n-                          style: TextStyle(\n-                            fontSize: 16,\n-                            fontWeight: FontWeight.w600,\n-                            color: AppColors.pink,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                ],\n-              ),\n+              child: CachedNetworkImage(imageUrl: retailer.)\n             );\n           },\n         ),\n       ],\n"
                },
                {
                    "date": 1750761669747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -556,24 +556,23 @@\n           itemBuilder: (context, index) {\n             final retailer = gtinCubit.retailers[index];\n             // display images\n             return Container(\n-              padding: const EdgeInsets.all(16),\n-              margin: const EdgeInsets.symmetric(vertical: 8),\n-              decoration: BoxDecoration(\n-                borderRadius: BorderRadius.circular(12),\n-                color: AppColors.white,\n-                boxShadow: [\n-                  BoxShadow(\n-                    color: AppColors.grey.withValues(alpha: 0.1),\n-                    spreadRadius: 1,\n-                    blurRadius: 4,\n-                    offset: const Offset(0, 2),\n-                  ),\n-                ],\n-              ),\n-              child: CachedNetworkImage(imageUrl: retailer.)\n-            );\n+                padding: const EdgeInsets.all(16),\n+                margin: const EdgeInsets.symmetric(vertical: 8),\n+                decoration: BoxDecoration(\n+                  borderRadius: BorderRadius.circular(12),\n+                  color: AppColors.white,\n+                  boxShadow: [\n+                    BoxShadow(\n+                      color: AppColors.grey.withValues(alpha: 0.1),\n+                      spreadRadius: 1,\n+                      blurRadius: 4,\n+                      offset: const Offset(0, 2),\n+                    ),\n+                  ],\n+                ),\n+                child: CachedNetworkImage(imageUrl: retailer.logo ?? \"\"));\n           },\n         ),\n       ],\n     );\n"
                },
                {
                    "date": 1750761728748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -570,9 +570,17 @@\n                       offset: const Offset(0, 2),\n                     ),\n                   ],\n                 ),\n-                child: CachedNetworkImage(imageUrl: retailer.logo ?? \"\"));\n+                child: CachedNetworkImage(\n+                  imageUrl: \"${AppUrls.upcHub}/${retailer.logo}\",\n+                  placeholder: (context, url) =>\n+                      const Center(child: CircularProgressIndicator()),\n+                  errorWidget: (context, url, error) => const Icon(Icons.error),\n+                  fit: BoxFit.cover,\n+                  height: 150,\n+                  width: double.infinity,\n+                ));\n           },\n         ),\n       ],\n     );\n"
                },
                {
                    "date": 1750761752524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1743 @@\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_bloc/flutter_bloc.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_cubit.dart';\n+import 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\n+import 'package:gtrack_nartec/constants/app_urls.dart';\n+import 'package:gtrack_nartec/global/common/colors/app_colors.dart';\n+import 'package:gtrack_nartec/global/common/utils/app_navigator.dart';\n+import 'package:gtrack_nartec/global/utils/average_rating.dart';\n+import 'package:gtrack_nartec/global/widgets/buttons/primary_button.dart';\n+import 'package:gtrack_nartec/global/widgets/card/gtin_card.dart';\n+import 'package:gtrack_nartec/global/widgets/pdf/pdf_viewer.dart';\n+import 'package:gtrack_nartec/global/widgets/video/video_player_widget.dart';\n+import 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\n+import 'package:gtrack_nartec/screens/home/identify/GTIN/digital_link_view_reviews_screen.dart';\n+import 'package:gtrack_nartec/screens/home/identify/GTIN/widget/allergen_tab.dart';\n+import 'package:gtrack_nartec/screens/home/identify/GTIN/widget/nutrition_facts_tab.dart';\n+import 'package:url_launcher/url_launcher.dart';\n+\n+class DigitalLinkViewDataScreen extends StatefulWidget {\n+  const DigitalLinkViewDataScreen(\n+      {super.key, required this.barcode, required this.gtin});\n+  final String barcode;\n+  final GTIN_Model gtin;\n+\n+  @override\n+  State<DigitalLinkViewDataScreen> createState() =>\n+      _DigitalLinkViewDataScreenState();\n+}\n+\n+class _DigitalLinkViewDataScreenState extends State<DigitalLinkViewDataScreen>\n+    with SingleTickerProviderStateMixin {\n+  late TabController _tabController;\n+  late GtinCubit gtinCubit;\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+    _tabController = TabController(length: 3, vsync: this);\n+    gtinCubit = GtinCubit.get(context);\n+    // Updated to call with page 1 and limit 100 by default\n+    gtinCubit.getDigitalLinkViewData(widget.barcode);\n+    gtinCubit.getReviews(widget.barcode);\n+    gtinCubit.getRetailersInformation(widget.barcode);\n+    gtinCubit.getNutritionFacts(widget.barcode);\n+    gtinCubit.getAllergenInformation(widget.barcode);\n+  }\n+\n+  @override\n+  void dispose() {\n+    _tabController.dispose();\n+    super.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        title: const Text('Product Details'),\n+        backgroundColor: AppColors.skyBlue,\n+      ),\n+      body: BlocBuilder<GtinCubit, GtinState>(\n+        bloc: gtinCubit,\n+        builder: (context, state) {\n+          return Column(\n+            children: [\n+              // Tab Bar\n+              Container(\n+                decoration: BoxDecoration(\n+                  color: AppColors.white,\n+                  boxShadow: [\n+                    BoxShadow(\n+                      color: AppColors.grey.withValues(alpha: 0.2),\n+                      spreadRadius: 1,\n+                      blurRadius: 3,\n+                      offset: const Offset(0, 2),\n+                    ),\n+                  ],\n+                ),\n+                child: TabBar(\n+                  controller: _tabController,\n+                  isScrollable: true,\n+                  labelColor: AppColors.skyBlue,\n+                  unselectedLabelColor: AppColors.grey,\n+                  indicatorColor: AppColors.skyBlue,\n+                  indicatorWeight: 3,\n+                  labelStyle: const TextStyle(fontWeight: FontWeight.bold),\n+                  tabs: const [\n+                    Tab(text: 'Overview'),\n+                    Tab(text: 'Details'),\n+                    Tab(text: 'Sustainability'),\n+                  ],\n+                ),\n+              ),\n+\n+              // Tab Bar View Content\n+              Expanded(\n+                child: TabBarView(\n+                  controller: _tabController,\n+                  children: [\n+                    // Overview Tab\n+                    _buildOverviewTab(),\n+\n+                    // Details Tab\n+                    _buildDetailsTab(),\n+\n+                    // Sustainability Tab\n+                    _buildSustainabilityTab(),\n+                  ],\n+                ),\n+              ),\n+            ],\n+          );\n+        },\n+      ),\n+    );\n+  }\n+\n+  Widget _buildOverviewTab() {\n+    return SingleChildScrollView(\n+      padding: const EdgeInsets.all(16),\n+      child: Column(\n+        crossAxisAlignment: CrossAxisAlignment.start,\n+        spacing: 16,\n+        children: [\n+          // Product Hero Section\n+          GtinProductCard(product: widget.gtin),\n+\n+          // Quick Info Cards\n+          _buildQuickInfoCards(),\n+\n+          // Reviews Section\n+          _buildReviewsSection(),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  Widget _buildQuickInfoCards() {\n+    return GridView.count(\n+      crossAxisCount: 2,\n+      shrinkWrap: true,\n+      physics: const NeverScrollableScrollPhysics(),\n+      mainAxisSpacing: 12,\n+      crossAxisSpacing: 12,\n+      childAspectRatio: 1.5,\n+      children: [\n+        _infoCard(\n+          'Allergens',\n+          '${gtinCubit.allergens.length} items',\n+          Icons.warning_amber_rounded,\n+          AppColors.gold,\n+        ),\n+        _infoCard(\n+          'Ingredients',\n+          '${gtinCubit.ingredients.length} items',\n+          Icons.list_alt,\n+          AppColors.green,\n+        ),\n+        _infoCard(\n+          'Images',\n+          '${gtinCubit.images.length}',\n+          Icons.image,\n+          AppColors.danger,\n+        ),\n+        _infoCard(\n+          'Videos',\n+          '${gtinCubit.videos.length}',\n+          Icons.video_collection,\n+          AppColors.skyBlue,\n+        ),\n+      ],\n+    );\n+  }\n+\n+  Widget _infoCard(String title, String subtitle, IconData icon, Color color) {\n+    return Card(\n+      elevation: 2,\n+      color: AppColors.white,\n+      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n+      child: Padding(\n+        padding: const EdgeInsets.all(16),\n+        child: Column(\n+          crossAxisAlignment: CrossAxisAlignment.start,\n+          children: [\n+            Icon(icon, color: color, size: 28),\n+            const Spacer(),\n+            Text(\n+              title,\n+              style: const TextStyle(\n+                fontSize: 16,\n+                fontWeight: FontWeight.bold,\n+              ),\n+            ),\n+            const SizedBox(height: 4),\n+            Text(\n+              subtitle,\n+              style: TextStyle(\n+                fontSize: 14,\n+                color: Colors.grey[600],\n+              ),\n+            ),\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+\n+  Widget _buildReviewsSection() {\n+    return Card(\n+      elevation: 2,\n+      color: AppColors.white,\n+      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n+      child: Padding(\n+        padding: const EdgeInsets.all(16),\n+        child: Column(\n+          crossAxisAlignment: CrossAxisAlignment.start,\n+          children: [\n+            Row(\n+              children: [\n+                const Text(\n+                  'Customer Reviews',\n+                  style: TextStyle(\n+                    fontSize: 18,\n+                    fontWeight: FontWeight.bold,\n+                  ),\n+                ),\n+                const Spacer(),\n+                Row(\n+                  children: [\n+                    const Icon(Icons.star, color: AppColors.gold, size: 20),\n+                    const SizedBox(width: 4),\n+                    Text(\n+                      averageRating(gtinCubit.reviews),\n+                      style: const TextStyle(\n+                        fontSize: 16,\n+                        fontWeight: FontWeight.bold,\n+                      ),\n+                    ),\n+                    const SizedBox(width: 4),\n+                    Text(\n+                      '(${gtinCubit.reviews.length})',\n+                      style: TextStyle(\n+                        fontSize: 14,\n+                        color: Colors.grey[600],\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ],\n+            ),\n+            const SizedBox(height: 16),\n+            PrimaryButtonWidget(\n+                text: \"View All Reviews\",\n+                backgroundColor: AppColors.skyBlue,\n+                onPressed: () {\n+                  AppNavigator.goToPage(\n+                    context: context,\n+                    screen: DigitalLinkViewReviewsScreen(gtin: widget.gtin),\n+                  );\n+                })\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+\n+  Widget _buildDetailsTab() {\n+    return ListView(\n+      padding: const EdgeInsets.all(16),\n+      children: [\n+        _InfoExpansionTile(\n+          title: 'Allergen Information',\n+          icon: Icons.warning_amber_rounded,\n+          iconColor: AppColors.gold,\n+          child: buildAllergenInformation(context),\n+        ),\n+        _InfoExpansionTile(\n+          title: 'Nutrition Facts',\n+          icon: Icons.restaurant_menu,\n+          iconColor: Colors.orange,\n+          child: buildNutritionFactsInformation(context),\n+        ),\n+        _InfoExpansionTile(\n+          title: 'Retailers',\n+          icon: Icons.store,\n+          iconColor: AppColors.skyBlue,\n+          child: buildRetailerInformation(context),\n+        ),\n+        _InfoExpansionTile(\n+          title: 'Ingredients Information',\n+          icon: Icons.list_alt,\n+          iconColor: AppColors.green,\n+          child: buildIngredientInformation(context),\n+        ),\n+        _InfoExpansionTile(\n+          title: 'Instructions',\n+          icon: Icons.info_outline,\n+          iconColor: Colors.purple,\n+          child: buildInstructionInformation(context),\n+        ),\n+        _InfoExpansionTile(\n+          title: 'Packaging',\n+          icon: Icons.inventory_2_outlined,\n+          iconColor: Colors.brown,\n+          child: buildPackagingInformation(context),\n+        ),\n+        _InfoExpansionTile(\n+          title: 'Promotion',\n+          icon: Icons.local_offer_outlined,\n+          iconColor: AppColors.danger,\n+          child: buildPromotionalInformation(context),\n+        ),\n+        _InfoExpansionTile(\n+          title: 'Recipe Info',\n+          icon: Icons.restaurant_menu,\n+          iconColor: AppColors.gold,\n+          child: buildRecipeInformation(context),\n+        ),\n+        _InfoExpansionTile(\n+          title: 'Electronic Leaflets',\n+          icon: Icons.description_outlined,\n+          iconColor: Colors.teal,\n+          child: buildLeafletInformation(context),\n+        ),\n+        _InfoExpansionTile(\n+          title: 'Images',\n+          icon: Icons.image_outlined,\n+          iconColor: Colors.indigo,\n+          child: buildImageInformation(context),\n+        ),\n+        _InfoExpansionTile(\n+          title: 'Videos',\n+          icon: Icons.videocam_outlined,\n+          iconColor: Colors.deepOrange,\n+          child: buildVideoInformation(context),\n+        ),\n+      ],\n+    );\n+  }\n+\n+  Widget _buildSustainabilityTab() {\n+    return Center(\n+      child: Column(\n+        mainAxisAlignment: MainAxisAlignment.center,\n+        children: [\n+          Icon(\n+            Icons.eco_outlined,\n+            size: 80,\n+            color: Colors.grey[400],\n+          ),\n+          const SizedBox(height: 16),\n+          Text(\n+            'Sustainability Information',\n+            style: TextStyle(\n+              fontSize: 18,\n+              fontWeight: FontWeight.bold,\n+              color: Colors.grey[600],\n+            ),\n+          ),\n+          const SizedBox(height: 8),\n+          Text(\n+            'No sustainability data available',\n+            style: TextStyle(\n+              color: Colors.grey[500],\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  Widget buildNutritionFactsInformation(BuildContext context) {\n+    return BlocBuilder<GtinCubit, GtinState>(\n+      bloc: gtinCubit,\n+      builder: (context, state) {\n+        if (state is GtinNutritionFactsLoadingState) {\n+          return const Center(\n+            child: CircularProgressIndicator(),\n+          );\n+        }\n+\n+        return NutritionFactsTab(nutritionFacts: gtinCubit.nutritionFacts);\n+      },\n+    );\n+  }\n+\n+  Widget buildIngredientInformation(BuildContext context) {\n+    return Column(\n+      crossAxisAlignment: CrossAxisAlignment.start,\n+      children: [\n+        ListView.builder(\n+          shrinkWrap: true,\n+          physics: const NeverScrollableScrollPhysics(),\n+          itemCount: gtinCubit.ingredients.length,\n+          padding: const EdgeInsets.symmetric(vertical: 16),\n+          itemBuilder: (context, index) {\n+            final ingredient = gtinCubit.ingredients[index];\n+            return Container(\n+              padding: const EdgeInsets.all(16),\n+              margin: const EdgeInsets.symmetric(vertical: 8),\n+              decoration: BoxDecoration(\n+                borderRadius: BorderRadius.circular(12),\n+                color: AppColors.white,\n+                boxShadow: [\n+                  BoxShadow(\n+                    color: AppColors.grey.withValues(alpha: 0.1),\n+                    spreadRadius: 1,\n+                    blurRadius: 4,\n+                    offset: const Offset(0, 2),\n+                  ),\n+                ],\n+              ),\n+              child: Column(\n+                crossAxisAlignment: CrossAxisAlignment.start,\n+                children: [\n+                  Text(\n+                    'Product Name: ${ingredient.productName}',\n+                    style: const TextStyle(\n+                      fontSize: 18,\n+                      fontWeight: FontWeight.bold,\n+                    ),\n+                  ),\n+                  const SizedBox(height: 20),\n+                  // Ingredient Details Section\n+                  const Text(\n+                    'Ingredient Details:',\n+                    style: TextStyle(\n+                      fontSize: 16,\n+                      fontWeight: FontWeight.w600,\n+                    ),\n+                  ),\n+                  const SizedBox(height: 12),\n+                  _ingredientDetailRow('Name', ingredient.ingredient),\n+                  _ingredientDetailRow(\n+                      'Quantity', '${ingredient.quantity}.${ingredient.unit}'),\n+                  _ingredientDetailRow('Lot Number', ingredient.lotNumber),\n+                  const SizedBox(height: 20),\n+                  // Dates Section\n+                  const Text(\n+                    'Dates:',\n+                    style: TextStyle(\n+                      fontSize: 16,\n+                      fontWeight: FontWeight.w600,\n+                    ),\n+                  ),\n+                  const SizedBox(height: 12),\n+                  Row(\n+                    children: [\n+                      const Icon(Icons.calendar_today,\n+                          size: 16, color: Colors.blue),\n+                      const SizedBox(width: 8),\n+                      Text(\n+                        'Production Date: ${_formatDate(ingredient.productionDate)}',\n+                        style: const TextStyle(color: Colors.black87),\n+                      ),\n+                    ],\n+                  ),\n+                  const SizedBox(height: 8),\n+                  Row(\n+                    children: [\n+                      const Icon(Icons.event_busy,\n+                          size: 16, color: AppColors.danger),\n+                      const SizedBox(width: 8),\n+                      Text(\n+                        'Expiration Date: ${_formatDate(ingredient.expirationDate)}',\n+                        style: const TextStyle(color: Colors.black87),\n+                      ),\n+                    ],\n+                  ),\n+                  const SizedBox(height: 20),\n+                  // Additional Information Section\n+                  const Text(\n+                    'Additional Information:',\n+                    style: TextStyle(\n+                      fontSize: 16,\n+                      fontWeight: FontWeight.w600,\n+                    ),\n+                  ),\n+                  const SizedBox(height: 12),\n+                  Row(\n+                    children: [\n+                      const Icon(Icons.language, size: 16, color: Colors.grey),\n+                      const SizedBox(width: 8),\n+                      Text(\n+                        'Domain: ${ingredient.domainName}',\n+                        style: const TextStyle(color: Colors.black87),\n+                      ),\n+                    ],\n+                  ),\n+                  const SizedBox(height: 8),\n+                  Row(\n+                    children: [\n+                      const Icon(Icons.update, size: 16, color: Colors.grey),\n+                      const SizedBox(width: 8),\n+                      Text(\n+                        'Last Updated: ${_formatDate(ingredient.updatedAt)}',\n+                        style: const TextStyle(\n+                          color: Colors.black87,\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                ],\n+              ),\n+            );\n+          },\n+        ),\n+      ],\n+    );\n+  }\n+\n+  Widget _ingredientDetailRow(String label, String value) {\n+    return Padding(\n+      padding: const EdgeInsets.symmetric(vertical: 6),\n+      child: Row(\n+        crossAxisAlignment: CrossAxisAlignment.start,\n+        children: [\n+          SizedBox(\n+            width: 100,\n+            child: Text(\n+              label,\n+              style: const TextStyle(\n+                fontWeight: FontWeight.w500,\n+                color: Colors.black87,\n+              ),\n+            ),\n+          ),\n+          Expanded(\n+            child: Text(\n+              value,\n+              style: const TextStyle(color: Colors.black87),\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  String _formatDate(DateTime date) {\n+    return \"${date.month}/${date.day}/${date.year}\";\n+  }\n+\n+  Widget buildAllergenInformation(BuildContext context) {\n+    return AllergenTab(allergens: gtinCubit.allergens);\n+  }\n+\n+  Widget buildRetailerInformation(BuildContext context) {\n+    return Column(\n+      children: [\n+        ListView.builder(\n+          shrinkWrap: true,\n+          physics: const NeverScrollableScrollPhysics(),\n+          itemCount: gtinCubit.retailers.length,\n+          padding: const EdgeInsets.symmetric(vertical: 16),\n+          itemBuilder: (context, index) {\n+            final retailer = gtinCubit.retailers[index];\n+            // display images\n+            return Container(\n+                padding: const EdgeInsets.all(16),\n+                margin: const EdgeInsets.symmetric(vertical: 8),\n+                decoration: BoxDecoration(\n+                  borderRadius: BorderRadius.circular(12),\n+                  color: AppColors.white,\n+                  boxShadow: [\n+                    BoxShadow(\n+                      color: AppColors.grey.withValues(alpha: 0.1),\n+                      spreadRadius: 1,\n+                      blurRadius: 4,\n+                      offset: const Offset(0, 2),\n+                    ),\n+                  ],\n+                ),\n+                child: CachedNetworkImage(\n+                  imageUrl: \"${AppUrls.upcHub}/${retailer.logo[0]}\",\n+                  placeholder: (context, url) =>\n+                      const Center(child: CircularProgressIndicator()),\n+                  errorWidget: (context, url, error) => const Icon(Icons.error),\n+                  fit: BoxFit.cover,\n+                  height: 150,\n+                  width: double.infinity,\n+                ));\n+          },\n+        ),\n+      ],\n+    );\n+  }\n+\n+  Widget _retailerDetailRow(String label, String value) {\n+    return Padding(\n+      padding: const EdgeInsets.only(bottom: 8),\n+      child: Row(\n+        crossAxisAlignment: CrossAxisAlignment.start,\n+        children: [\n+          SizedBox(\n+            width: 150,\n+            child: Text(\n+              label,\n+              style: const TextStyle(\n+                fontWeight: FontWeight.w500,\n+                color: Colors.black87,\n+              ),\n+            ),\n+          ),\n+          Expanded(\n+            child: Text(\n+              value,\n+              style: const TextStyle(color: Colors.black87),\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  String _formatDateTime(DateTime dateTime) {\n+    return \"${dateTime.day}/${dateTime.month}/${dateTime.year} ${dateTime.hour}:${dateTime.minute}\";\n+  }\n+\n+  Widget buildPackagingInformation(BuildContext context) {\n+    return Column(\n+      children: [\n+        ListView.builder(\n+          shrinkWrap: true,\n+          physics: const NeverScrollableScrollPhysics(),\n+          itemCount: gtinCubit.packagings.length,\n+          padding: const EdgeInsets.symmetric(vertical: 16),\n+          itemBuilder: (context, index) {\n+            final packaging = gtinCubit.packagings[index];\n+            return Container(\n+              padding: const EdgeInsets.all(16),\n+              margin: const EdgeInsets.symmetric(vertical: 8),\n+              decoration: BoxDecoration(\n+                borderRadius: BorderRadius.circular(12),\n+                color: Colors.white,\n+                boxShadow: [\n+                  BoxShadow(\n+                    color: Colors.grey.withValues(alpha: 0.1),\n+                    spreadRadius: 1,\n+                    blurRadius: 4,\n+                    offset: const Offset(0, 2),\n+                  ),\n+                ],\n+              ),\n+              child: Column(\n+                crossAxisAlignment: CrossAxisAlignment.start,\n+                children: [\n+                  // Status Badge\n+                  Container(\n+                    padding:\n+                        const EdgeInsets.symmetric(horizontal: 12, vertical: 6),\n+                    decoration: BoxDecoration(\n+                      color: packaging.status == 'active'\n+                          ? Colors.green.withValues(alpha: 0.1)\n+                          : Colors.grey.withValues(alpha: 0.1),\n+                      borderRadius: BorderRadius.circular(20),\n+                    ),\n+                    child: Text(\n+                      'Status: ${packaging.status}',\n+                      style: TextStyle(\n+                        color: packaging.status == 'active'\n+                            ? Colors.green\n+                            : Colors.grey,\n+                        fontWeight: FontWeight.w500,\n+                      ),\n+                    ),\n+                  ),\n+                  const SizedBox(height: 16),\n+\n+                  // Basic Information\n+                  _packagingDetailRow('Type', packaging.packagingType),\n+                  _packagingDetailRow('Material', packaging.material),\n+                  _packagingDetailRow('Weight', packaging.weight),\n+                  _packagingDetailRow('Color', packaging.color),\n+                  _packagingDetailRow('Labeling', packaging.labeling),\n+\n+                  const SizedBox(height: 16),\n+                  // Environmental Information\n+                  Container(\n+                    padding: const EdgeInsets.all(12),\n+                    decoration: BoxDecoration(\n+                      color: Colors.green.withValues(alpha: 0.1),\n+                      borderRadius: BorderRadius.circular(8),\n+                    ),\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+                        const Text(\n+                          'Environmental Information',\n+                          style: TextStyle(\n+                            fontSize: 16,\n+                            fontWeight: FontWeight.w600,\n+                            color: Colors.green,\n+                          ),\n+                        ),\n+                        const SizedBox(height: 12),\n+                        Row(\n+                          children: [\n+                            Icon(\n+                              packaging.recyclable\n+                                  ? Icons.check_circle\n+                                  : Icons.cancel,\n+                              color: packaging.recyclable\n+                                  ? Colors.green\n+                                  : Colors.red,\n+                              size: 20,\n+                            ),\n+                            const SizedBox(width: 8),\n+                            const Text('Recyclable'),\n+                          ],\n+                        ),\n+                        const SizedBox(height: 8),\n+                        Row(\n+                          children: [\n+                            Icon(\n+                              packaging.biodegradable\n+                                  ? Icons.check_circle\n+                                  : Icons.cancel,\n+                              color: packaging.biodegradable\n+                                  ? Colors.green\n+                                  : Colors.red,\n+                              size: 20,\n+                            ),\n+                            const SizedBox(width: 8),\n+                            const Text('Biodegradable'),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+\n+                  const SizedBox(height: 16),\n+                  // Additional Information\n+                  Text(\n+                    'Last Updated: ${_formatDateTime(packaging.updatedAt)}',\n+                    style: const TextStyle(\n+                      color: Colors.grey,\n+                      fontSize: 12,\n+                    ),\n+                  ),\n+                ],\n+              ),\n+            );\n+          },\n+        ),\n+      ],\n+    );\n+  }\n+\n+  Widget _packagingDetailRow(String label, String value) {\n+    return Padding(\n+      padding: const EdgeInsets.symmetric(vertical: 6),\n+      child: Row(\n+        crossAxisAlignment: CrossAxisAlignment.start,\n+        children: [\n+          SizedBox(\n+            width: 100,\n+            child: Text(\n+              label,\n+              style: const TextStyle(\n+                fontWeight: FontWeight.w500,\n+                color: Colors.black87,\n+              ),\n+            ),\n+          ),\n+          Expanded(\n+            child: Text(\n+              value,\n+              style: const TextStyle(color: Colors.black87),\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  Widget buildPromotionalInformation(BuildContext context) {\n+    return BlocBuilder<GtinCubit, GtinState>(\n+      builder: (context, state) {\n+        if (state is GtinDigitalLinkViewDataLoadedState) {\n+          if (state.promotions.isEmpty) {\n+            return const Center(\n+              child: Padding(\n+                padding: EdgeInsets.all(16.0),\n+                child: Column(\n+                  children: [\n+                    Icon(\n+                      Icons.local_offer_outlined,\n+                      size: 48,\n+                      color: Colors.grey,\n+                    ),\n+                    SizedBox(height: 16),\n+                    Text(\n+                      'No promotional offers available',\n+                      style: TextStyle(\n+                        color: Colors.grey,\n+                        fontSize: 16,\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+            );\n+          }\n+\n+          return ListView.builder(\n+            shrinkWrap: true,\n+            physics: const NeverScrollableScrollPhysics(),\n+            itemCount: state.promotions.length,\n+            padding: const EdgeInsets.symmetric(vertical: 8),\n+            itemBuilder: (context, index) {\n+              final offer = state.promotions[index];\n+              return Container(\n+                margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 4),\n+                decoration: BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(12),\n+                  boxShadow: [\n+                    BoxShadow(\n+                      color: Colors.grey.withValues(alpha: 0.1),\n+                      spreadRadius: 1,\n+                      blurRadius: 4,\n+                      offset: const Offset(0, 2),\n+                    ),\n+                  ],\n+                ),\n+                child: Column(\n+                  crossAxisAlignment: CrossAxisAlignment.start,\n+                  children: [\n+                    // Offer Header\n+                    Container(\n+                      padding: const EdgeInsets.all(16),\n+                      decoration: BoxDecoration(\n+                        color: AppColors.danger.withValues(alpha: 0.1),\n+                        borderRadius: const BorderRadius.only(\n+                          topLeft: Radius.circular(12),\n+                          topRight: Radius.circular(12),\n+                        ),\n+                      ),\n+                      child: Row(\n+                        children: [\n+                          const Icon(\n+                            Icons.local_offer,\n+                            color: AppColors.danger,\n+                            size: 24,\n+                          ),\n+                          const SizedBox(width: 12),\n+                          Expanded(\n+                            child: Text(\n+                              offer.promotionalOffers,\n+                              style: const TextStyle(\n+                                fontSize: 16,\n+                                fontWeight: FontWeight.w600,\n+                                color: AppColors.danger,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+\n+                    // Offer Details\n+                    Padding(\n+                      padding: const EdgeInsets.all(16),\n+                      child: Column(\n+                        crossAxisAlignment: CrossAxisAlignment.start,\n+                        children: [\n+                          // Price Tag\n+                          Container(\n+                            padding: const EdgeInsets.symmetric(\n+                              horizontal: 12,\n+                              vertical: 6,\n+                            ),\n+                            decoration: BoxDecoration(\n+                              color: Colors.green.withValues(alpha: 0.1),\n+                              borderRadius: BorderRadius.circular(20),\n+                            ),\n+                            child: Text(\n+                              'Price: \\$${offer.price}',\n+                              style: const TextStyle(\n+                                color: Colors.green,\n+                                fontWeight: FontWeight.w600,\n+                              ),\n+                            ),\n+                          ),\n+                          const SizedBox(height: 16),\n+\n+                          // Other Details\n+                          _promotionDetailRow(\n+                            Icons.link,\n+                            'Link Type',\n+                            offer.linkType,\n+                          ),\n+                          _promotionDetailRow(\n+                            Icons.language,\n+                            'Language',\n+                            offer.lang,\n+                          ),\n+                          _promotionDetailRow(\n+                            Icons.calendar_today,\n+                            'Expires',\n+                            offer.expiryDate,\n+                          ),\n+\n+                          if (offer.targetUrl.isNotEmpty) ...[\n+                            const SizedBox(height: 16),\n+                            ElevatedButton.icon(\n+                              onPressed: () async {\n+                                final url = Uri.parse(offer.targetUrl);\n+                                if (await canLaunchUrl(url)) {\n+                                  await launchUrl(url);\n+                                }\n+                              },\n+                              icon: const Icon(Icons.open_in_new),\n+                              label: const Text('View Offer'),\n+                              style: ElevatedButton.styleFrom(\n+                                backgroundColor: AppColors.danger,\n+                                foregroundColor: Colors.white,\n+                                shape: RoundedRectangleBorder(\n+                                  borderRadius: BorderRadius.circular(8),\n+                                ),\n+                              ),\n+                            ),\n+                          ],\n+                        ],\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              );\n+            },\n+          );\n+        }\n+        return const SizedBox.shrink();\n+      },\n+    );\n+  }\n+\n+  Widget _promotionDetailRow(IconData icon, String label, String value) {\n+    return Padding(\n+      padding: const EdgeInsets.only(bottom: 12),\n+      child: Row(\n+        children: [\n+          Icon(\n+            icon,\n+            size: 20,\n+            color: Colors.grey,\n+          ),\n+          const SizedBox(width: 8),\n+          SizedBox(\n+            width: 80,\n+            child: Text(\n+              label,\n+              style: const TextStyle(\n+                color: Colors.grey,\n+                fontWeight: FontWeight.w500,\n+              ),\n+            ),\n+          ),\n+          Expanded(\n+            child: Text(\n+              value,\n+              style: const TextStyle(\n+                color: Colors.black87,\n+                fontWeight: FontWeight.w500,\n+              ),\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  Widget buildRecipeInformation(BuildContext context) {\n+    return BlocBuilder<GtinCubit, GtinState>(\n+      builder: (context, state) {\n+        if (state is GtinDigitalLinkViewDataLoadedState) {\n+          if (state.recipes.isEmpty) {\n+            return const Center(\n+              child: Padding(\n+                padding: EdgeInsets.all(16.0),\n+                child: Column(\n+                  children: [\n+                    Icon(\n+                      Icons.restaurant_menu,\n+                      size: 48,\n+                      color: Colors.grey,\n+                    ),\n+                    SizedBox(height: 16),\n+                    Text(\n+                      'No recipe information available',\n+                      style: TextStyle(\n+                        color: Colors.grey,\n+                        fontSize: 16,\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+            );\n+          }\n+\n+          return ListView.builder(\n+            shrinkWrap: true,\n+            physics: const NeverScrollableScrollPhysics(),\n+            itemCount: state.recipes.length,\n+            padding: const EdgeInsets.symmetric(vertical: 8),\n+            itemBuilder: (context, index) {\n+              final recipe = state.recipes[index];\n+              return Container(\n+                margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 4),\n+                decoration: BoxDecoration(\n+                  color: AppColors.white,\n+                  borderRadius: BorderRadius.circular(12),\n+                  boxShadow: [\n+                    BoxShadow(\n+                      color: AppColors.grey.withValues(alpha: 0.1),\n+                      spreadRadius: 1,\n+                      blurRadius: 4,\n+                      offset: const Offset(0, 2),\n+                    ),\n+                  ],\n+                ),\n+                child: Column(\n+                  crossAxisAlignment: CrossAxisAlignment.start,\n+                  children: [\n+                    // Recipe Header\n+                    Container(\n+                      padding: const EdgeInsets.all(16),\n+                      decoration: BoxDecoration(\n+                        color: AppColors.gold.withValues(alpha: 0.1),\n+                        borderRadius: const BorderRadius.only(\n+                          topLeft: Radius.circular(12),\n+                          topRight: Radius.circular(12),\n+                        ),\n+                      ),\n+                      child: Row(\n+                        children: [\n+                          const Icon(\n+                            Icons.restaurant_menu,\n+                            color: AppColors.gold,\n+                            size: 24,\n+                          ),\n+                          const SizedBox(width: 12),\n+                          Expanded(\n+                            child: Text(\n+                              recipe.title,\n+                              style: const TextStyle(\n+                                fontSize: 18,\n+                                fontWeight: FontWeight.bold,\n+                                color: AppColors.gold,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+\n+                    // Recipe Details\n+                    Padding(\n+                      padding: const EdgeInsets.all(16),\n+                      child: Column(\n+                        crossAxisAlignment: CrossAxisAlignment.start,\n+                        children: [\n+                          const Text(\n+                            'Description',\n+                            style: TextStyle(\n+                              fontSize: 16,\n+                              fontWeight: FontWeight.w600,\n+                              color: Colors.black87,\n+                            ),\n+                          ),\n+                          const SizedBox(height: 8),\n+                          Text(\n+                            recipe.description,\n+                            style: const TextStyle(\n+                              fontSize: 14,\n+                              color: Colors.black54,\n+                              height: 1.5,\n+                            ),\n+                          ),\n+                          const SizedBox(height: 16),\n+                          const Text(\n+                            'Ingredients',\n+                            style: TextStyle(\n+                              fontSize: 16,\n+                              fontWeight: FontWeight.w600,\n+                              color: Colors.black87,\n+                            ),\n+                          ),\n+                          const SizedBox(height: 8),\n+                          Text(\n+                            recipe.ingredients,\n+                            style: const TextStyle(\n+                              fontSize: 14,\n+                              color: Colors.black54,\n+                              height: 1.5,\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              );\n+            },\n+          );\n+        }\n+        return const SizedBox.shrink();\n+      },\n+    );\n+  }\n+\n+  Widget buildLeafletInformation(BuildContext context) {\n+    return BlocBuilder<GtinCubit, GtinState>(\n+      builder: (context, state) {\n+        if (state is GtinDigitalLinkViewDataLoadedState) {\n+          if (state.leaflets.isEmpty) {\n+            return const Center(\n+              child: Padding(\n+                padding: EdgeInsets.all(16.0),\n+                child: Column(\n+                  children: [\n+                    Icon(\n+                      Icons.description_outlined,\n+                      size: 48,\n+                      color: Colors.grey,\n+                    ),\n+                    SizedBox(height: 16),\n+                    Text(\n+                      'No electronic leaflets available',\n+                      style: TextStyle(\n+                        color: Colors.grey,\n+                        fontSize: 16,\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+            );\n+          }\n+\n+          return ListView.builder(\n+            shrinkWrap: true,\n+            physics: const NeverScrollableScrollPhysics(),\n+            itemCount: state.leaflets.length,\n+            padding: const EdgeInsets.symmetric(vertical: 8),\n+            itemBuilder: (context, index) {\n+              final leaflet = state.leaflets[index];\n+              return Container(\n+                margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 4),\n+                decoration: BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(12),\n+                  boxShadow: [\n+                    BoxShadow(\n+                      color: Colors.grey.withValues(alpha: 0.1),\n+                      spreadRadius: 1,\n+                      blurRadius: 4,\n+                      offset: const Offset(0, 2),\n+                    ),\n+                  ],\n+                ),\n+                child: Column(\n+                  crossAxisAlignment: CrossAxisAlignment.start,\n+                  children: [\n+                    // Leaflet Header\n+                    Container(\n+                      padding: const EdgeInsets.all(16),\n+                      decoration: BoxDecoration(\n+                        color: Colors.blue.withValues(alpha: 0.1),\n+                        borderRadius: const BorderRadius.only(\n+                          topLeft: Radius.circular(12),\n+                          topRight: Radius.circular(12),\n+                        ),\n+                      ),\n+                      child: Row(\n+                        children: [\n+                          const Icon(\n+                            Icons.description,\n+                            color: Colors.blue,\n+                            size: 24,\n+                          ),\n+                          const SizedBox(width: 12),\n+                          Expanded(\n+                            child: Text(\n+                              leaflet.productLeafletInformation,\n+                              style: const TextStyle(\n+                                fontSize: 16,\n+                                fontWeight: FontWeight.w600,\n+                                color: Colors.blue,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+\n+                    // Leaflet Details\n+                    Padding(\n+                      padding: const EdgeInsets.all(16),\n+                      child: Column(\n+                        children: [\n+                          _leafletDetailRow(\n+                            Icons.language,\n+                            'Language',\n+                            leaflet.lang,\n+                          ),\n+                          _leafletDetailRow(\n+                            Icons.link,\n+                            'Link Type',\n+                            leaflet.linkType,\n+                          ),\n+                          const SizedBox(height: 16),\n+                          if (leaflet.pdfDoc.isNotEmpty) ...[\n+                            PdfViewer(\n+                                path: \"${AppUrls.gtrack}/${leaflet.pdfDoc}\")\n+                          ],\n+                        ],\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              );\n+            },\n+          );\n+        }\n+        return const SizedBox.shrink();\n+      },\n+    );\n+  }\n+\n+  Widget _leafletDetailRow(IconData icon, String label, String value) {\n+    return Padding(\n+      padding: const EdgeInsets.only(bottom: 12),\n+      child: Row(\n+        children: [\n+          Icon(\n+            icon,\n+            size: 20,\n+            color: Colors.grey,\n+          ),\n+          const SizedBox(width: 8),\n+          SizedBox(\n+            width: 80,\n+            child: Text(\n+              label,\n+              style: const TextStyle(\n+                color: Colors.grey,\n+                fontWeight: FontWeight.w500,\n+              ),\n+            ),\n+          ),\n+          Expanded(\n+            child: Text(\n+              value,\n+              style: const TextStyle(\n+                color: Colors.black87,\n+                fontWeight: FontWeight.w500,\n+              ),\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  Widget buildImageInformation(BuildContext context) {\n+    return BlocBuilder<GtinCubit, GtinState>(\n+      builder: (context, state) {\n+        if (state is GtinDigitalLinkViewDataLoadedState) {\n+          if (state.images.isEmpty) {\n+            return const Center(\n+              child: Padding(\n+                padding: EdgeInsets.all(16.0),\n+                child: Column(\n+                  children: [\n+                    Icon(\n+                      Icons.image_not_supported_outlined,\n+                      size: 48,\n+                      color: Colors.grey,\n+                    ),\n+                    SizedBox(height: 16),\n+                    Text(\n+                      'No images available',\n+                      style: TextStyle(\n+                        color: Colors.grey,\n+                        fontSize: 16,\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+            );\n+          }\n+\n+          return GridView.builder(\n+            shrinkWrap: true,\n+            physics: const NeverScrollableScrollPhysics(),\n+            padding: const EdgeInsets.all(8),\n+            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n+              crossAxisCount: 2,\n+              crossAxisSpacing: 8,\n+              mainAxisSpacing: 8,\n+              childAspectRatio: 1,\n+            ),\n+            itemCount: state.images.length,\n+            itemBuilder: (context, index) {\n+              final image = state.images[index];\n+              return Container(\n+                decoration: BoxDecoration(\n+                  borderRadius: BorderRadius.circular(12),\n+                  boxShadow: [\n+                    BoxShadow(\n+                      color: Colors.grey.withValues(alpha: 0.1),\n+                      spreadRadius: 1,\n+                      blurRadius: 4,\n+                      offset: const Offset(0, 2),\n+                    ),\n+                  ],\n+                ),\n+                child: ClipRRect(\n+                  borderRadius: BorderRadius.circular(12),\n+                  child: CachedNetworkImage(\n+                    imageUrl: '${AppUrls.upcHub}/${image.photos}',\n+                    fit: BoxFit.cover,\n+                    errorWidget: (context, error, stackTrace) {\n+                      return const Center(\n+                        child: Icon(\n+                          Icons.error_outline,\n+                          color: Colors.red,\n+                          size: 24,\n+                        ),\n+                      );\n+                    },\n+                  ),\n+                ),\n+              );\n+            },\n+          );\n+        }\n+        return const SizedBox.shrink();\n+      },\n+    );\n+  }\n+\n+  Widget buildInstructionInformation(BuildContext context) {\n+    return BlocBuilder<GtinCubit, GtinState>(\n+      builder: (context, state) {\n+        if (state is GtinDigitalLinkViewDataLoadedState) {\n+          if (state.instructions.isEmpty) {\n+            return const Center(\n+              child: Padding(\n+                padding: EdgeInsets.all(16.0),\n+                child: Column(\n+                  children: [\n+                    Icon(\n+                      Icons.description_outlined,\n+                      size: 48,\n+                      color: Colors.grey,\n+                    ),\n+                    SizedBox(height: 16),\n+                    Text(\n+                      'No instructions available',\n+                      style: TextStyle(\n+                        color: Colors.grey,\n+                        fontSize: 16,\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+            );\n+          }\n+\n+          return ListView.builder(\n+            shrinkWrap: true,\n+            physics: const NeverScrollableScrollPhysics(),\n+            itemCount: state.instructions.length,\n+            itemBuilder: (context, index) {\n+              final instruction = state.instructions[index];\n+              return Card(\n+                color: AppColors.background,\n+                child: Column(\n+                  crossAxisAlignment: CrossAxisAlignment.start,\n+                  children: [\n+                    // Description Section\n+                    Padding(\n+                      padding: const EdgeInsets.all(16),\n+                      child: Column(\n+                        crossAxisAlignment: CrossAxisAlignment.start,\n+                        children: [\n+                          const Text(\n+                            'Description:',\n+                            style: TextStyle(\n+                              fontSize: 16,\n+                              fontWeight: FontWeight.bold,\n+                            ),\n+                          ),\n+                          const SizedBox(height: 8),\n+                          Text(\n+                            instruction.description,\n+                            style: const TextStyle(\n+                              fontSize: 14,\n+                              color: Colors.black87,\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                    // Additional Information Section\n+                    Padding(\n+                      padding: const EdgeInsets.all(16),\n+                      child: Column(\n+                        crossAxisAlignment: CrossAxisAlignment.start,\n+                        children: [\n+                          const Text(\n+                            'Additional Information:',\n+                            style: TextStyle(\n+                              fontSize: 16,\n+                              fontWeight: FontWeight.bold,\n+                            ),\n+                          ),\n+                          const SizedBox(height: 12),\n+                          _buildInfoRow(\n+                            Icons.calendar_today,\n+                            'Created:',\n+                            formatDate(instruction.createdAt),\n+                          ),\n+                          _buildInfoRow(\n+                            Icons.update,\n+                            'Last Updated:',\n+                            formatDate(instruction.updatedAt),\n+                          ),\n+                          _buildInfoRow(\n+                            Icons.business,\n+                            'Brand Owner ID:',\n+                            instruction.brandOwnerId,\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+\n+                    // PDF Document Section\n+                    if (instruction.pdfDoc.isNotEmpty) ...[\n+                      PdfViewer(\n+                        path: \"${AppUrls.upcHub}/${instruction.pdfDoc}\"\n+                            .replaceAll(\"\\\\\", \"/\"),\n+                      )\n+                    ],\n+                  ],\n+                ),\n+              );\n+            },\n+          );\n+        }\n+        return const SizedBox.shrink();\n+      },\n+    );\n+  }\n+\n+  Widget _buildInfoRow(IconData icon, String label, String value) {\n+    return Padding(\n+      padding: const EdgeInsets.only(bottom: 8),\n+      child: Row(\n+        children: [\n+          Icon(\n+            icon,\n+            size: 18,\n+            color: Colors.grey[600],\n+          ),\n+          const SizedBox(width: 8),\n+          Text(\n+            label,\n+            style: const TextStyle(\n+              fontSize: 14,\n+              color: Colors.grey,\n+            ),\n+          ),\n+          const SizedBox(width: 4),\n+          Text(\n+            value,\n+            style: const TextStyle(\n+              fontSize: 14,\n+              color: Colors.black87,\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  Widget buildVideoInformation(BuildContext context) {\n+    return BlocBuilder<GtinCubit, GtinState>(\n+      builder: (context, state) {\n+        if (state is GtinDigitalLinkViewDataLoadingState) {\n+          return _buildVideoLoadingPlaceholder();\n+        }\n+\n+        if (state is GtinDigitalLinkViewDataLoadedState) {\n+          if (state.videos.isEmpty) {\n+            return const Center(\n+              child: Padding(\n+                padding: EdgeInsets.all(16.0),\n+                child: Column(\n+                  children: [\n+                    Icon(\n+                      Icons.videocam_off_outlined,\n+                      size: 48,\n+                      color: Colors.grey,\n+                    ),\n+                    SizedBox(height: 16),\n+                    Text(\n+                      'No videos available',\n+                      style: TextStyle(\n+                        color: Colors.grey,\n+                        fontSize: 16,\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+            );\n+          }\n+\n+          return ListView.builder(\n+            shrinkWrap: true,\n+            physics: const NeverScrollableScrollPhysics(),\n+            itemCount: state.videos.length,\n+            itemBuilder: (context, index) {\n+              final video = state.videos[index];\n+              return Card(\n+                color: AppColors.white,\n+                child: Column(\n+                  crossAxisAlignment: CrossAxisAlignment.start,\n+                  children: [\n+                    // Video Player\n+                    Container(\n+                      height: 200,\n+                      decoration: BoxDecoration(\n+                        borderRadius: BorderRadius.circular(10),\n+                        border: Border.all(\n+                            color: AppColors.grey.withValues(alpha: 0.2)),\n+                      ),\n+                      child: VideoPlayerWidget(\n+                        url: \"${AppUrls.upcHub}${video.videos}\",\n+                      ),\n+                    ),\n+\n+                    // Video Information\n+                    Padding(\n+                      padding: const EdgeInsets.all(16),\n+                      child: Column(\n+                        crossAxisAlignment: CrossAxisAlignment.start,\n+                        children: [\n+                          _buildInfoRow(\n+                            Icons.calendar_today,\n+                            'Created:',\n+                            formatDate(video.createdAt),\n+                          ),\n+                          const SizedBox(height: 8),\n+                          _buildInfoRow(\n+                            Icons.update,\n+                            'Last Updated:',\n+                            formatDate(video.updatedAt),\n+                          ),\n+                          const SizedBox(height: 8),\n+                          _buildInfoRow(\n+                            Icons.business,\n+                            'Brand Owner ID:',\n+                            video.brandOwnerId,\n+                          ),\n+                          const SizedBox(height: 8),\n+                          _buildInfoRow(\n+                            Icons.domain,\n+                            'Domain:',\n+                            video.domainName,\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              );\n+            },\n+          );\n+        }\n+        return const SizedBox.shrink();\n+      },\n+    );\n+  }\n+\n+  Widget _buildVideoLoadingPlaceholder() {\n+    return ListView.builder(\n+      shrinkWrap: true,\n+      physics: const NeverScrollableScrollPhysics(),\n+      itemCount: 2, // Show 2 placeholder items\n+      itemBuilder: (context, index) {\n+        return Card(\n+          margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n+          elevation: 2,\n+          shape: RoundedRectangleBorder(\n+            borderRadius: BorderRadius.circular(12),\n+          ),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              // Video Player Placeholder\n+              Container(\n+                height: 200,\n+                decoration: BoxDecoration(\n+                  color: Colors.grey.shade300,\n+                  borderRadius: const BorderRadius.only(\n+                    topLeft: Radius.circular(12),\n+                    topRight: Radius.circular(12),\n+                  ),\n+                ),\n+                child: Center(\n+                  child: Icon(\n+                    Icons.play_circle_outline,\n+                    size: 50,\n+                    color: Colors.grey.shade400,\n+                  ),\n+                ),\n+              ),\n+\n+              // Video Information Placeholder\n+              Padding(\n+                padding: const EdgeInsets.all(16),\n+                child: Column(\n+                  crossAxisAlignment: CrossAxisAlignment.start,\n+                  children: List.generate(\n+                    4,\n+                    (i) => Padding(\n+                      padding: const EdgeInsets.only(bottom: 12),\n+                      child: Row(\n+                        children: [\n+                          Container(\n+                            width: 16,\n+                            height: 16,\n+                            decoration: BoxDecoration(\n+                              color: Colors.grey.shade300,\n+                              shape: BoxShape.circle,\n+                            ),\n+                          ),\n+                          const SizedBox(width: 8),\n+                          Container(\n+                            width: 70,\n+                            height: 14,\n+                            decoration: BoxDecoration(\n+                              color: Colors.grey.shade300,\n+                              borderRadius: BorderRadius.circular(4),\n+                            ),\n+                          ),\n+                          const SizedBox(width: 8),\n+                          Expanded(\n+                            child: Container(\n+                              height: 14,\n+                              decoration: BoxDecoration(\n+                                color: Colors.grey.shade300,\n+                                borderRadius: BorderRadius.circular(4),\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                ),\n+              ),\n+            ],\n+          ),\n+        );\n+      },\n+    );\n+  }\n+\n+  String formatDate(DateTime date) {\n+    return \"${date.day.toString().padLeft(2, '0')} ${_getMonth(date.month)} ${date.year}\";\n+  }\n+\n+  String _getMonth(int month) {\n+    const months = [\n+      'Jan',\n+      'Feb',\n+      'Mar',\n+      'Apr',\n+      'May',\n+      'Jun',\n+      'Jul',\n+      'Aug',\n+      'Sep',\n+      'Oct',\n+      'Nov',\n+      'Dec'\n+    ];\n+    return months[month - 1];\n+  }\n+}\n+\n+class _InfoExpansionTile extends StatelessWidget {\n+  const _InfoExpansionTile({\n+    required this.title,\n+    required this.child,\n+    required this.icon,\n+    required this.iconColor,\n+  });\n+\n+  final String title;\n+  final Widget child;\n+  final IconData icon;\n+  final Color iconColor;\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Card(\n+      margin: const EdgeInsets.only(bottom: 12),\n+      color: AppColors.white,\n+      elevation: 2,\n+      shape: RoundedRectangleBorder(\n+        borderRadius: BorderRadius.circular(12),\n+      ),\n+      child: ExpansionTile(\n+        backgroundColor: AppColors.white,\n+        collapsedBackgroundColor: AppColors.white,\n+        shape: RoundedRectangleBorder(\n+          borderRadius: BorderRadius.circular(12),\n+        ),\n+        leading: Icon(icon, color: iconColor),\n+        title: Text(\n+          title,\n+          style: const TextStyle(\n+            fontSize: 16,\n+            fontWeight: FontWeight.w600,\n+          ),\n+        ),\n+        childrenPadding:\n+            const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n+        children: [child],\n+      ),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1750761765841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -571,9 +571,9 @@\n                     ),\n                   ],\n                 ),\n                 child: CachedNetworkImage(\n-                  imageUrl: \"${AppUrls.upcHub}/${retailer.logo![0]}\",\n+                  imageUrl: \"${AppUrls.upcHub}/${retailer.logo![index]}\",\n                   placeholder: (context, url) =>\n                       const Center(child: CircularProgressIndicator()),\n                   errorWidget: (context, url, error) => const Icon(Icons.error),\n                   fit: BoxFit.cover,\n"
                },
                {
                    "date": 1750761823033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -573,9 +573,9 @@\n                   ],\n                 ),\n                 child: CachedNetworkImage(\n                   imageUrl:\n-                      \"${AppUrls.upcHub}/${retailer.logo.replaceAll(\"public\", \"\")}\",\n+                      \"${AppUrls.upcHub}/${retailer.logo.toString().replaceAll(\"public\", \"\")}\",\n                   placeholder: (context, url) =>\n                       const Center(child: CircularProgressIndicator()),\n                   errorWidget: (context, url, error) => const Icon(Icons.error),\n                   fit: BoxFit.cover,\n"
                }
            ],
            "date": 1750754640708,
            "name": "Commit-0",
            "content": "import 'package:cached_network_image/cached_network_image.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:gtrack_nartec/blocs/Identify/gtin/gtin_cubit.dart';\nimport 'package:gtrack_nartec/blocs/Identify/gtin/gtin_states.dart';\nimport 'package:gtrack_nartec/constants/app_urls.dart';\nimport 'package:gtrack_nartec/global/common/colors/app_colors.dart';\nimport 'package:gtrack_nartec/global/common/utils/app_navigator.dart';\nimport 'package:gtrack_nartec/global/utils/average_rating.dart';\nimport 'package:gtrack_nartec/global/widgets/buttons/primary_button.dart';\nimport 'package:gtrack_nartec/global/widgets/card/gtin_card.dart';\nimport 'package:gtrack_nartec/global/widgets/pdf/pdf_viewer.dart';\nimport 'package:gtrack_nartec/global/widgets/video/video_player_widget.dart';\nimport 'package:gtrack_nartec/models/IDENTIFY/GTIN/GTINModel.dart';\nimport 'package:gtrack_nartec/screens/home/identify/GTIN/digital_link_view_reviews_screen.dart';\nimport 'package:gtrack_nartec/screens/home/identify/GTIN/widget/allergen_tab.dart';\nimport 'package:gtrack_nartec/screens/home/identify/GTIN/widget/nutrition_facts_tab.dart';\nimport 'package:url_launcher/url_launcher.dart';\n\nclass DigitalLinkViewDataScreen extends StatefulWidget {\n  const DigitalLinkViewDataScreen(\n      {super.key, required this.barcode, required this.gtin});\n  final String barcode;\n  final GTIN_Model gtin;\n\n  @override\n  State<DigitalLinkViewDataScreen> createState() =>\n      _DigitalLinkViewDataScreenState();\n}\n\nclass _DigitalLinkViewDataScreenState extends State<DigitalLinkViewDataScreen>\n    with SingleTickerProviderStateMixin {\n  late TabController _tabController;\n  late GtinCubit gtinCubit;\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(length: 3, vsync: this);\n    gtinCubit = GtinCubit.get(context);\n    // Updated to call with page 1 and limit 100 by default\n    gtinCubit.getDigitalLinkViewData(widget.barcode);\n    gtinCubit.getReviews(widget.barcode);\n    gtinCubit.getNutritionFacts(widget.barcode);\n    gtinCubit.getAllergenInformation(widget.barcode);\n  }\n\n  @override\n  void dispose() {\n    _tabController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Product Details'),\n        backgroundColor: AppColors.skyBlue,\n      ),\n      body: BlocBuilder<GtinCubit, GtinState>(\n        bloc: gtinCubit,\n        builder: (context, state) {\n          return Column(\n            children: [\n              // Tab Bar\n              Container(\n                decoration: BoxDecoration(\n                  color: AppColors.white,\n                  boxShadow: [\n                    BoxShadow(\n                      color: AppColors.grey.withValues(alpha: 0.2),\n                      spreadRadius: 1,\n                      blurRadius: 3,\n                      offset: const Offset(0, 2),\n                    ),\n                  ],\n                ),\n                child: TabBar(\n                  controller: _tabController,\n                  isScrollable: true,\n                  labelColor: AppColors.skyBlue,\n                  unselectedLabelColor: AppColors.grey,\n                  indicatorColor: AppColors.skyBlue,\n                  indicatorWeight: 3,\n                  labelStyle: const TextStyle(fontWeight: FontWeight.bold),\n                  tabs: const [\n                    Tab(text: 'Overview'),\n                    Tab(text: 'Details'),\n                    Tab(text: 'Sustainability'),\n                  ],\n                ),\n              ),\n\n              // Tab Bar View Content\n              Expanded(\n                child: TabBarView(\n                  controller: _tabController,\n                  children: [\n                    // Overview Tab\n                    _buildOverviewTab(),\n\n                    // Details Tab\n                    _buildDetailsTab(),\n\n                    // Sustainability Tab\n                    _buildSustainabilityTab(),\n                  ],\n                ),\n              ),\n            ],\n          );\n        },\n      ),\n    );\n  }\n\n  Widget _buildOverviewTab() {\n    return SingleChildScrollView(\n      padding: const EdgeInsets.all(16),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        spacing: 16,\n        children: [\n          // Product Hero Section\n          GtinProductCard(product: widget.gtin),\n\n          // Quick Info Cards\n          _buildQuickInfoCards(),\n\n          // Reviews Section\n          _buildReviewsSection(),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildQuickInfoCards() {\n    return GridView.count(\n      crossAxisCount: 2,\n      shrinkWrap: true,\n      physics: const NeverScrollableScrollPhysics(),\n      mainAxisSpacing: 12,\n      crossAxisSpacing: 12,\n      childAspectRatio: 1.5,\n      children: [\n        _infoCard(\n          'Allergens',\n          '${gtinCubit.allergens.length} items',\n          Icons.warning_amber_rounded,\n          AppColors.gold,\n        ),\n        _infoCard(\n          'Ingredients',\n          '${gtinCubit.ingredients.length} items',\n          Icons.list_alt,\n          AppColors.green,\n        ),\n        _infoCard(\n          'Images',\n          '${gtinCubit.images.length}',\n          Icons.image,\n          AppColors.danger,\n        ),\n        _infoCard(\n          'Videos',\n          '${gtinCubit.videos.length}',\n          Icons.video_collection,\n          AppColors.skyBlue,\n        ),\n      ],\n    );\n  }\n\n  Widget _infoCard(String title, String subtitle, IconData icon, Color color) {\n    return Card(\n      elevation: 2,\n      color: AppColors.white,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Icon(icon, color: color, size: 28),\n            const Spacer(),\n            Text(\n              title,\n              style: const TextStyle(\n                fontSize: 16,\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n            const SizedBox(height: 4),\n            Text(\n              subtitle,\n              style: TextStyle(\n                fontSize: 14,\n                color: Colors.grey[600],\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildReviewsSection() {\n    return Card(\n      elevation: 2,\n      color: AppColors.white,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Row(\n              children: [\n                const Text(\n                  'Customer Reviews',\n                  style: TextStyle(\n                    fontSize: 18,\n                    fontWeight: FontWeight.bold,\n                  ),\n                ),\n                const Spacer(),\n                Row(\n                  children: [\n                    const Icon(Icons.star, color: AppColors.gold, size: 20),\n                    const SizedBox(width: 4),\n                    Text(\n                      averageRating(gtinCubit.reviews),\n                      style: const TextStyle(\n                        fontSize: 16,\n                        fontWeight: FontWeight.bold,\n                      ),\n                    ),\n                    const SizedBox(width: 4),\n                    Text(\n                      '(${gtinCubit.reviews.length})',\n                      style: TextStyle(\n                        fontSize: 14,\n                        color: Colors.grey[600],\n                      ),\n                    ),\n                  ],\n                ),\n              ],\n            ),\n            const SizedBox(height: 16),\n            PrimaryButtonWidget(\n                text: \"View All Reviews\",\n                backgroundColor: AppColors.skyBlue,\n                onPressed: () {\n                  AppNavigator.goToPage(\n                    context: context,\n                    screen: DigitalLinkViewReviewsScreen(gtin: widget.gtin),\n                  );\n                })\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildDetailsTab() {\n    return ListView(\n      padding: const EdgeInsets.all(16),\n      children: [\n        _InfoExpansionTile(\n          title: 'Allergen Information',\n          icon: Icons.warning_amber_rounded,\n          iconColor: AppColors.gold,\n          child: buildAllergenInformation(context),\n        ),\n        _InfoExpansionTile(\n          title: 'Nutrition Facts',\n          icon: Icons.restaurant_menu,\n          iconColor: Colors.orange,\n          child: buildNutritionFactsInformation(context),\n        ),\n        _InfoExpansionTile(\n          title: 'Retailers',\n          icon: Icons.store,\n          iconColor: AppColors.skyBlue,\n          child: buildRetailerInformation(context),\n        ),\n        _InfoExpansionTile(\n          title: 'Ingredients Information',\n          icon: Icons.list_alt,\n          iconColor: AppColors.green,\n          child: buildIngredientInformation(context),\n        ),\n        _InfoExpansionTile(\n          title: 'Instructions',\n          icon: Icons.info_outline,\n          iconColor: Colors.purple,\n          child: buildInstructionInformation(context),\n        ),\n        _InfoExpansionTile(\n          title: 'Packaging',\n          icon: Icons.inventory_2_outlined,\n          iconColor: Colors.brown,\n          child: buildPackagingInformation(context),\n        ),\n        _InfoExpansionTile(\n          title: 'Promotion',\n          icon: Icons.local_offer_outlined,\n          iconColor: AppColors.danger,\n          child: buildPromotionalInformation(context),\n        ),\n        _InfoExpansionTile(\n          title: 'Recipe Info',\n          icon: Icons.restaurant_menu,\n          iconColor: AppColors.gold,\n          child: buildRecipeInformation(context),\n        ),\n        _InfoExpansionTile(\n          title: 'Electronic Leaflets',\n          icon: Icons.description_outlined,\n          iconColor: Colors.teal,\n          child: buildLeafletInformation(context),\n        ),\n        _InfoExpansionTile(\n          title: 'Images',\n          icon: Icons.image_outlined,\n          iconColor: Colors.indigo,\n          child: buildImageInformation(context),\n        ),\n        _InfoExpansionTile(\n          title: 'Videos',\n          icon: Icons.videocam_outlined,\n          iconColor: Colors.deepOrange,\n          child: buildVideoInformation(context),\n        ),\n      ],\n    );\n  }\n\n  Widget _buildSustainabilityTab() {\n    return Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Icon(\n            Icons.eco_outlined,\n            size: 80,\n            color: Colors.grey[400],\n          ),\n          const SizedBox(height: 16),\n          Text(\n            'Sustainability Information',\n            style: TextStyle(\n              fontSize: 18,\n              fontWeight: FontWeight.bold,\n              color: Colors.grey[600],\n            ),\n          ),\n          const SizedBox(height: 8),\n          Text(\n            'No sustainability data available',\n            style: TextStyle(\n              color: Colors.grey[500],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget buildNutritionFactsInformation(BuildContext context) {\n    return BlocBuilder<GtinCubit, GtinState>(\n      bloc: gtinCubit,\n      builder: (context, state) {\n        if (state is GtinNutritionFactsLoadingState) {\n          return const Center(\n            child: CircularProgressIndicator(),\n          );\n        }\n\n        return NutritionFactsTab(nutritionFacts: gtinCubit.nutritionFacts);\n      },\n    );\n  }\n\n  Widget buildIngredientInformation(BuildContext context) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        ListView.builder(\n          shrinkWrap: true,\n          physics: const NeverScrollableScrollPhysics(),\n          itemCount: gtinCubit.ingredients.length,\n          padding: const EdgeInsets.symmetric(vertical: 16),\n          itemBuilder: (context, index) {\n            final ingredient = gtinCubit.ingredients[index];\n            return Container(\n              padding: const EdgeInsets.all(16),\n              margin: const EdgeInsets.symmetric(vertical: 8),\n              decoration: BoxDecoration(\n                borderRadius: BorderRadius.circular(12),\n                color: AppColors.white,\n                boxShadow: [\n                  BoxShadow(\n                    color: AppColors.grey.withValues(alpha: 0.1),\n                    spreadRadius: 1,\n                    blurRadius: 4,\n                    offset: const Offset(0, 2),\n                  ),\n                ],\n              ),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  Text(\n                    'Product Name: ${ingredient.productName}',\n                    style: const TextStyle(\n                      fontSize: 18,\n                      fontWeight: FontWeight.bold,\n                    ),\n                  ),\n                  const SizedBox(height: 20),\n                  // Ingredient Details Section\n                  const Text(\n                    'Ingredient Details:',\n                    style: TextStyle(\n                      fontSize: 16,\n                      fontWeight: FontWeight.w600,\n                    ),\n                  ),\n                  const SizedBox(height: 12),\n                  _ingredientDetailRow('Name', ingredient.ingredient),\n                  _ingredientDetailRow(\n                      'Quantity', '${ingredient.quantity}.${ingredient.unit}'),\n                  _ingredientDetailRow('Lot Number', ingredient.lotNumber),\n                  const SizedBox(height: 20),\n                  // Dates Section\n                  const Text(\n                    'Dates:',\n                    style: TextStyle(\n                      fontSize: 16,\n                      fontWeight: FontWeight.w600,\n                    ),\n                  ),\n                  const SizedBox(height: 12),\n                  Row(\n                    children: [\n                      const Icon(Icons.calendar_today,\n                          size: 16, color: Colors.blue),\n                      const SizedBox(width: 8),\n                      Text(\n                        'Production Date: ${_formatDate(ingredient.productionDate)}',\n                        style: const TextStyle(color: Colors.black87),\n                      ),\n                    ],\n                  ),\n                  const SizedBox(height: 8),\n                  Row(\n                    children: [\n                      const Icon(Icons.event_busy,\n                          size: 16, color: AppColors.danger),\n                      const SizedBox(width: 8),\n                      Text(\n                        'Expiration Date: ${_formatDate(ingredient.expirationDate)}',\n                        style: const TextStyle(color: Colors.black87),\n                      ),\n                    ],\n                  ),\n                  const SizedBox(height: 20),\n                  // Additional Information Section\n                  const Text(\n                    'Additional Information:',\n                    style: TextStyle(\n                      fontSize: 16,\n                      fontWeight: FontWeight.w600,\n                    ),\n                  ),\n                  const SizedBox(height: 12),\n                  Row(\n                    children: [\n                      const Icon(Icons.language, size: 16, color: Colors.grey),\n                      const SizedBox(width: 8),\n                      Text(\n                        'Domain: ${ingredient.domainName}',\n                        style: const TextStyle(color: Colors.black87),\n                      ),\n                    ],\n                  ),\n                  const SizedBox(height: 8),\n                  Row(\n                    children: [\n                      const Icon(Icons.update, size: 16, color: Colors.grey),\n                      const SizedBox(width: 8),\n                      Text(\n                        'Last Updated: ${_formatDate(ingredient.updatedAt)}',\n                        style: const TextStyle(\n                          color: Colors.black87,\n                        ),\n                      ),\n                    ],\n                  ),\n                ],\n              ),\n            );\n          },\n        ),\n      ],\n    );\n  }\n\n  Widget _ingredientDetailRow(String label, String value) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 6),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          SizedBox(\n            width: 100,\n            child: Text(\n              label,\n              style: const TextStyle(\n                fontWeight: FontWeight.w500,\n                color: Colors.black87,\n              ),\n            ),\n          ),\n          Expanded(\n            child: Text(\n              value,\n              style: const TextStyle(color: Colors.black87),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  String _formatDate(DateTime date) {\n    return \"${date.month}/${date.day}/${date.year}\";\n  }\n\n  Widget buildAllergenInformation(BuildContext context) {\n    return AllergenTab(allergens: gtinCubit.allergens);\n  }\n\n  Widget buildRetailerInformation(BuildContext context) {\n    return Column(\n      children: [\n        ListView.builder(\n          shrinkWrap: true,\n          physics: const NeverScrollableScrollPhysics(),\n          itemCount: gtinCubit.retailers.length,\n          padding: const EdgeInsets.symmetric(vertical: 16),\n          itemBuilder: (context, index) {\n            final retailer = gtinCubit.retailers[index];\n            return Container(\n              padding: const EdgeInsets.all(16),\n              margin: const EdgeInsets.symmetric(vertical: 8),\n              decoration: BoxDecoration(\n                borderRadius: BorderRadius.circular(12),\n                color: Colors.white,\n                boxShadow: [\n                  BoxShadow(\n                    color: Colors.grey.withValues(alpha: 0.1),\n                    spreadRadius: 1,\n                    blurRadius: 4,\n                    offset: const Offset(0, 2),\n                  ),\n                ],\n              ),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  // Store Information Section\n                  Container(\n                    padding: const EdgeInsets.all(12),\n                    decoration: BoxDecoration(\n                      color: AppColors.skyBlue.withValues(alpha: 0.1),\n                      borderRadius: BorderRadius.circular(8),\n                    ),\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        Text(\n                          \"Store Information\",\n                          style: TextStyle(\n                            fontSize: 16,\n                            fontWeight: FontWeight.w600,\n                            color: AppColors.skyBlue,\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        _retailerDetailRow(\n                            \"Store Name\", retailer.storeName ?? \"\"),\n                        _retailerDetailRow(\"Store ID\", retailer.storeId ?? \"\"),\n                        _retailerDetailRow(\n                            \"Store GLN\", retailer.storeGln ?? \"\"),\n                      ],\n                    ),\n                  ),\n                  const SizedBox(height: 12),\n                  // Product Details Section\n                  Container(\n                    padding: const EdgeInsets.all(12),\n                    decoration: BoxDecoration(\n                      color: AppColors.green.withValues(alpha: 0.1),\n                      borderRadius: BorderRadius.circular(8),\n                    ),\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        const Text(\n                          \"Product Details\",\n                          style: TextStyle(\n                            fontSize: 16,\n                            fontWeight: FontWeight.w600,\n                            color: AppColors.green,\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        _retailerDetailRow(\"Product SKU\", retailer.productSku),\n                        _retailerDetailRow(\"Barcode\", retailer.barcode),\n                        _retailerDetailRow(\"Domain\", retailer.domainName),\n                      ],\n                    ),\n                  ),\n                  const SizedBox(height: 12),\n                  // Additional Information Section\n                  Container(\n                    padding: const EdgeInsets.all(12),\n                    decoration: BoxDecoration(\n                      color: AppColors.pink.withValues(alpha: 0.1),\n                      borderRadius: BorderRadius.circular(8),\n                    ),\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        const Text(\n                          \"Additional Information\",\n                          style: TextStyle(\n                            fontSize: 16,\n                            fontWeight: FontWeight.w600,\n                            color: AppColors.pink,\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        _retailerDetailRow(\n                          \"Created\",\n                          _formatDateTime(retailer.createdAt),\n                        ),\n                        _retailerDetailRow(\n                          \"Last Updated\",\n                          _formatDateTime(retailer.updatedAt),\n                        ),\n                        _retailerDetailRow(\n                          \"Brand Owner ID\",\n                          retailer.brandOwnerId,\n                        ),\n                      ],\n                    ),\n                  ),\n                ],\n              ),\n            );\n          },\n        ),\n      ],\n    );\n  }\n\n  Widget _retailerDetailRow(String label, String value) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 8),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          SizedBox(\n            width: 150,\n            child: Text(\n              label,\n              style: const TextStyle(\n                fontWeight: FontWeight.w500,\n                color: Colors.black87,\n              ),\n            ),\n          ),\n          Expanded(\n            child: Text(\n              value,\n              style: const TextStyle(color: Colors.black87),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  String _formatDateTime(DateTime dateTime) {\n    return \"${dateTime.day}/${dateTime.month}/${dateTime.year} ${dateTime.hour}:${dateTime.minute}\";\n  }\n\n  Widget buildPackagingInformation(BuildContext context) {\n    return Column(\n      children: [\n        ListView.builder(\n          shrinkWrap: true,\n          physics: const NeverScrollableScrollPhysics(),\n          itemCount: gtinCubit.packagings.length,\n          padding: const EdgeInsets.symmetric(vertical: 16),\n          itemBuilder: (context, index) {\n            final packaging = gtinCubit.packagings[index];\n            return Container(\n              padding: const EdgeInsets.all(16),\n              margin: const EdgeInsets.symmetric(vertical: 8),\n              decoration: BoxDecoration(\n                borderRadius: BorderRadius.circular(12),\n                color: Colors.white,\n                boxShadow: [\n                  BoxShadow(\n                    color: Colors.grey.withValues(alpha: 0.1),\n                    spreadRadius: 1,\n                    blurRadius: 4,\n                    offset: const Offset(0, 2),\n                  ),\n                ],\n              ),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  // Status Badge\n                  Container(\n                    padding:\n                        const EdgeInsets.symmetric(horizontal: 12, vertical: 6),\n                    decoration: BoxDecoration(\n                      color: packaging.status == 'active'\n                          ? Colors.green.withValues(alpha: 0.1)\n                          : Colors.grey.withValues(alpha: 0.1),\n                      borderRadius: BorderRadius.circular(20),\n                    ),\n                    child: Text(\n                      'Status: ${packaging.status}',\n                      style: TextStyle(\n                        color: packaging.status == 'active'\n                            ? Colors.green\n                            : Colors.grey,\n                        fontWeight: FontWeight.w500,\n                      ),\n                    ),\n                  ),\n                  const SizedBox(height: 16),\n\n                  // Basic Information\n                  _packagingDetailRow('Type', packaging.packagingType),\n                  _packagingDetailRow('Material', packaging.material),\n                  _packagingDetailRow('Weight', packaging.weight),\n                  _packagingDetailRow('Color', packaging.color),\n                  _packagingDetailRow('Labeling', packaging.labeling),\n\n                  const SizedBox(height: 16),\n                  // Environmental Information\n                  Container(\n                    padding: const EdgeInsets.all(12),\n                    decoration: BoxDecoration(\n                      color: Colors.green.withValues(alpha: 0.1),\n                      borderRadius: BorderRadius.circular(8),\n                    ),\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        const Text(\n                          'Environmental Information',\n                          style: TextStyle(\n                            fontSize: 16,\n                            fontWeight: FontWeight.w600,\n                            color: Colors.green,\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        Row(\n                          children: [\n                            Icon(\n                              packaging.recyclable\n                                  ? Icons.check_circle\n                                  : Icons.cancel,\n                              color: packaging.recyclable\n                                  ? Colors.green\n                                  : Colors.red,\n                              size: 20,\n                            ),\n                            const SizedBox(width: 8),\n                            const Text('Recyclable'),\n                          ],\n                        ),\n                        const SizedBox(height: 8),\n                        Row(\n                          children: [\n                            Icon(\n                              packaging.biodegradable\n                                  ? Icons.check_circle\n                                  : Icons.cancel,\n                              color: packaging.biodegradable\n                                  ? Colors.green\n                                  : Colors.red,\n                              size: 20,\n                            ),\n                            const SizedBox(width: 8),\n                            const Text('Biodegradable'),\n                          ],\n                        ),\n                      ],\n                    ),\n                  ),\n\n                  const SizedBox(height: 16),\n                  // Additional Information\n                  Text(\n                    'Last Updated: ${_formatDateTime(packaging.updatedAt)}',\n                    style: const TextStyle(\n                      color: Colors.grey,\n                      fontSize: 12,\n                    ),\n                  ),\n                ],\n              ),\n            );\n          },\n        ),\n      ],\n    );\n  }\n\n  Widget _packagingDetailRow(String label, String value) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 6),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          SizedBox(\n            width: 100,\n            child: Text(\n              label,\n              style: const TextStyle(\n                fontWeight: FontWeight.w500,\n                color: Colors.black87,\n              ),\n            ),\n          ),\n          Expanded(\n            child: Text(\n              value,\n              style: const TextStyle(color: Colors.black87),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget buildPromotionalInformation(BuildContext context) {\n    return BlocBuilder<GtinCubit, GtinState>(\n      builder: (context, state) {\n        if (state is GtinDigitalLinkViewDataLoadedState) {\n          if (state.promotions.isEmpty) {\n            return const Center(\n              child: Padding(\n                padding: EdgeInsets.all(16.0),\n                child: Column(\n                  children: [\n                    Icon(\n                      Icons.local_offer_outlined,\n                      size: 48,\n                      color: Colors.grey,\n                    ),\n                    SizedBox(height: 16),\n                    Text(\n                      'No promotional offers available',\n                      style: TextStyle(\n                        color: Colors.grey,\n                        fontSize: 16,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            );\n          }\n\n          return ListView.builder(\n            shrinkWrap: true,\n            physics: const NeverScrollableScrollPhysics(),\n            itemCount: state.promotions.length,\n            padding: const EdgeInsets.symmetric(vertical: 8),\n            itemBuilder: (context, index) {\n              final offer = state.promotions[index];\n              return Container(\n                margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 4),\n                decoration: BoxDecoration(\n                  color: Colors.white,\n                  borderRadius: BorderRadius.circular(12),\n                  boxShadow: [\n                    BoxShadow(\n                      color: Colors.grey.withValues(alpha: 0.1),\n                      spreadRadius: 1,\n                      blurRadius: 4,\n                      offset: const Offset(0, 2),\n                    ),\n                  ],\n                ),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    // Offer Header\n                    Container(\n                      padding: const EdgeInsets.all(16),\n                      decoration: BoxDecoration(\n                        color: AppColors.danger.withValues(alpha: 0.1),\n                        borderRadius: const BorderRadius.only(\n                          topLeft: Radius.circular(12),\n                          topRight: Radius.circular(12),\n                        ),\n                      ),\n                      child: Row(\n                        children: [\n                          const Icon(\n                            Icons.local_offer,\n                            color: AppColors.danger,\n                            size: 24,\n                          ),\n                          const SizedBox(width: 12),\n                          Expanded(\n                            child: Text(\n                              offer.promotionalOffers,\n                              style: const TextStyle(\n                                fontSize: 16,\n                                fontWeight: FontWeight.w600,\n                                color: AppColors.danger,\n                              ),\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n\n                    // Offer Details\n                    Padding(\n                      padding: const EdgeInsets.all(16),\n                      child: Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          // Price Tag\n                          Container(\n                            padding: const EdgeInsets.symmetric(\n                              horizontal: 12,\n                              vertical: 6,\n                            ),\n                            decoration: BoxDecoration(\n                              color: Colors.green.withValues(alpha: 0.1),\n                              borderRadius: BorderRadius.circular(20),\n                            ),\n                            child: Text(\n                              'Price: \\$${offer.price}',\n                              style: const TextStyle(\n                                color: Colors.green,\n                                fontWeight: FontWeight.w600,\n                              ),\n                            ),\n                          ),\n                          const SizedBox(height: 16),\n\n                          // Other Details\n                          _promotionDetailRow(\n                            Icons.link,\n                            'Link Type',\n                            offer.linkType,\n                          ),\n                          _promotionDetailRow(\n                            Icons.language,\n                            'Language',\n                            offer.lang,\n                          ),\n                          _promotionDetailRow(\n                            Icons.calendar_today,\n                            'Expires',\n                            offer.expiryDate,\n                          ),\n\n                          if (offer.targetUrl.isNotEmpty) ...[\n                            const SizedBox(height: 16),\n                            ElevatedButton.icon(\n                              onPressed: () async {\n                                final url = Uri.parse(offer.targetUrl);\n                                if (await canLaunchUrl(url)) {\n                                  await launchUrl(url);\n                                }\n                              },\n                              icon: const Icon(Icons.open_in_new),\n                              label: const Text('View Offer'),\n                              style: ElevatedButton.styleFrom(\n                                backgroundColor: AppColors.danger,\n                                foregroundColor: Colors.white,\n                                shape: RoundedRectangleBorder(\n                                  borderRadius: BorderRadius.circular(8),\n                                ),\n                              ),\n                            ),\n                          ],\n                        ],\n                      ),\n                    ),\n                  ],\n                ),\n              );\n            },\n          );\n        }\n        return const SizedBox.shrink();\n      },\n    );\n  }\n\n  Widget _promotionDetailRow(IconData icon, String label, String value) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 12),\n      child: Row(\n        children: [\n          Icon(\n            icon,\n            size: 20,\n            color: Colors.grey,\n          ),\n          const SizedBox(width: 8),\n          SizedBox(\n            width: 80,\n            child: Text(\n              label,\n              style: const TextStyle(\n                color: Colors.grey,\n                fontWeight: FontWeight.w500,\n              ),\n            ),\n          ),\n          Expanded(\n            child: Text(\n              value,\n              style: const TextStyle(\n                color: Colors.black87,\n                fontWeight: FontWeight.w500,\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget buildRecipeInformation(BuildContext context) {\n    return BlocBuilder<GtinCubit, GtinState>(\n      builder: (context, state) {\n        if (state is GtinDigitalLinkViewDataLoadedState) {\n          if (state.recipes.isEmpty) {\n            return const Center(\n              child: Padding(\n                padding: EdgeInsets.all(16.0),\n                child: Column(\n                  children: [\n                    Icon(\n                      Icons.restaurant_menu,\n                      size: 48,\n                      color: Colors.grey,\n                    ),\n                    SizedBox(height: 16),\n                    Text(\n                      'No recipe information available',\n                      style: TextStyle(\n                        color: Colors.grey,\n                        fontSize: 16,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            );\n          }\n\n          return ListView.builder(\n            shrinkWrap: true,\n            physics: const NeverScrollableScrollPhysics(),\n            itemCount: state.recipes.length,\n            padding: const EdgeInsets.symmetric(vertical: 8),\n            itemBuilder: (context, index) {\n              final recipe = state.recipes[index];\n              return Container(\n                margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 4),\n                decoration: BoxDecoration(\n                  color: AppColors.white,\n                  borderRadius: BorderRadius.circular(12),\n                  boxShadow: [\n                    BoxShadow(\n                      color: AppColors.grey.withValues(alpha: 0.1),\n                      spreadRadius: 1,\n                      blurRadius: 4,\n                      offset: const Offset(0, 2),\n                    ),\n                  ],\n                ),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    // Recipe Header\n                    Container(\n                      padding: const EdgeInsets.all(16),\n                      decoration: BoxDecoration(\n                        color: AppColors.gold.withValues(alpha: 0.1),\n                        borderRadius: const BorderRadius.only(\n                          topLeft: Radius.circular(12),\n                          topRight: Radius.circular(12),\n                        ),\n                      ),\n                      child: Row(\n                        children: [\n                          const Icon(\n                            Icons.restaurant_menu,\n                            color: AppColors.gold,\n                            size: 24,\n                          ),\n                          const SizedBox(width: 12),\n                          Expanded(\n                            child: Text(\n                              recipe.title,\n                              style: const TextStyle(\n                                fontSize: 18,\n                                fontWeight: FontWeight.bold,\n                                color: AppColors.gold,\n                              ),\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n\n                    // Recipe Details\n                    Padding(\n                      padding: const EdgeInsets.all(16),\n                      child: Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          const Text(\n                            'Description',\n                            style: TextStyle(\n                              fontSize: 16,\n                              fontWeight: FontWeight.w600,\n                              color: Colors.black87,\n                            ),\n                          ),\n                          const SizedBox(height: 8),\n                          Text(\n                            recipe.description,\n                            style: const TextStyle(\n                              fontSize: 14,\n                              color: Colors.black54,\n                              height: 1.5,\n                            ),\n                          ),\n                          const SizedBox(height: 16),\n                          const Text(\n                            'Ingredients',\n                            style: TextStyle(\n                              fontSize: 16,\n                              fontWeight: FontWeight.w600,\n                              color: Colors.black87,\n                            ),\n                          ),\n                          const SizedBox(height: 8),\n                          Text(\n                            recipe.ingredients,\n                            style: const TextStyle(\n                              fontSize: 14,\n                              color: Colors.black54,\n                              height: 1.5,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                  ],\n                ),\n              );\n            },\n          );\n        }\n        return const SizedBox.shrink();\n      },\n    );\n  }\n\n  Widget buildLeafletInformation(BuildContext context) {\n    return BlocBuilder<GtinCubit, GtinState>(\n      builder: (context, state) {\n        if (state is GtinDigitalLinkViewDataLoadedState) {\n          if (state.leaflets.isEmpty) {\n            return const Center(\n              child: Padding(\n                padding: EdgeInsets.all(16.0),\n                child: Column(\n                  children: [\n                    Icon(\n                      Icons.description_outlined,\n                      size: 48,\n                      color: Colors.grey,\n                    ),\n                    SizedBox(height: 16),\n                    Text(\n                      'No electronic leaflets available',\n                      style: TextStyle(\n                        color: Colors.grey,\n                        fontSize: 16,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            );\n          }\n\n          return ListView.builder(\n            shrinkWrap: true,\n            physics: const NeverScrollableScrollPhysics(),\n            itemCount: state.leaflets.length,\n            padding: const EdgeInsets.symmetric(vertical: 8),\n            itemBuilder: (context, index) {\n              final leaflet = state.leaflets[index];\n              return Container(\n                margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 4),\n                decoration: BoxDecoration(\n                  color: Colors.white,\n                  borderRadius: BorderRadius.circular(12),\n                  boxShadow: [\n                    BoxShadow(\n                      color: Colors.grey.withValues(alpha: 0.1),\n                      spreadRadius: 1,\n                      blurRadius: 4,\n                      offset: const Offset(0, 2),\n                    ),\n                  ],\n                ),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    // Leaflet Header\n                    Container(\n                      padding: const EdgeInsets.all(16),\n                      decoration: BoxDecoration(\n                        color: Colors.blue.withValues(alpha: 0.1),\n                        borderRadius: const BorderRadius.only(\n                          topLeft: Radius.circular(12),\n                          topRight: Radius.circular(12),\n                        ),\n                      ),\n                      child: Row(\n                        children: [\n                          const Icon(\n                            Icons.description,\n                            color: Colors.blue,\n                            size: 24,\n                          ),\n                          const SizedBox(width: 12),\n                          Expanded(\n                            child: Text(\n                              leaflet.productLeafletInformation,\n                              style: const TextStyle(\n                                fontSize: 16,\n                                fontWeight: FontWeight.w600,\n                                color: Colors.blue,\n                              ),\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n\n                    // Leaflet Details\n                    Padding(\n                      padding: const EdgeInsets.all(16),\n                      child: Column(\n                        children: [\n                          _leafletDetailRow(\n                            Icons.language,\n                            'Language',\n                            leaflet.lang,\n                          ),\n                          _leafletDetailRow(\n                            Icons.link,\n                            'Link Type',\n                            leaflet.linkType,\n                          ),\n                          const SizedBox(height: 16),\n                          if (leaflet.pdfDoc.isNotEmpty) ...[\n                            PdfViewer(\n                                path: \"${AppUrls.gtrack}/${leaflet.pdfDoc}\")\n                          ],\n                        ],\n                      ),\n                    ),\n                  ],\n                ),\n              );\n            },\n          );\n        }\n        return const SizedBox.shrink();\n      },\n    );\n  }\n\n  Widget _leafletDetailRow(IconData icon, String label, String value) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 12),\n      child: Row(\n        children: [\n          Icon(\n            icon,\n            size: 20,\n            color: Colors.grey,\n          ),\n          const SizedBox(width: 8),\n          SizedBox(\n            width: 80,\n            child: Text(\n              label,\n              style: const TextStyle(\n                color: Colors.grey,\n                fontWeight: FontWeight.w500,\n              ),\n            ),\n          ),\n          Expanded(\n            child: Text(\n              value,\n              style: const TextStyle(\n                color: Colors.black87,\n                fontWeight: FontWeight.w500,\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget buildImageInformation(BuildContext context) {\n    return BlocBuilder<GtinCubit, GtinState>(\n      builder: (context, state) {\n        if (state is GtinDigitalLinkViewDataLoadedState) {\n          if (state.images.isEmpty) {\n            return const Center(\n              child: Padding(\n                padding: EdgeInsets.all(16.0),\n                child: Column(\n                  children: [\n                    Icon(\n                      Icons.image_not_supported_outlined,\n                      size: 48,\n                      color: Colors.grey,\n                    ),\n                    SizedBox(height: 16),\n                    Text(\n                      'No images available',\n                      style: TextStyle(\n                        color: Colors.grey,\n                        fontSize: 16,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            );\n          }\n\n          return GridView.builder(\n            shrinkWrap: true,\n            physics: const NeverScrollableScrollPhysics(),\n            padding: const EdgeInsets.all(8),\n            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n              crossAxisCount: 2,\n              crossAxisSpacing: 8,\n              mainAxisSpacing: 8,\n              childAspectRatio: 1,\n            ),\n            itemCount: state.images.length,\n            itemBuilder: (context, index) {\n              final image = state.images[index];\n              return Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(12),\n                  boxShadow: [\n                    BoxShadow(\n                      color: Colors.grey.withValues(alpha: 0.1),\n                      spreadRadius: 1,\n                      blurRadius: 4,\n                      offset: const Offset(0, 2),\n                    ),\n                  ],\n                ),\n                child: ClipRRect(\n                  borderRadius: BorderRadius.circular(12),\n                  child: CachedNetworkImage(\n                    imageUrl: '${AppUrls.upcHub}/${image.photos}',\n                    fit: BoxFit.cover,\n                    errorWidget: (context, error, stackTrace) {\n                      return const Center(\n                        child: Icon(\n                          Icons.error_outline,\n                          color: Colors.red,\n                          size: 24,\n                        ),\n                      );\n                    },\n                  ),\n                ),\n              );\n            },\n          );\n        }\n        return const SizedBox.shrink();\n      },\n    );\n  }\n\n  Widget buildInstructionInformation(BuildContext context) {\n    return BlocBuilder<GtinCubit, GtinState>(\n      builder: (context, state) {\n        if (state is GtinDigitalLinkViewDataLoadedState) {\n          if (state.instructions.isEmpty) {\n            return const Center(\n              child: Padding(\n                padding: EdgeInsets.all(16.0),\n                child: Column(\n                  children: [\n                    Icon(\n                      Icons.description_outlined,\n                      size: 48,\n                      color: Colors.grey,\n                    ),\n                    SizedBox(height: 16),\n                    Text(\n                      'No instructions available',\n                      style: TextStyle(\n                        color: Colors.grey,\n                        fontSize: 16,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            );\n          }\n\n          return ListView.builder(\n            shrinkWrap: true,\n            physics: const NeverScrollableScrollPhysics(),\n            itemCount: state.instructions.length,\n            itemBuilder: (context, index) {\n              final instruction = state.instructions[index];\n              return Card(\n                color: AppColors.background,\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    // Description Section\n                    Padding(\n                      padding: const EdgeInsets.all(16),\n                      child: Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          const Text(\n                            'Description:',\n                            style: TextStyle(\n                              fontSize: 16,\n                              fontWeight: FontWeight.bold,\n                            ),\n                          ),\n                          const SizedBox(height: 8),\n                          Text(\n                            instruction.description,\n                            style: const TextStyle(\n                              fontSize: 14,\n                              color: Colors.black87,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                    // Additional Information Section\n                    Padding(\n                      padding: const EdgeInsets.all(16),\n                      child: Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          const Text(\n                            'Additional Information:',\n                            style: TextStyle(\n                              fontSize: 16,\n                              fontWeight: FontWeight.bold,\n                            ),\n                          ),\n                          const SizedBox(height: 12),\n                          _buildInfoRow(\n                            Icons.calendar_today,\n                            'Created:',\n                            formatDate(instruction.createdAt),\n                          ),\n                          _buildInfoRow(\n                            Icons.update,\n                            'Last Updated:',\n                            formatDate(instruction.updatedAt),\n                          ),\n                          _buildInfoRow(\n                            Icons.business,\n                            'Brand Owner ID:',\n                            instruction.brandOwnerId,\n                          ),\n                        ],\n                      ),\n                    ),\n\n                    // PDF Document Section\n                    if (instruction.pdfDoc.isNotEmpty) ...[\n                      PdfViewer(\n                        path: \"${AppUrls.upcHub}/${instruction.pdfDoc}\"\n                            .replaceAll(\"\\\\\", \"/\"),\n                      )\n                    ],\n                  ],\n                ),\n              );\n            },\n          );\n        }\n        return const SizedBox.shrink();\n      },\n    );\n  }\n\n  Widget _buildInfoRow(IconData icon, String label, String value) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 8),\n      child: Row(\n        children: [\n          Icon(\n            icon,\n            size: 18,\n            color: Colors.grey[600],\n          ),\n          const SizedBox(width: 8),\n          Text(\n            label,\n            style: const TextStyle(\n              fontSize: 14,\n              color: Colors.grey,\n            ),\n          ),\n          const SizedBox(width: 4),\n          Text(\n            value,\n            style: const TextStyle(\n              fontSize: 14,\n              color: Colors.black87,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget buildVideoInformation(BuildContext context) {\n    return BlocBuilder<GtinCubit, GtinState>(\n      builder: (context, state) {\n        if (state is GtinDigitalLinkViewDataLoadingState) {\n          return _buildVideoLoadingPlaceholder();\n        }\n\n        if (state is GtinDigitalLinkViewDataLoadedState) {\n          if (state.videos.isEmpty) {\n            return const Center(\n              child: Padding(\n                padding: EdgeInsets.all(16.0),\n                child: Column(\n                  children: [\n                    Icon(\n                      Icons.videocam_off_outlined,\n                      size: 48,\n                      color: Colors.grey,\n                    ),\n                    SizedBox(height: 16),\n                    Text(\n                      'No videos available',\n                      style: TextStyle(\n                        color: Colors.grey,\n                        fontSize: 16,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            );\n          }\n\n          return ListView.builder(\n            shrinkWrap: true,\n            physics: const NeverScrollableScrollPhysics(),\n            itemCount: state.videos.length,\n            itemBuilder: (context, index) {\n              final video = state.videos[index];\n              return Card(\n                color: AppColors.white,\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    // Video Player\n                    Container(\n                      height: 200,\n                      decoration: BoxDecoration(\n                        borderRadius: BorderRadius.circular(10),\n                        border: Border.all(\n                            color: AppColors.grey.withValues(alpha: 0.2)),\n                      ),\n                      child: VideoPlayerWidget(\n                        url: \"${AppUrls.upcHub}${video.videos}\",\n                      ),\n                    ),\n\n                    // Video Information\n                    Padding(\n                      padding: const EdgeInsets.all(16),\n                      child: Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          _buildInfoRow(\n                            Icons.calendar_today,\n                            'Created:',\n                            formatDate(video.createdAt),\n                          ),\n                          const SizedBox(height: 8),\n                          _buildInfoRow(\n                            Icons.update,\n                            'Last Updated:',\n                            formatDate(video.updatedAt),\n                          ),\n                          const SizedBox(height: 8),\n                          _buildInfoRow(\n                            Icons.business,\n                            'Brand Owner ID:',\n                            video.brandOwnerId,\n                          ),\n                          const SizedBox(height: 8),\n                          _buildInfoRow(\n                            Icons.domain,\n                            'Domain:',\n                            video.domainName,\n                          ),\n                        ],\n                      ),\n                    ),\n                  ],\n                ),\n              );\n            },\n          );\n        }\n        return const SizedBox.shrink();\n      },\n    );\n  }\n\n  Widget _buildVideoLoadingPlaceholder() {\n    return ListView.builder(\n      shrinkWrap: true,\n      physics: const NeverScrollableScrollPhysics(),\n      itemCount: 2, // Show 2 placeholder items\n      itemBuilder: (context, index) {\n        return Card(\n          margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n          elevation: 2,\n          shape: RoundedRectangleBorder(\n            borderRadius: BorderRadius.circular(12),\n          ),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              // Video Player Placeholder\n              Container(\n                height: 200,\n                decoration: BoxDecoration(\n                  color: Colors.grey.shade300,\n                  borderRadius: const BorderRadius.only(\n                    topLeft: Radius.circular(12),\n                    topRight: Radius.circular(12),\n                  ),\n                ),\n                child: Center(\n                  child: Icon(\n                    Icons.play_circle_outline,\n                    size: 50,\n                    color: Colors.grey.shade400,\n                  ),\n                ),\n              ),\n\n              // Video Information Placeholder\n              Padding(\n                padding: const EdgeInsets.all(16),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: List.generate(\n                    4,\n                    (i) => Padding(\n                      padding: const EdgeInsets.only(bottom: 12),\n                      child: Row(\n                        children: [\n                          Container(\n                            width: 16,\n                            height: 16,\n                            decoration: BoxDecoration(\n                              color: Colors.grey.shade300,\n                              shape: BoxShape.circle,\n                            ),\n                          ),\n                          const SizedBox(width: 8),\n                          Container(\n                            width: 70,\n                            height: 14,\n                            decoration: BoxDecoration(\n                              color: Colors.grey.shade300,\n                              borderRadius: BorderRadius.circular(4),\n                            ),\n                          ),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: Container(\n                              height: 14,\n                              decoration: BoxDecoration(\n                                color: Colors.grey.shade300,\n                                borderRadius: BorderRadius.circular(4),\n                              ),\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n\n  String formatDate(DateTime date) {\n    return \"${date.day.toString().padLeft(2, '0')} ${_getMonth(date.month)} ${date.year}\";\n  }\n\n  String _getMonth(int month) {\n    const months = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec'\n    ];\n    return months[month - 1];\n  }\n}\n\nclass _InfoExpansionTile extends StatelessWidget {\n  const _InfoExpansionTile({\n    required this.title,\n    required this.child,\n    required this.icon,\n    required this.iconColor,\n  });\n\n  final String title;\n  final Widget child;\n  final IconData icon;\n  final Color iconColor;\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      margin: const EdgeInsets.only(bottom: 12),\n      color: AppColors.white,\n      elevation: 2,\n      shape: RoundedRectangleBorder(\n        borderRadius: BorderRadius.circular(12),\n      ),\n      child: ExpansionTile(\n        backgroundColor: AppColors.white,\n        collapsedBackgroundColor: AppColors.white,\n        shape: RoundedRectangleBorder(\n          borderRadius: BorderRadius.circular(12),\n        ),\n        leading: Icon(icon, color: iconColor),\n        title: Text(\n          title,\n          style: const TextStyle(\n            fontSize: 16,\n            fontWeight: FontWeight.w600,\n          ),\n        ),\n        childrenPadding:\n            const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n        children: [child],\n      ),\n    );\n  }\n}\n"
        }
    ]
}